import { Canvas } from "./Canvas";
import type { ClickMode } from "../Enums/Modes/ClickMode";
import type { Engine } from "../engine";
import { FrameManager } from "./Utils/FrameManager";
import type { IContainerInteractivity } from "./Interfaces/IContainerInteractivity";
import type { IContainerPlugin } from "./Interfaces/IContainerPlugin";
import type { IMovePathGenerator } from "./Interfaces/IMovePathGenerator";
import type { IOptions } from "../Options/Interfaces/IOptions";
import type { IShapeDrawer } from "./Interfaces/IShapeDrawer";
import { Options } from "../Options/Classes/Options";
import type { Particle } from "./Particle";
import { Particles } from "./Particles";
import type { RecursivePartial } from "../Types/RecursivePartial";
import { Retina } from "./Retina";
import type { Vector } from "./Utils/Vector";
export declare class Container {
    #private;
    readonly id: string;
    actualOptions: Options;
    readonly canvas: Canvas;
    density: number;
    destroyed: boolean;
    readonly drawer: FrameManager;
    readonly drawers: Map<string, IShapeDrawer>;
    duration: number;
    fpsLimit: number;
    interactivity: IContainerInteractivity;
    lastFrameTime?: number;
    lifeTime: number;
    pageHidden: boolean;
    readonly particles: Particles;
    pathGenerator: IMovePathGenerator;
    readonly plugins: Map<string, IContainerPlugin>;
    responsiveMaxWidth?: number;
    readonly retina: Retina;
    started: boolean;
    zLayers: number;
    private readonly _initialSourceOptions;
    private _options;
    private _sourceOptions;
    private currentTheme?;
    private drawAnimationFrame?;
    private firstStart;
    private readonly intersectionObserver?;
    private paused;
    constructor(engine: Engine, id: string, sourceOptions?: RecursivePartial<IOptions>);
    get options(): Options;
    get sourceOptions(): RecursivePartial<IOptions> | undefined;
    addClickHandler(callback: (evt: Event, particles?: Particle[]) => void): void;
    destroy(): void;
    draw(force: boolean): void;
    exportConfiguration(): string;
    exportImage(callback: BlobCallback, type?: string, quality?: number): void;
    exportImg(callback: BlobCallback): void;
    getAnimationStatus(): boolean;
    handleClickMode(mode: ClickMode | string): void;
    init(): Promise<void>;
    loadTheme(name?: string): Promise<void>;
    pause(): void;
    play(force?: boolean): void;
    refresh(): Promise<void>;
    reset(): Promise<void>;
    setNoise(noiseOrGenerator?: IMovePathGenerator | ((particle: Particle) => Vector), init?: () => void, update?: () => void): void;
    setPath(pathOrGenerator?: IMovePathGenerator | ((particle: Particle) => Vector), init?: () => void, update?: () => void): void;
    start(): Promise<void>;
    stop(): void;
    updateActualOptions(): boolean;
    private intersectionManager;
}
