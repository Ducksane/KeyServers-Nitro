{"ast":null,"code":"import _slicedToArray from\"/home/muphy/Documents/habboom/Nitro-Edit-main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";var _excluded=[\"show\",\"role\",\"className\",\"style\",\"children\",\"backdrop\",\"keyboard\",\"onBackdropClick\",\"onEscapeKeyDown\",\"transition\",\"backdropTransition\",\"autoFocus\",\"enforceFocus\",\"restoreFocus\",\"restoreFocusOptions\",\"renderDialog\",\"renderBackdrop\",\"manager\",\"container\",\"onShow\",\"onHide\",\"onExit\",\"onExited\",\"onExiting\",\"onEnter\",\"onEntering\",\"onEntered\"];function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}/* eslint-disable @typescript-eslint/no-use-before-define, react/prop-types */import activeElement from'dom-helpers/activeElement';import contains from'dom-helpers/contains';import canUseDOM from'dom-helpers/canUseDOM';import listen from'dom-helpers/listen';import{useState,useRef,useCallback,useImperativeHandle,forwardRef,useEffect}from'react';import*as React from'react';import ReactDOM from'react-dom';import useMounted from'@restart/hooks/useMounted';import useWillUnmount from'@restart/hooks/useWillUnmount';import usePrevious from'@restart/hooks/usePrevious';import useEventCallback from'@restart/hooks/useEventCallback';import ModalManager from'./ModalManager';import useWaitForDOMRef from'./useWaitForDOMRef';import useWindow from'./useWindow';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var manager;function getManager(window){if(!manager)manager=new ModalManager({ownerDocument:window==null?void 0:window.document});return manager;}function useModalManager(provided){var window=useWindow();var modalManager=provided||getManager(window);var modal=useRef({dialog:null,backdrop:null});return Object.assign(modal.current,{add:function add(){return modalManager.add(modal.current);},remove:function remove(){return modalManager.remove(modal.current);},isTopModal:function isTopModal(){return modalManager.isTopModal(modal.current);},setDialogRef:useCallback(function(ref){modal.current.dialog=ref;},[]),setBackdropRef:useCallback(function(ref){modal.current.backdrop=ref;},[])});}var Modal=/*#__PURE__*/forwardRef(function(_ref,ref){var _ref$show=_ref.show,show=_ref$show===void 0?false:_ref$show,_ref$role=_ref.role,role=_ref$role===void 0?'dialog':_ref$role,className=_ref.className,style=_ref.style,children=_ref.children,_ref$backdrop=_ref.backdrop,backdrop=_ref$backdrop===void 0?true:_ref$backdrop,_ref$keyboard=_ref.keyboard,keyboard=_ref$keyboard===void 0?true:_ref$keyboard,onBackdropClick=_ref.onBackdropClick,onEscapeKeyDown=_ref.onEscapeKeyDown,transition=_ref.transition,backdropTransition=_ref.backdropTransition,_ref$autoFocus=_ref.autoFocus,autoFocus=_ref$autoFocus===void 0?true:_ref$autoFocus,_ref$enforceFocus=_ref.enforceFocus,enforceFocus=_ref$enforceFocus===void 0?true:_ref$enforceFocus,_ref$restoreFocus=_ref.restoreFocus,restoreFocus=_ref$restoreFocus===void 0?true:_ref$restoreFocus,restoreFocusOptions=_ref.restoreFocusOptions,renderDialog=_ref.renderDialog,_ref$renderBackdrop=_ref.renderBackdrop,renderBackdrop=_ref$renderBackdrop===void 0?function(props){return/*#__PURE__*/_jsx(\"div\",Object.assign({},props));}:_ref$renderBackdrop,providedManager=_ref.manager,containerRef=_ref.container,onShow=_ref.onShow,_ref$onHide=_ref.onHide,onHide=_ref$onHide===void 0?function(){}:_ref$onHide,onExit=_ref.onExit,onExited=_ref.onExited,onExiting=_ref.onExiting,onEnter=_ref.onEnter,onEntering=_ref.onEntering,onEntered=_ref.onEntered,rest=_objectWithoutPropertiesLoose(_ref,_excluded);var container=useWaitForDOMRef(containerRef);var modal=useModalManager(providedManager);var isMounted=useMounted();var prevShow=usePrevious(show);var _useState=useState(!show),_useState2=_slicedToArray(_useState,2),exited=_useState2[0],setExited=_useState2[1];var lastFocusRef=useRef(null);useImperativeHandle(ref,function(){return modal;},[modal]);if(canUseDOM&&!prevShow&&show){lastFocusRef.current=activeElement();}if(!transition&&!show&&!exited){setExited(true);}else if(show&&exited){setExited(false);}var handleShow=useEventCallback(function(){modal.add();removeKeydownListenerRef.current=listen(document,'keydown',handleDocumentKeyDown);removeFocusListenerRef.current=listen(document,'focus',// the timeout is necessary b/c this will run before the new modal is mounted\n// and so steals focus from it\nfunction(){return setTimeout(handleEnforceFocus);},true);if(onShow){onShow();}// autofocus after onShow to not trigger a focus event for previous\n// modals before this one is shown.\nif(autoFocus){var currentActiveElement=activeElement(document);if(modal.dialog&&currentActiveElement&&!contains(modal.dialog,currentActiveElement)){lastFocusRef.current=currentActiveElement;modal.dialog.focus();}}});var handleHide=useEventCallback(function(){modal.remove();removeKeydownListenerRef.current==null?void 0:removeKeydownListenerRef.current();removeFocusListenerRef.current==null?void 0:removeFocusListenerRef.current();if(restoreFocus){var _lastFocusRef$current;// Support: <=IE11 doesn't support `focus()` on svg elements (RB: #917)\n(_lastFocusRef$current=lastFocusRef.current)==null?void 0:_lastFocusRef$current.focus==null?void 0:_lastFocusRef$current.focus(restoreFocusOptions);lastFocusRef.current=null;}});// TODO: try and combine these effects: https://github.com/react-bootstrap/react-overlays/pull/794#discussion_r409954120\n// Show logic when:\n//  - show is `true` _and_ `container` has resolved\nuseEffect(function(){if(!show||!container)return;handleShow();},[show,container,/* should never change: */handleShow]);// Hide cleanup logic when:\n//  - `exited` switches to true\n//  - component unmounts;\nuseEffect(function(){if(!exited)return;handleHide();},[exited,handleHide]);useWillUnmount(function(){handleHide();});// --------------------------------\nvar handleEnforceFocus=useEventCallback(function(){if(!enforceFocus||!isMounted()||!modal.isTopModal()){return;}var currentActiveElement=activeElement();if(modal.dialog&&currentActiveElement&&!contains(modal.dialog,currentActiveElement)){modal.dialog.focus();}});var handleBackdropClick=useEventCallback(function(e){if(e.target!==e.currentTarget){return;}onBackdropClick==null?void 0:onBackdropClick(e);if(backdrop===true){onHide();}});var handleDocumentKeyDown=useEventCallback(function(e){if(keyboard&&e.keyCode===27&&modal.isTopModal()){onEscapeKeyDown==null?void 0:onEscapeKeyDown(e);if(!e.defaultPrevented){onHide();}}});var removeFocusListenerRef=useRef();var removeKeydownListenerRef=useRef();var handleHidden=function handleHidden(){setExited(true);onExited==null?void 0:onExited.apply(void 0,arguments);};var Transition=transition;if(!container||!(show||Transition&&!exited)){return null;}var dialogProps=Object.assign({role:role,ref:modal.setDialogRef,// apparently only works on the dialog role element\n'aria-modal':role==='dialog'?true:undefined},rest,{style:style,className:className,tabIndex:-1});var dialog=renderDialog?renderDialog(dialogProps):/*#__PURE__*/_jsx(\"div\",Object.assign({},dialogProps,{children:/*#__PURE__*/React.cloneElement(children,{role:'document'})}));if(Transition){dialog=/*#__PURE__*/_jsx(Transition,{appear:true,unmountOnExit:true,in:!!show,onExit:onExit,onExiting:onExiting,onExited:handleHidden,onEnter:onEnter,onEntering:onEntering,onEntered:onEntered,children:dialog});}var backdropElement=null;if(backdrop){var BackdropTransition=backdropTransition;backdropElement=renderBackdrop({ref:modal.setBackdropRef,onClick:handleBackdropClick});if(BackdropTransition){backdropElement=/*#__PURE__*/_jsx(BackdropTransition,{appear:true,in:!!show,children:backdropElement});}}return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/ReactDOM.createPortal(/*#__PURE__*/_jsxs(_Fragment,{children:[backdropElement,dialog]}),container)});});Modal.displayName='Modal';export default Object.assign(Modal,{Manager:ModalManager});","map":null,"metadata":{},"sourceType":"module"}