{"ast":null,"code":"import{clamp,getDistance,getDistances,isInArray}from\"tsparticles-engine\";export function applyDistance(particle){var initialPosition=particle.initialPosition,_getDistances=getDistances(initialPosition,particle.position),dx=_getDistances.dx,dy=_getDistances.dy,dxFixed=Math.abs(dx),dyFixed=Math.abs(dy),hDistance=particle.retina.maxDistance.horizontal,vDistance=particle.retina.maxDistance.vertical;if(!hDistance&&!vDistance){return;}if((hDistance&&dxFixed>=hDistance||vDistance&&dyFixed>=vDistance)&&!particle.misplaced){particle.misplaced=!!hDistance&&dxFixed>hDistance||!!vDistance&&dyFixed>vDistance;if(hDistance){particle.velocity.x=particle.velocity.y/2-particle.velocity.x;}if(vDistance){particle.velocity.y=particle.velocity.x/2-particle.velocity.y;}}else if((!hDistance||dxFixed<hDistance)&&(!vDistance||dyFixed<vDistance)&&particle.misplaced){particle.misplaced=false;}else if(particle.misplaced){var pos=particle.position,vel=particle.velocity;if(hDistance&&(pos.x<initialPosition.x&&vel.x<0||pos.x>initialPosition.x&&vel.x>0)){vel.x*=-Math.random();}if(vDistance&&(pos.y<initialPosition.y&&vel.y<0||pos.y>initialPosition.y&&vel.y>0)){vel.y*=-Math.random();}}}export function spin(particle,moveSpeed){var container=particle.container;if(!particle.spin){return;}var updateFunc={x:particle.spin.direction===\"clockwise\"?Math.cos:Math.sin,y:particle.spin.direction===\"clockwise\"?Math.sin:Math.cos};particle.position.x=particle.spin.center.x+particle.spin.radius*updateFunc.x(particle.spin.angle);particle.position.y=particle.spin.center.y+particle.spin.radius*updateFunc.y(particle.spin.angle);particle.spin.radius+=particle.spin.acceleration;var maxCanvasSize=Math.max(container.canvas.size.width,container.canvas.size.height);if(particle.spin.radius>maxCanvasSize/2){particle.spin.radius=maxCanvasSize/2;particle.spin.acceleration*=-1;}else if(particle.spin.radius<0){particle.spin.radius=0;particle.spin.acceleration*=-1;}particle.spin.angle+=moveSpeed/100*(1-particle.spin.radius/maxCanvasSize);}export function applyPath(particle,delta){var particlesOptions=particle.options;var pathOptions=particlesOptions.move.path;var pathEnabled=pathOptions.enable;if(!pathEnabled){return;}var container=particle.container;if(particle.lastPathTime<=particle.pathDelay){particle.lastPathTime+=delta.value;return;}var path=container.pathGenerator.generate(particle);particle.velocity.addTo(path);if(pathOptions.clamp){particle.velocity.x=clamp(particle.velocity.x,-1,1);particle.velocity.y=clamp(particle.velocity.y,-1,1);}particle.lastPathTime-=particle.pathDelay;}export function getProximitySpeedFactor(particle){var container=particle.container;var options=container.actualOptions;var active=isInArray(\"slow\",options.interactivity.events.onHover.mode);if(!active){return 1;}var mousePos=particle.container.interactivity.mouse.position;if(!mousePos){return 1;}var particlePos=particle.getPosition();var dist=getDistance(mousePos,particlePos);var radius=container.retina.slowModeRadius;if(dist>radius){return 1;}var proximityFactor=dist/radius||0;var slowFactor=options.interactivity.modes.slow.factor;return proximityFactor/slowFactor;}","map":null,"metadata":{},"sourceType":"module"}