{"ast":null,"code":"/*!\n * @pixi/ticker - v6.3.0\n * Compiled Wed, 23 Mar 2022 18:58:56 UTC\n *\n * @pixi/ticker is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */import{settings}from'@pixi/settings';/**\n * Target frames per millisecond.\n *\n * @static\n * @name TARGET_FPMS\n * @memberof PIXI.settings\n * @type {number}\n * @default 0.06\n */settings.TARGET_FPMS=0.06;/**\n * Represents the update priorities used by internal PIXI classes when registered with\n * the {@link PIXI.Ticker} object. Higher priority items are updated first and lower\n * priority items, such as render, should go later.\n *\n * @static\n * @constant\n * @name UPDATE_PRIORITY\n * @memberof PIXI\n * @enum {number}\n * @property {number} INTERACTION=50 Highest priority, used for {@link PIXI.InteractionManager}\n * @property {number} HIGH=25 High priority updating, {@link PIXI.VideoBaseTexture} and {@link PIXI.AnimatedSprite}\n * @property {number} NORMAL=0 Default priority for ticker events, see {@link PIXI.Ticker#add}.\n * @property {number} LOW=-25 Low priority used for {@link PIXI.Application} rendering.\n * @property {number} UTILITY=-50 Lowest priority used for {@link PIXI.BasePrepare} utility.\n */var UPDATE_PRIORITY;(function(UPDATE_PRIORITY){UPDATE_PRIORITY[UPDATE_PRIORITY[\"INTERACTION\"]=50]=\"INTERACTION\";UPDATE_PRIORITY[UPDATE_PRIORITY[\"HIGH\"]=25]=\"HIGH\";UPDATE_PRIORITY[UPDATE_PRIORITY[\"NORMAL\"]=0]=\"NORMAL\";UPDATE_PRIORITY[UPDATE_PRIORITY[\"LOW\"]=-25]=\"LOW\";UPDATE_PRIORITY[UPDATE_PRIORITY[\"UTILITY\"]=-50]=\"UTILITY\";})(UPDATE_PRIORITY||(UPDATE_PRIORITY={}));/**\n * Internal class for handling the priority sorting of ticker handlers.\n *\n * @private\n * @class\n * @memberof PIXI\n */var TickerListener=/** @class */function(){/**\n     * Constructor\n     * @private\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @param priority - The priority for emitting\n     * @param once - If the handler should fire once\n     */function TickerListener(fn,context,priority,once){if(context===void 0){context=null;}if(priority===void 0){priority=0;}if(once===void 0){once=false;}/** The next item in chain. */this.next=null;/** The previous item in chain. */this.previous=null;/** `true` if this listener has been destroyed already. */this._destroyed=false;this.fn=fn;this.context=context;this.priority=priority;this.once=once;}/**\n     * Simple compare function to figure out if a function and context match.\n     * @private\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @return `true` if the listener match the arguments\n     */TickerListener.prototype.match=function(fn,context){if(context===void 0){context=null;}return this.fn===fn&&this.context===context;};/**\n     * Emit by calling the current function.\n     * @private\n     * @param deltaTime - time since the last emit.\n     * @return Next ticker\n     */TickerListener.prototype.emit=function(deltaTime){if(this.fn){if(this.context){this.fn.call(this.context,deltaTime);}else{this.fn(deltaTime);}}var redirect=this.next;if(this.once){this.destroy(true);}// Soft-destroying should remove\n// the next reference\nif(this._destroyed){this.next=null;}return redirect;};/**\n     * Connect to the list.\n     * @private\n     * @param previous - Input node, previous listener\n     */TickerListener.prototype.connect=function(previous){this.previous=previous;if(previous.next){previous.next.previous=this;}this.next=previous.next;previous.next=this;};/**\n     * Destroy and don't use after this.\n     * @private\n     * @param hard - `true` to remove the `next` reference, this\n     *        is considered a hard destroy. Soft destroy maintains the next reference.\n     * @return The listener to redirect while emitting or removing.\n     */TickerListener.prototype.destroy=function(hard){if(hard===void 0){hard=false;}this._destroyed=true;this.fn=null;this.context=null;// Disconnect, hook up next and previous\nif(this.previous){this.previous.next=this.next;}if(this.next){this.next.previous=this.previous;}// Redirect to the next item\nvar redirect=this.next;// Remove references\nthis.next=hard?null:redirect;this.previous=null;return redirect;};return TickerListener;}();/**\n * A Ticker class that runs an update loop that other objects listen to.\n *\n * This class is composed around listeners meant for execution on the next requested animation frame.\n * Animation frames are requested only when necessary, e.g. When the ticker is started and the emitter has listeners.\n *\n * @class\n * @memberof PIXI\n */var Ticker=/** @class */function(){function Ticker(){var _this=this;/**\n         * Whether or not this ticker should invoke the method\n         * {@link PIXI.Ticker#start} automatically\n         * when a listener is added.\n         */this.autoStart=false;/**\n         * Scalar time value from last frame to this frame.\n         * This value is capped by setting {@link PIXI.Ticker#minFPS}\n         * and is scaled with {@link PIXI.Ticker#speed}.\n         * **Note:** The cap may be exceeded by scaling.\n         */this.deltaTime=1;/**\n         * The last time {@link PIXI.Ticker#update} was invoked.\n         * This value is also reset internally outside of invoking\n         * update, but only when a new animation frame is requested.\n         * If the platform supports DOMHighResTimeStamp,\n         * this value will have a precision of 1 Âµs.\n         */this.lastTime=-1;/**\n         * Factor of current {@link PIXI.Ticker#deltaTime}.\n         * @example\n         * // Scales ticker.deltaTime to what would be\n         * // the equivalent of approximately 120 FPS\n         * ticker.speed = 2;\n         */this.speed=1;/**\n         * Whether or not this ticker has been started.\n         * `true` if {@link PIXI.Ticker#start} has been called.\n         * `false` if {@link PIXI.Ticker#stop} has been called.\n         * While `false`, this value may change to `true` in the\n         * event of {@link PIXI.Ticker#autoStart} being `true`\n         * and a listener is added.\n         */this.started=false;/** Internal current frame request ID */this._requestId=null;/**\n         * Internal value managed by minFPS property setter and getter.\n         * This is the maximum allowed milliseconds between updates.\n         */this._maxElapsedMS=100;/**\n         * Internal value managed by minFPS property setter and getter.\n         * This is the minimum allowed milliseconds between updates.\n         */this._minElapsedMS=0;/** If enabled, deleting is disabled.*/this._protected=false;/**\n         * The last time keyframe was executed.\n         * Maintains a relatively fixed interval with the previous value.\n         */this._lastFrame=-1;this._head=new TickerListener(null,null,Infinity);this.deltaMS=1/settings.TARGET_FPMS;this.elapsedMS=1/settings.TARGET_FPMS;this._tick=function(time){_this._requestId=null;if(_this.started){// Invoke listeners now\n_this.update(time);// Listener side effects may have modified ticker state.\nif(_this.started&&_this._requestId===null&&_this._head.next){_this._requestId=requestAnimationFrame(_this._tick);}}};}/**\n     * Conditionally requests a new animation frame.\n     * If a frame has not already been requested, and if the internal\n     * emitter has listeners, a new frame is requested.\n     *\n     * @private\n     */Ticker.prototype._requestIfNeeded=function(){if(this._requestId===null&&this._head.next){// ensure callbacks get correct delta\nthis.lastTime=performance.now();this._lastFrame=this.lastTime;this._requestId=requestAnimationFrame(this._tick);}};/**\n     * Conditionally cancels a pending animation frame.\n     * @private\n     */Ticker.prototype._cancelIfNeeded=function(){if(this._requestId!==null){cancelAnimationFrame(this._requestId);this._requestId=null;}};/**\n     * Conditionally requests a new animation frame.\n     * If the ticker has been started it checks if a frame has not already\n     * been requested, and if the internal emitter has listeners. If these\n     * conditions are met, a new frame is requested. If the ticker has not\n     * been started, but autoStart is `true`, then the ticker starts now,\n     * and continues with the previous conditions to request a new frame.\n     *\n     * @private\n     */Ticker.prototype._startIfPossible=function(){if(this.started){this._requestIfNeeded();}else if(this.autoStart){this.start();}};/**\n     * Register a handler for tick events. Calls continuously unless\n     * it is removed or the ticker is stopped.\n     *\n     * @param fn - The listener function to be added for updates\n     * @param context - The listener context\n     * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n     * @returns This instance of a ticker\n     */Ticker.prototype.add=function(fn,context,priority){if(priority===void 0){priority=UPDATE_PRIORITY.NORMAL;}return this._addListener(new TickerListener(fn,context,priority));};/**\n     * Add a handler for the tick event which is only execute once.\n     *\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n     * @returns This instance of a ticker\n     */Ticker.prototype.addOnce=function(fn,context,priority){if(priority===void 0){priority=UPDATE_PRIORITY.NORMAL;}return this._addListener(new TickerListener(fn,context,priority,true));};/**\n     * Internally adds the event handler so that it can be sorted by priority.\n     * Priority allows certain handler (user, AnimatedSprite, Interaction) to be run\n     * before the rendering.\n     *\n     * @private\n     * @param listener - Current listener being added.\n     * @returns This instance of a ticker\n     */Ticker.prototype._addListener=function(listener){// For attaching to head\nvar current=this._head.next;var previous=this._head;// Add the first item\nif(!current){listener.connect(previous);}else{// Go from highest to lowest priority\nwhile(current){if(listener.priority>current.priority){listener.connect(previous);break;}previous=current;current=current.next;}// Not yet connected\nif(!listener.previous){listener.connect(previous);}}this._startIfPossible();return this;};/**\n     * Removes any handlers matching the function and context parameters.\n     * If no handlers are left after removing, then it cancels the animation frame.\n     *\n     * @param fn - The listener function to be removed\n     * @param context - The listener context to be removed\n     * @returns This instance of a ticker\n     */Ticker.prototype.remove=function(fn,context){var listener=this._head.next;while(listener){// We found a match, lets remove it\n// no break to delete all possible matches\n// incase a listener was added 2+ times\nif(listener.match(fn,context)){listener=listener.destroy();}else{listener=listener.next;}}if(!this._head.next){this._cancelIfNeeded();}return this;};Object.defineProperty(Ticker.prototype,\"count\",{/**\n         * The number of listeners on this ticker, calculated by walking through linked list\n         *\n         * @readonly\n         * @member {number}\n         */get:function get(){if(!this._head){return 0;}var count=0;var current=this._head;while(current=current.next){count++;}return count;},enumerable:false,configurable:true});/**\n     * Starts the ticker. If the ticker has listeners\n     * a new animation frame is requested at this point.\n     */Ticker.prototype.start=function(){if(!this.started){this.started=true;this._requestIfNeeded();}};/**\n     * Stops the ticker. If the ticker has requested\n     * an animation frame it is canceled at this point.\n     */Ticker.prototype.stop=function(){if(this.started){this.started=false;this._cancelIfNeeded();}};/**\n     * Destroy the ticker and don't use after this. Calling\n     * this method removes all references to internal events.\n     */Ticker.prototype.destroy=function(){if(!this._protected){this.stop();var listener=this._head.next;while(listener){listener=listener.destroy(true);}this._head.destroy();this._head=null;}};/**\n     * Triggers an update. An update entails setting the\n     * current {@link PIXI.Ticker#elapsedMS},\n     * the current {@link PIXI.Ticker#deltaTime},\n     * invoking all listeners with current deltaTime,\n     * and then finally setting {@link PIXI.Ticker#lastTime}\n     * with the value of currentTime that was provided.\n     * This method will be called automatically by animation\n     * frame callbacks if the ticker instance has been started\n     * and listeners are added.\n     *\n     * @param {number} [currentTime=performance.now()] - the current time of execution\n     */Ticker.prototype.update=function(currentTime){if(currentTime===void 0){currentTime=performance.now();}var elapsedMS;// If the difference in time is zero or negative, we ignore most of the work done here.\n// If there is no valid difference, then should be no reason to let anyone know about it.\n// A zero delta, is exactly that, nothing should update.\n//\n// The difference in time can be negative, and no this does not mean time traveling.\n// This can be the result of a race condition between when an animation frame is requested\n// on the current JavaScript engine event loop, and when the ticker's start method is invoked\n// (which invokes the internal _requestIfNeeded method). If a frame is requested before\n// _requestIfNeeded is invoked, then the callback for the animation frame the ticker requests,\n// can receive a time argument that can be less than the lastTime value that was set within\n// _requestIfNeeded. This difference is in microseconds, but this is enough to cause problems.\n//\n// This check covers this browser engine timing issue, as well as if consumers pass an invalid\n// currentTime value. This may happen if consumers opt-out of the autoStart, and update themselves.\nif(currentTime>this.lastTime){// Save uncapped elapsedMS for measurement\nelapsedMS=this.elapsedMS=currentTime-this.lastTime;// cap the milliseconds elapsed used for deltaTime\nif(elapsedMS>this._maxElapsedMS){elapsedMS=this._maxElapsedMS;}elapsedMS*=this.speed;// If not enough time has passed, exit the function.\n// Get ready for next frame by setting _lastFrame, but based on _minElapsedMS\n// adjustment to ensure a relatively stable interval.\nif(this._minElapsedMS){var delta=currentTime-this._lastFrame|0;if(delta<this._minElapsedMS){return;}this._lastFrame=currentTime-delta%this._minElapsedMS;}this.deltaMS=elapsedMS;this.deltaTime=this.deltaMS*settings.TARGET_FPMS;// Cache a local reference, in-case ticker is destroyed\n// during the emit, we can still check for head.next\nvar head=this._head;// Invoke listeners added to internal emitter\nvar listener=head.next;while(listener){listener=listener.emit(this.deltaTime);}if(!head.next){this._cancelIfNeeded();}}else{this.deltaTime=this.deltaMS=this.elapsedMS=0;}this.lastTime=currentTime;};Object.defineProperty(Ticker.prototype,\"FPS\",{/**\n         * The frames per second at which this ticker is running.\n         * The default is approximately 60 in most modern browsers.\n         * **Note:** This does not factor in the value of\n         * {@link PIXI.Ticker#speed}, which is specific\n         * to scaling {@link PIXI.Ticker#deltaTime}.\n         *\n         * @member {number}\n         * @readonly\n         */get:function get(){return 1000/this.elapsedMS;},enumerable:false,configurable:true});Object.defineProperty(Ticker.prototype,\"minFPS\",{/**\n         * Manages the maximum amount of milliseconds allowed to\n         * elapse between invoking {@link PIXI.Ticker#update}.\n         * This value is used to cap {@link PIXI.Ticker#deltaTime},\n         * but does not effect the measured value of {@link PIXI.Ticker#FPS}.\n         * When setting this property it is clamped to a value between\n         * `0` and `PIXI.settings.TARGET_FPMS * 1000`.\n         *\n         * @member {number}\n         * @default 10\n         */get:function get(){return 1000/this._maxElapsedMS;},set:function set(fps){// Minimum must be below the maxFPS\nvar minFPS=Math.min(this.maxFPS,fps);// Must be at least 0, but below 1 / settings.TARGET_FPMS\nvar minFPMS=Math.min(Math.max(0,minFPS)/1000,settings.TARGET_FPMS);this._maxElapsedMS=1/minFPMS;},enumerable:false,configurable:true});Object.defineProperty(Ticker.prototype,\"maxFPS\",{/**\n         * Manages the minimum amount of milliseconds required to\n         * elapse between invoking {@link PIXI.Ticker#update}.\n         * This will effect the measured value of {@link PIXI.Ticker#FPS}.\n         * If it is set to `0`, then there is no limit; PixiJS will render as many frames as it can.\n         * Otherwise it will be at least `minFPS`\n         *\n         * @member {number}\n         * @default 0\n         */get:function get(){if(this._minElapsedMS){return Math.round(1000/this._minElapsedMS);}return 0;},set:function set(fps){if(fps===0){this._minElapsedMS=0;}else{// Max must be at least the minFPS\nvar maxFPS=Math.max(this.minFPS,fps);this._minElapsedMS=1/(maxFPS/1000);}},enumerable:false,configurable:true});Object.defineProperty(Ticker,\"shared\",{/**\n         * The shared ticker instance used by {@link PIXI.AnimatedSprite} and by\n         * {@link PIXI.VideoResource} to update animation frames / video textures.\n         *\n         * It may also be used by {@link PIXI.Application} if created with the `sharedTicker` option property set to true.\n         *\n         * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n         * Please follow the examples for usage, including how to opt-out of auto-starting the shared ticker.\n         *\n         * @example\n         * let ticker = PIXI.Ticker.shared;\n         * // Set this to prevent starting this ticker when listeners are added.\n         * // By default this is true only for the PIXI.Ticker.shared instance.\n         * ticker.autoStart = false;\n         * // FYI, call this to ensure the ticker is stopped. It should be stopped\n         * // if you have not attempted to render anything yet.\n         * ticker.stop();\n         * // Call this when you are ready for a running shared ticker.\n         * ticker.start();\n         *\n         * @example\n         * // You may use the shared ticker to render...\n         * let renderer = PIXI.autoDetectRenderer();\n         * let stage = new PIXI.Container();\n         * document.body.appendChild(renderer.view);\n         * ticker.add(function (time) {\n         *     renderer.render(stage);\n         * });\n         *\n         * @example\n         * // Or you can just update it manually.\n         * ticker.autoStart = false;\n         * ticker.stop();\n         * function animate(time) {\n         *     ticker.update(time);\n         *     renderer.render(stage);\n         *     requestAnimationFrame(animate);\n         * }\n         * animate(performance.now());\n         *\n         * @member {PIXI.Ticker}\n         * @static\n         */get:function get(){if(!Ticker._shared){var shared=Ticker._shared=new Ticker();shared.autoStart=true;shared._protected=true;}return Ticker._shared;},enumerable:false,configurable:true});Object.defineProperty(Ticker,\"system\",{/**\n         * The system ticker instance used by {@link PIXI.InteractionManager} and by\n         * {@link PIXI.BasePrepare} for core timing functionality that shouldn't usually need to be paused,\n         * unlike the `shared` ticker which drives visual animations and rendering which may want to be paused.\n         *\n         * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n         *\n         * @member {PIXI.Ticker}\n         * @static\n         */get:function get(){if(!Ticker._system){var system=Ticker._system=new Ticker();system.autoStart=true;system._protected=true;}return Ticker._system;},enumerable:false,configurable:true});return Ticker;}();/**\n * Middleware for for Application Ticker.\n *\n * @example\n * import {TickerPlugin} from '@pixi/ticker';\n * import {Application} from '@pixi/app';\n * Application.registerPlugin(TickerPlugin);\n *\n * @class\n * @memberof PIXI\n */var TickerPlugin=/** @class */function(){function TickerPlugin(){}/**\n     * Initialize the plugin with scope of application instance\n     *\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */TickerPlugin.init=function(options){var _this=this;// Set default\noptions=Object.assign({autoStart:true,sharedTicker:false},options);// Create ticker setter\nObject.defineProperty(this,'ticker',{set:function set(ticker){if(this._ticker){this._ticker.remove(this.render,this);}this._ticker=ticker;if(ticker){ticker.add(this.render,this,UPDATE_PRIORITY.LOW);}},get:function get(){return this._ticker;}});/**\n         * Convenience method for stopping the render.\n         *\n         * @method\n         * @memberof PIXI.Application\n         * @instance\n         */this.stop=function(){_this._ticker.stop();};/**\n         * Convenience method for starting the render.\n         *\n         * @method\n         * @memberof PIXI.Application\n         * @instance\n         */this.start=function(){_this._ticker.start();};/**\n         * Internal reference to the ticker.\n         *\n         * @type {PIXI.Ticker}\n         * @name _ticker\n         * @memberof PIXI.Application#\n         * @private\n         */this._ticker=null;/**\n         * Ticker for doing render updates.\n         *\n         * @type {PIXI.Ticker}\n         * @name ticker\n         * @memberof PIXI.Application#\n         * @default PIXI.Ticker.shared\n         */this.ticker=options.sharedTicker?Ticker.shared:new Ticker();// Start the rendering\nif(options.autoStart){this.start();}};/**\n     * Clean up the ticker, scoped to application.\n     *\n     * @static\n     * @private\n     */TickerPlugin.destroy=function(){if(this._ticker){var oldTicker=this._ticker;this.ticker=null;oldTicker.destroy();}};return TickerPlugin;}();export{Ticker,TickerPlugin,UPDATE_PRIORITY};","map":null,"metadata":{},"sourceType":"module"}