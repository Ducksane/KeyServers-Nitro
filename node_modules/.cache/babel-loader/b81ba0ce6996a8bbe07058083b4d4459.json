{"ast":null,"code":"import _objectSpread from\"C:/Users/Luis/Downloads/Habboom/Nitro-Edit/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _objectWithoutProperties from\"C:/Users/Luis/Downloads/Habboom/Nitro-Edit/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";var _excluded=[\"bsPrefix\",\"expand\",\"variant\",\"bg\",\"fixed\",\"sticky\",\"className\",\"as\",\"expanded\",\"onToggle\",\"onSelect\",\"collapseOnSelect\"];import classNames from'classnames';import*as React from'react';import{useCallback,useMemo}from'react';import SelectableContext from'@restart/ui/SelectableContext';import{useUncontrolled}from'uncontrollable';import createWithBsPrefix from'./createWithBsPrefix';import NavbarBrand from'./NavbarBrand';import NavbarCollapse from'./NavbarCollapse';import NavbarToggle from'./NavbarToggle';import NavbarOffcanvas from'./NavbarOffcanvas';import{useBootstrapPrefix}from'./ThemeProvider';import NavbarContext from'./NavbarContext';import{jsx as _jsx}from\"react/jsx-runtime\";var NavbarText=createWithBsPrefix('navbar-text',{Component:'span'});var defaultProps={expand:true,variant:'light',collapseOnSelect:false};var Navbar=/*#__PURE__*/React.forwardRef(function(props,ref){var _useUncontrolled=useUncontrolled(props,{expanded:'onToggle'}),initialBsPrefix=_useUncontrolled.bsPrefix,expand=_useUncontrolled.expand,variant=_useUncontrolled.variant,bg=_useUncontrolled.bg,fixed=_useUncontrolled.fixed,sticky=_useUncontrolled.sticky,className=_useUncontrolled.className,_useUncontrolled$as=_useUncontrolled.as,Component=_useUncontrolled$as===void 0?'nav':_useUncontrolled$as,expanded=_useUncontrolled.expanded,_onToggle=_useUncontrolled.onToggle,onSelect=_useUncontrolled.onSelect,collapseOnSelect=_useUncontrolled.collapseOnSelect,controlledProps=_objectWithoutProperties(_useUncontrolled,_excluded);var bsPrefix=useBootstrapPrefix(initialBsPrefix,'navbar');var handleCollapse=useCallback(function(){onSelect==null?void 0:onSelect.apply(void 0,arguments);if(collapseOnSelect&&expanded){_onToggle==null?void 0:_onToggle(false);}},[onSelect,collapseOnSelect,expanded,_onToggle]);// will result in some false positives but that seems better\n// than false negatives. strict `undefined` check allows explicit\n// \"nulling\" of the role if the user really doesn't want one\nif(controlledProps.role===undefined&&Component!=='nav'){controlledProps.role='navigation';}var expandClass=\"\".concat(bsPrefix,\"-expand\");if(typeof expand==='string')expandClass=\"\".concat(expandClass,\"-\").concat(expand);var navbarContext=useMemo(function(){return{onToggle:function onToggle(){return _onToggle==null?void 0:_onToggle(!expanded);},bsPrefix:bsPrefix,expanded:!!expanded,expand:expand};},[bsPrefix,expanded,expand,_onToggle]);return/*#__PURE__*/_jsx(NavbarContext.Provider,{value:navbarContext,children:/*#__PURE__*/_jsx(SelectableContext.Provider,{value:handleCollapse,children:/*#__PURE__*/_jsx(Component,_objectSpread(_objectSpread({ref:ref},controlledProps),{},{className:classNames(className,bsPrefix,expand&&expandClass,variant&&\"\".concat(bsPrefix,\"-\").concat(variant),bg&&\"bg-\".concat(bg),sticky&&\"sticky-\".concat(sticky),fixed&&\"fixed-\".concat(fixed))}))})});});Navbar.defaultProps=defaultProps;Navbar.displayName='Navbar';export default Object.assign(Navbar,{Brand:NavbarBrand,Collapse:NavbarCollapse,Offcanvas:NavbarOffcanvas,Text:NavbarText,Toggle:NavbarToggle});","map":null,"metadata":{},"sourceType":"module"}