{"ast":null,"code":"/*!\n * @pixi/app - v6.3.0\n * Compiled Wed, 23 Mar 2022 18:58:56 UTC\n *\n * @pixi/app is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */import{Container}from'@pixi/display';import{autoDetectRenderer}from'@pixi/core';/**\n * Convenience class to create a new PIXI application.\n *\n * This class automatically creates the renderer, ticker and root container.\n *\n * @example\n * // Create the application\n * const app = new PIXI.Application();\n *\n * // Add the view to the DOM\n * document.body.appendChild(app.view);\n *\n * // ex, add display objects\n * app.stage.addChild(PIXI.Sprite.from('something.png'));\n *\n * @class\n * @memberof PIXI\n */var Application=/** @class */function(){/**\n     * @param {object} [options] - The optional renderer parameters.\n     * @param {boolean} [options.autoStart=true] - Automatically starts the rendering after the construction.\n     *     **Note**: Setting this parameter to false does NOT stop the shared ticker even if you set\n     *     options.sharedTicker to true in case that it is already started. Stop it by your own.\n     * @param {number} [options.width=800] - The width of the renderers view.\n     * @param {number} [options.height=600] - The height of the renderers view.\n     * @param {HTMLCanvasElement} [options.view] - The canvas to use as a view, optional.\n     * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.\n     *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the\n     *   canvas needs to be opaque, possibly for performance reasons on some older devices.\n     * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n     *   resolutions other than 1.\n     * @param {boolean} [options.antialias=false] - Sets antialias\n     * @param {boolean} [options.preserveDrawingBuffer=false] - Enables drawing buffer preservation, enable this if you\n     *  need to call toDataUrl on the WebGL context.\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.\n     * @param {boolean} [options.forceCanvas=false] - prevents selection of WebGL renderer, even if such is present, this\n     *   option only is available when using **pixi.js-legacy** or **@pixi/canvas-renderer** modules, otherwise\n     *   it is ignored.\n     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n     *  (shown if not transparent).\n     * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n     *   not before the new render pass.\n     * @param {string} [options.powerPreference] - Parameter passed to webgl context, set to \"high-performance\"\n     *  for devices with dual graphics card. **(WebGL only)**.\n     * @param {boolean} [options.sharedTicker=false] - `true` to use PIXI.Ticker.shared, `false` to create new ticker.\n     *  If set to false, you cannot register a handler to occur before anything that runs on the shared ticker.\n     *  The system ticker will always run before both the shared ticker and the app ticker.\n     * @param {boolean} [options.sharedLoader=false] - `true` to use PIXI.Loader.shared, `false` to create new Loader.\n     * @param {Window|HTMLElement} [options.resizeTo] - Element to automatically resize stage to.\n     */function Application(options){var _this=this;/**\n         * The root display container that's rendered.\n         * @member {PIXI.Container}\n         */this.stage=new Container();// The default options\noptions=Object.assign({forceCanvas:false},options);this.renderer=autoDetectRenderer(options);// install plugins here\nApplication._plugins.forEach(function(plugin){plugin.init.call(_this,options);});}/**\n     * Register a middleware plugin for the application\n     * @static\n     * @param {PIXI.IApplicationPlugin} plugin - Plugin being installed\n     */Application.registerPlugin=function(plugin){Application._plugins.push(plugin);};/**\n     * Render the current stage.\n     */Application.prototype.render=function(){this.renderer.render(this.stage);};Object.defineProperty(Application.prototype,\"view\",{/**\n         * Reference to the renderer's canvas element.\n         * @member {HTMLCanvasElement}\n         * @readonly\n         */get:function get(){return this.renderer.view;},enumerable:false,configurable:true});Object.defineProperty(Application.prototype,\"screen\",{/**\n         * Reference to the renderer's screen rectangle. Its safe to use as `filterArea` or `hitArea` for the whole screen.\n         * @member {PIXI.Rectangle}\n         * @readonly\n         */get:function get(){return this.renderer.screen;},enumerable:false,configurable:true});/**\n     * Destroy and don't use after this.\n     * @param {Boolean} [removeView=false] - Automatically remove canvas from DOM.\n     * @param {object|boolean} [stageOptions] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [stageOptions.children=false] - if set to true, all the children will have their destroy\n     *  method called as well. 'stageOptions' will be passed on to those calls.\n     * @param {boolean} [stageOptions.texture=false] - Only used for child Sprites if stageOptions.children is set\n     *  to true. Should it destroy the texture of the child sprite\n     * @param {boolean} [stageOptions.baseTexture=false] - Only used for child Sprites if stageOptions.children is set\n     *  to true. Should it destroy the base texture of the child sprite\n     */Application.prototype.destroy=function(removeView,stageOptions){var _this=this;// Destroy plugins in the opposite order\n// which they were constructed\nvar plugins=Application._plugins.slice(0);plugins.reverse();plugins.forEach(function(plugin){plugin.destroy.call(_this);});this.stage.destroy(stageOptions);this.stage=null;this.renderer.destroy(removeView);this.renderer=null;};/** Collection of installed plugins. */Application._plugins=[];return Application;}();/**\n * Middleware for for Application's resize functionality\n * @private\n * @class\n */var ResizePlugin=/** @class */function(){function ResizePlugin(){}/**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */ResizePlugin.init=function(options){var _this=this;Object.defineProperty(this,'resizeTo',/**\n         * The HTML element or window to automatically resize the\n         * renderer's view element to match width and height.\n         * @member {Window|HTMLElement}\n         * @name resizeTo\n         * @memberof PIXI.Application#\n         */{set:function set(dom){globalThis.removeEventListener('resize',this.queueResize);this._resizeTo=dom;if(dom){globalThis.addEventListener('resize',this.queueResize);this.resize();}},get:function get(){return this._resizeTo;}});/**\n         * Resize is throttled, so it's safe to call this multiple times per frame and it'll\n         * only be called once.\n         *\n         * @memberof PIXI.Application#\n         * @method queueResize\n         * @private\n         */this.queueResize=function(){if(!_this._resizeTo){return;}_this.cancelResize();// // Throttle resize events per raf\n_this._resizeId=requestAnimationFrame(function(){return _this.resize();});};/**\n         * Cancel the resize queue.\n         *\n         * @memberof PIXI.Application#\n         * @method cancelResize\n         * @private\n         */this.cancelResize=function(){if(_this._resizeId){cancelAnimationFrame(_this._resizeId);_this._resizeId=null;}};/**\n         * Execute an immediate resize on the renderer, this is not\n         * throttled and can be expensive to call many times in a row.\n         * Will resize only if `resizeTo` property is set.\n         *\n         * @memberof PIXI.Application#\n         * @method resize\n         */this.resize=function(){if(!_this._resizeTo){return;}// clear queue resize\n_this.cancelResize();var width;var height;// Resize to the window\nif(_this._resizeTo===globalThis.window){width=globalThis.innerWidth;height=globalThis.innerHeight;}// Resize to other HTML entities\nelse{var _a=_this._resizeTo,clientWidth=_a.clientWidth,clientHeight=_a.clientHeight;width=clientWidth;height=clientHeight;}_this.renderer.resize(width,height);};// On resize\nthis._resizeId=null;this._resizeTo=null;this.resizeTo=options.resizeTo||null;};/**\n     * Clean up the ticker, scoped to application\n     *\n     * @static\n     * @private\n     */ResizePlugin.destroy=function(){globalThis.removeEventListener('resize',this.queueResize);this.cancelResize();this.cancelResize=null;this.queueResize=null;this.resizeTo=null;this.resize=null;};return ResizePlugin;}();Application.registerPlugin(ResizePlugin);export{Application};","map":null,"metadata":{},"sourceType":"module"}