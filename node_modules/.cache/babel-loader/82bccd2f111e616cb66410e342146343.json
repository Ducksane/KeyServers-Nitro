{"ast":null,"code":"import contains from'dom-helpers/contains';import listen from'dom-helpers/listen';import ownerDocument from'dom-helpers/ownerDocument';import{useCallback,useEffect,useRef}from'react';import useEventCallback from'@restart/hooks/useEventCallback';import warning from'warning';var noop=function noop(){};function isLeftClickEvent(event){return event.button===0;}function isModifiedEvent(event){return!!(event.metaKey||event.altKey||event.ctrlKey||event.shiftKey);}export var getRefTarget=function getRefTarget(ref){return ref&&('current'in ref?ref.current:ref);};var InitialTriggerEvents={click:'mousedown',mouseup:'mousedown',pointerup:'pointerdown'};/**\n * The `useClickOutside` hook registers your callback on the document that fires\n * when a pointer event is registered outside of the provided ref or element.\n *\n * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary\n * @param {function} onClickOutside\n * @param {object=}  options\n * @param {boolean=} options.disabled\n * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on\n */function useClickOutside(ref){var onClickOutside=arguments.length>1&&arguments[1]!==undefined?arguments[1]:noop;var _ref=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{},disabled=_ref.disabled,_ref$clickTrigger=_ref.clickTrigger,clickTrigger=_ref$clickTrigger===void 0?'click':_ref$clickTrigger;var preventMouseClickOutsideRef=useRef(false);var waitingForTrigger=useRef(false);var handleMouseCapture=useCallback(function(e){var currentTarget=getRefTarget(ref);warning(!!currentTarget,'ClickOutside captured a close event but does not have a ref to compare it to. '+'useClickOutside(), should be passed a ref that resolves to a DOM node');preventMouseClickOutsideRef.current=!currentTarget||isModifiedEvent(e)||!isLeftClickEvent(e)||!!contains(currentTarget,e.target)||waitingForTrigger.current;waitingForTrigger.current=false;},[ref]);var handleInitialMouse=useEventCallback(function(e){var currentTarget=getRefTarget(ref);if(currentTarget&&contains(currentTarget,e.target)){waitingForTrigger.current=true;}});var handleMouse=useEventCallback(function(e){if(!preventMouseClickOutsideRef.current){onClickOutside(e);}});useEffect(function(){if(disabled||ref==null)return undefined;var doc=ownerDocument(getRefTarget(ref));// Store the current event to avoid triggering handlers immediately\n// https://github.com/facebook/react/issues/20074\nvar currentEvent=(doc.defaultView||window).event;var removeInitialTriggerListener=null;if(InitialTriggerEvents[clickTrigger]){removeInitialTriggerListener=listen(doc,InitialTriggerEvents[clickTrigger],handleInitialMouse,true);}// Use capture for this listener so it fires before React's listener, to\n// avoid false positives in the contains() check below if the target DOM\n// element is removed in the React mouse callback.\nvar removeMouseCaptureListener=listen(doc,clickTrigger,handleMouseCapture,true);var removeMouseListener=listen(doc,clickTrigger,function(e){// skip if this event is the same as the one running when we added the handlers\nif(e===currentEvent){currentEvent=undefined;return;}handleMouse(e);});var mobileSafariHackListeners=[];if('ontouchstart'in doc.documentElement){mobileSafariHackListeners=[].slice.call(doc.body.children).map(function(el){return listen(el,'mousemove',noop);});}return function(){removeInitialTriggerListener==null?void 0:removeInitialTriggerListener();removeMouseCaptureListener();removeMouseListener();mobileSafariHackListeners.forEach(function(remove){return remove();});};},[ref,disabled,clickTrigger,handleMouseCapture,handleInitialMouse,handleMouse]);}export default useClickOutside;","map":null,"metadata":{},"sourceType":"module"}