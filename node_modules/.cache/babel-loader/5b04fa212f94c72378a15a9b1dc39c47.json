{"ast":null,"code":"import listen from'dom-helpers/listen';import ownerDocument from'dom-helpers/ownerDocument';import{useEffect}from'react';import useEventCallback from'@restart/hooks/useEventCallback';import useClickOutside,{getRefTarget}from'./useClickOutside';var escapeKeyCode=27;var noop=function noop(){};/**\n * The `useRootClose` hook registers your callback on the document\n * when rendered. Powers the `<Overlay/>` component. This is used achieve modal\n * style behavior where your callback is triggered when the user tries to\n * interact with the rest of the document or hits the `esc` key.\n *\n * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary\n * @param {function} onRootClose\n * @param {object=}  options\n * @param {boolean=} options.disabled\n * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on\n */function useRootClose(ref,onRootClose){var _ref=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{},disabled=_ref.disabled,clickTrigger=_ref.clickTrigger;var onClose=onRootClose||noop;useClickOutside(ref,onClose,{disabled:disabled,clickTrigger:clickTrigger});var handleKeyUp=useEventCallback(function(e){if(e.keyCode===escapeKeyCode){onClose(e);}});useEffect(function(){if(disabled||ref==null)return undefined;var doc=ownerDocument(getRefTarget(ref));// Store the current event to avoid triggering handlers immediately\n// https://github.com/facebook/react/issues/20074\nvar currentEvent=(doc.defaultView||window).event;var removeKeyupListener=listen(doc,'keyup',function(e){// skip if this event is the same as the one running when we added the handlers\nif(e===currentEvent){currentEvent=undefined;return;}handleKeyUp(e);});return function(){removeKeyupListener();};},[ref,disabled,handleKeyUp]);}export default useRootClose;","map":null,"metadata":{},"sourceType":"module"}