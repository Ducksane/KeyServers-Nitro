{"ast":null,"code":"import _slicedToArray from\"/home/muphy/Documents/habboom/Nitro-Edit-main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useContext,useCallback}from'react';import*as React from'react';import{useSSRSafeId}from'./ssr';import DropdownContext from'./DropdownContext';import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";export var isRoleMenu=function isRoleMenu(el){var _el$getAttribute;return((_el$getAttribute=el.getAttribute('role'))==null?void 0:_el$getAttribute.toLowerCase())==='menu';};var noop=function noop(){};/**\n * Wires up Dropdown toggle functionality, returning a set a props to attach\n * to the element that functions as the dropdown toggle (generally a button).\n *\n * @memberOf Dropdown\n */export function useDropdownToggle(){var id=useSSRSafeId();var _ref=useContext(DropdownContext)||{},_ref$show=_ref.show,show=_ref$show===void 0?false:_ref$show,_ref$toggle=_ref.toggle,toggle=_ref$toggle===void 0?noop:_ref$toggle,setToggle=_ref.setToggle,menuElement=_ref.menuElement;var handleClick=useCallback(function(e){toggle(!show,e);},[show,toggle]);var props={id:id,ref:setToggle||noop,onClick:handleClick,'aria-expanded':!!show};// This is maybe better down in an effect, but\n// the component is going to update anyway when the menu element\n// is set so might return new props.\nif(menuElement&&isRoleMenu(menuElement)){props['aria-haspopup']=true;}return[props,{show:show,toggle:toggle}];}/**\n * Also exported as `<Dropdown.Toggle>` from `Dropdown`.\n *\n * @displayName DropdownToggle\n * @memberOf Dropdown\n */function DropdownToggle(_ref2){var children=_ref2.children;var _useDropdownToggle=useDropdownToggle(),_useDropdownToggle2=_slicedToArray(_useDropdownToggle,2),props=_useDropdownToggle2[0],meta=_useDropdownToggle2[1];return/*#__PURE__*/_jsx(_Fragment,{children:children(props,meta)});}DropdownToggle.displayName='DropdownToggle';/** @component */export default DropdownToggle;","map":null,"metadata":{},"sourceType":"module"}