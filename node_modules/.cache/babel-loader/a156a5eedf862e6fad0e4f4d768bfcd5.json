{"ast":null,"code":"'use strict';Object.defineProperty(exports,\"__esModule\",{value:true});var _typeof=typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};var _sister=require('sister');var _sister2=_interopRequireDefault(_sister);var _loadYouTubeIframeApi=require('./loadYouTubeIframeApi');var _loadYouTubeIframeApi2=_interopRequireDefault(_loadYouTubeIframeApi);var _YouTubePlayer=require('./YouTubePlayer');var _YouTubePlayer2=_interopRequireDefault(_YouTubePlayer);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}/**\n * @typedef YT.Player\n * @see https://developers.google.com/youtube/iframe_api_reference\n * */ /**\n * @see https://developers.google.com/youtube/iframe_api_reference#Loading_a_Video_Player\n */var youtubeIframeAPI=void 0;/**\n * A factory function used to produce an instance of YT.Player and queue function calls and proxy events of the resulting object.\n *\n * @param maybeElementId Either An existing YT.Player instance,\n * the DOM element or the id of the HTML element where the API will insert an <iframe>.\n * @param options See `options` (Ignored when using an existing YT.Player instance).\n * @param strictState A flag designating whether or not to wait for\n * an acceptable state when calling supported functions. Default: `false`.\n * See `FunctionStateMap.js` for supported functions and acceptable states.\n */exports.default=function(maybeElementId){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var strictState=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var emitter=(0,_sister2.default)();if(!youtubeIframeAPI){youtubeIframeAPI=(0,_loadYouTubeIframeApi2.default)(emitter);}if(options.events){throw new Error('Event handlers cannot be overwritten.');}if(typeof maybeElementId==='string'&&!document.getElementById(maybeElementId)){throw new Error('Element \"'+maybeElementId+'\" does not exist.');}options.events=_YouTubePlayer2.default.proxyEvents(emitter);var playerAPIReady=new Promise(function(resolve){if((typeof maybeElementId==='undefined'?'undefined':_typeof(maybeElementId))==='object'&&maybeElementId.playVideo instanceof Function){var player=maybeElementId;resolve(player);}else{// asume maybeElementId can be rendered inside\n// eslint-disable-next-line promise/catch-or-return\nyoutubeIframeAPI.then(function(YT){// eslint-disable-line promise/prefer-await-to-then\nvar player=new YT.Player(maybeElementId,options);emitter.on('ready',function(){resolve(player);});return null;});}});var playerApi=_YouTubePlayer2.default.promisifyPlayer(playerAPIReady,strictState);playerApi.on=emitter.on;playerApi.off=emitter.off;return playerApi;};module.exports=exports['default'];","map":null,"metadata":{},"sourceType":"module"}