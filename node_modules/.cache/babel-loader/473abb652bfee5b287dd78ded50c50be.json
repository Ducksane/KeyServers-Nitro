{"ast":null,"code":"import _objectSpread from\"C:/Users/Luis/Downloads/Habboom/Nitro-Edit/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _objectWithoutProperties from\"C:/Users/Luis/Downloads/Habboom/Nitro-Edit/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";var _excluded=[\"id\",\"bsPrefix\",\"size\",\"variant\",\"title\",\"type\",\"toggleLabel\",\"children\",\"onClick\",\"href\",\"target\",\"menuRole\",\"renderMenuOnMount\",\"rootCloseEvent\"];import*as React from'react';import PropTypes from'prop-types';import Button from'./Button';import ButtonGroup from'./ButtonGroup';import Dropdown from'./Dropdown';import{alignPropType}from'./types';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var propTypes={/**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string}\n   * @required\n   */id:PropTypes.string,/**\n   * Accessible label for the toggle; the value of `title` if not specified.\n   */toggleLabel:PropTypes.string,/** An `href` passed to the non-toggle Button */href:PropTypes.string,/** An anchor `target` passed to the non-toggle Button */target:PropTypes.string,/** An `onClick` handler passed to the non-toggle Button */onClick:PropTypes.func,/** The content of the non-toggle Button.  */title:PropTypes.node.isRequired,/** A `type` passed to the non-toggle Button */type:PropTypes.string,/** Disables both Buttons  */disabled:PropTypes.bool,/**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */align:alignPropType,/** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */menuRole:PropTypes.string,/** Whether to render the dropdown menu in the DOM before the first time it is shown */renderMenuOnMount:PropTypes.bool,/**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */rootCloseEvent:PropTypes.string,/** @ignore */bsPrefix:PropTypes.string,/** @ignore */variant:PropTypes.string,/** @ignore */size:PropTypes.string};var defaultProps={toggleLabel:'Toggle dropdown',type:'button'};/**\n * A convenience component for simple or general use split button dropdowns. Renders a\n * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s\n * props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._\n * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\n * and menu-related props are passed to the `Dropdown.Menu`\n */var SplitButton=/*#__PURE__*/React.forwardRef(function(_ref,ref){var id=_ref.id,bsPrefix=_ref.bsPrefix,size=_ref.size,variant=_ref.variant,title=_ref.title,type=_ref.type,toggleLabel=_ref.toggleLabel,children=_ref.children,onClick=_ref.onClick,href=_ref.href,target=_ref.target,menuRole=_ref.menuRole,renderMenuOnMount=_ref.renderMenuOnMount,rootCloseEvent=_ref.rootCloseEvent,props=_objectWithoutProperties(_ref,_excluded);return/*#__PURE__*/_jsxs(Dropdown,_objectSpread(_objectSpread({ref:ref},props),{},{as:ButtonGroup,children:[/*#__PURE__*/_jsx(Button,{size:size,variant:variant,disabled:props.disabled,bsPrefix:bsPrefix,href:href,target:target,onClick:onClick,type:type,children:title}),/*#__PURE__*/_jsx(Dropdown.Toggle,{split:true,id:id,size:size,variant:variant,disabled:props.disabled,childBsPrefix:bsPrefix,children:/*#__PURE__*/_jsx(\"span\",{className:\"visually-hidden\",children:toggleLabel})}),/*#__PURE__*/_jsx(Dropdown.Menu,{role:menuRole,renderOnMount:renderMenuOnMount,rootCloseEvent:rootCloseEvent,children:children})]}));});SplitButton.propTypes=propTypes;SplitButton.defaultProps=defaultProps;SplitButton.displayName='SplitButton';export default SplitButton;","map":null,"metadata":{},"sourceType":"module"}