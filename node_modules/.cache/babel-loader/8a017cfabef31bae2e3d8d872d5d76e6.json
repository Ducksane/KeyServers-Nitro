{"ast":null,"code":"import*as React from'react';/**\n * Iterates through children that are typically specified as `props.children`,\n * but only maps over children that are \"valid elements\".\n *\n * The mapFunction provided index will be normalised to the components mapped,\n * so an invalid component would not increase the index.\n *\n */function map(children,func){var index=0;return React.Children.map(children,function(child){return/*#__PURE__*/ /*#__PURE__*/React.isValidElement(child)?func(child,index++):child;});}/**\n * Iterates through children that are \"valid elements\".\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child with the index reflecting the position relative to \"valid components\".\n */function forEach(children,func){var index=0;React.Children.forEach(children,function(child){if(/*#__PURE__*/React.isValidElement(child))func(child,index++);});}/**\n * Finds whether a component's `children` prop includes a React element of the\n * specified type.\n */function hasChildOfType(children,type){return React.Children.toArray(children).some(function(child){return/*#__PURE__*/ /*#__PURE__*/React.isValidElement(child)&&child.type===type;});}export{map,forEach,hasChildOfType};","map":null,"metadata":{},"sourceType":"module"}