{"ast":null,"code":"import{Children,cloneElement,isValidElement}from'react';/**\n * Given `this.props.children`, return an object mapping key to child.\n *\n * @param {*} children `this.props.children`\n * @return {object} Mapping of key to child\n */export function getChildMapping(children,mapFn){var mapper=function mapper(child){return mapFn&&/*#__PURE__*/isValidElement(child)?mapFn(child):child;};var result=Object.create(null);if(children)Children.map(children,function(c){return c;}).forEach(function(child){// run the map function here instead so that the key is the computed one\nresult[child.key]=mapper(child);});return result;}/**\n * When you're adding or removing children some may be added or removed in the\n * same render pass. We want to show *both* since we want to simultaneously\n * animate elements in and out. This function takes a previous set of keys\n * and a new set of keys and merges them with its best guess of the correct\n * ordering. In the future we may expose some of the utilities in\n * ReactMultiChild to make this easy, but for now React itself does not\n * directly have this concept of the union of prevChildren and nextChildren\n * so we implement it here.\n *\n * @param {object} prev prev children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @param {object} next next children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @return {object} a key set that contains all keys in `prev` and all keys\n * in `next` in a reasonable order.\n */export function mergeChildMappings(prev,next){prev=prev||{};next=next||{};function getValueForKey(key){return key in next?next[key]:prev[key];}// For each key of `next`, the list of keys to insert before that key in\n// the combined list\nvar nextKeysPending=Object.create(null);var pendingKeys=[];for(var prevKey in prev){if(prevKey in next){if(pendingKeys.length){nextKeysPending[prevKey]=pendingKeys;pendingKeys=[];}}else{pendingKeys.push(prevKey);}}var i;var childMapping={};for(var nextKey in next){if(nextKeysPending[nextKey]){for(i=0;i<nextKeysPending[nextKey].length;i++){var pendingNextKey=nextKeysPending[nextKey][i];childMapping[nextKeysPending[nextKey][i]]=getValueForKey(pendingNextKey);}}childMapping[nextKey]=getValueForKey(nextKey);}// Finally, add the keys which didn't appear before any key in `next`\nfor(i=0;i<pendingKeys.length;i++){childMapping[pendingKeys[i]]=getValueForKey(pendingKeys[i]);}return childMapping;}function getProp(child,prop,props){return props[prop]!=null?props[prop]:child.props[prop];}export function getInitialChildMapping(props,onExited){return getChildMapping(props.children,function(child){return/*#__PURE__*/cloneElement(child,{onExited:onExited.bind(null,child),in:true,appear:getProp(child,'appear',props),enter:getProp(child,'enter',props),exit:getProp(child,'exit',props)});});}export function getNextChildMapping(nextProps,prevChildMapping,onExited){var nextChildMapping=getChildMapping(nextProps.children);var children=mergeChildMappings(prevChildMapping,nextChildMapping);Object.keys(children).forEach(function(key){var child=children[key];if(!/*#__PURE__*/isValidElement(child))return;var hasPrev=(key in prevChildMapping);var hasNext=(key in nextChildMapping);var prevChild=prevChildMapping[key];var isLeaving=/*#__PURE__*/isValidElement(prevChild)&&!prevChild.props.in;// item is new (entering)\nif(hasNext&&(!hasPrev||isLeaving)){// console.log('entering', key)\nchildren[key]=/*#__PURE__*/cloneElement(child,{onExited:onExited.bind(null,child),in:true,exit:getProp(child,'exit',nextProps),enter:getProp(child,'enter',nextProps)});}else if(!hasNext&&hasPrev&&!isLeaving){// item is old (exiting)\n// console.log('leaving', key)\nchildren[key]=/*#__PURE__*/cloneElement(child,{in:false});}else if(hasNext&&hasPrev&&/*#__PURE__*/isValidElement(prevChild)){// item hasn't changed transition states\n// copy over the last transition props;\n// console.log('unchanged', key)\nchildren[key]=/*#__PURE__*/cloneElement(child,{onExited:onExited.bind(null,child),in:prevChild.props.in,exit:getProp(child,'exit',nextProps),enter:getProp(child,'enter',nextProps)});}});return children;}","map":null,"metadata":{},"sourceType":"module"}