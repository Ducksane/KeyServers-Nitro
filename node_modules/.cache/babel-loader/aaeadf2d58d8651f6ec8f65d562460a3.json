{"ast":null,"code":"import _toConsumableArray from\"C:/Users/Administrator/Desktop/nitro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _defineProperty from\"C:/Users/Administrator/Desktop/nitro/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _classCallCheck from\"C:/Users/Administrator/Desktop/nitro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"C:/Users/Administrator/Desktop/nitro/node_modules/@babel/runtime/helpers/esm/createClass.js\";import css from'dom-helpers/css';import{dataAttr}from'./DataKey';import getBodyScrollbarWidth from'./getScrollbarWidth';export var OPEN_DATA_ATTRIBUTE=dataAttr('modal-open');/**\n * Manages a stack of Modals as well as ensuring\n * body scrolling is is disabled and padding accounted for\n */var ModalManager=/*#__PURE__*/function(){function ModalManager(){var _ref=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},ownerDocument=_ref.ownerDocument,_ref$handleContainerO=_ref.handleContainerOverflow,handleContainerOverflow=_ref$handleContainerO===void 0?true:_ref$handleContainerO,_ref$isRTL=_ref.isRTL,isRTL=_ref$isRTL===void 0?false:_ref$isRTL;_classCallCheck(this,ModalManager);this.handleContainerOverflow=handleContainerOverflow;this.isRTL=isRTL;this.modals=[];this.ownerDocument=ownerDocument;}_createClass(ModalManager,[{key:\"getScrollbarWidth\",value:function getScrollbarWidth(){return getBodyScrollbarWidth(this.ownerDocument);}},{key:\"getElement\",value:function getElement(){return(this.ownerDocument||document).body;}},{key:\"setModalAttributes\",value:function setModalAttributes(_modal){// For overriding\n}},{key:\"removeModalAttributes\",value:function removeModalAttributes(_modal){// For overriding\n}},{key:\"setContainerStyle\",value:function setContainerStyle(containerState){var style={overflow:'hidden'};// we are only interested in the actual `style` here\n// because we will override it\nvar paddingProp=this.isRTL?'paddingLeft':'paddingRight';var container=this.getElement();containerState.style=_defineProperty({overflow:container.style.overflow},paddingProp,container.style[paddingProp]);if(containerState.scrollBarWidth){// use computed style, here to get the real padding\n// to add our scrollbar width\nstyle[paddingProp]=\"\".concat(parseInt(css(container,paddingProp)||'0',10)+containerState.scrollBarWidth,\"px\");}container.setAttribute(OPEN_DATA_ATTRIBUTE,'');css(container,style);}},{key:\"reset\",value:function reset(){var _this=this;_toConsumableArray(this.modals).forEach(function(m){return _this.remove(m);});}},{key:\"removeContainerStyle\",value:function removeContainerStyle(containerState){var container=this.getElement();container.removeAttribute(OPEN_DATA_ATTRIBUTE);Object.assign(container.style,containerState.style);}},{key:\"add\",value:function add(modal){var modalIdx=this.modals.indexOf(modal);if(modalIdx!==-1){return modalIdx;}modalIdx=this.modals.length;this.modals.push(modal);this.setModalAttributes(modal);if(modalIdx!==0){return modalIdx;}this.state={scrollBarWidth:this.getScrollbarWidth(),style:{}};if(this.handleContainerOverflow){this.setContainerStyle(this.state);}return modalIdx;}},{key:\"remove\",value:function remove(modal){var modalIdx=this.modals.indexOf(modal);if(modalIdx===-1){return;}this.modals.splice(modalIdx,1);// if that was the last modal in a container,\n// clean up the container\nif(!this.modals.length&&this.handleContainerOverflow){this.removeContainerStyle(this.state);}this.removeModalAttributes(modal);}},{key:\"isTopModal\",value:function isTopModal(modal){return!!this.modals.length&&this.modals[this.modals.length-1]===modal;}}]);return ModalManager;}();export default ModalManager;","map":null,"metadata":{},"sourceType":"module"}