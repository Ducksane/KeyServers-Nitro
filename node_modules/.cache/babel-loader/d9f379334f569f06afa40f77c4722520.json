{"ast":null,"code":"/*!\n * @pixi/runner - v6.3.0\n * Compiled Wed, 23 Mar 2022 18:58:56 UTC\n *\n * @pixi/runner is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */ /**\n * A Runner is a highly performant and simple alternative to signals. Best used in situations\n * where events are dispatched to many objects at high frequency (say every frame!)\n *\n *\n * like a signal..\n * ```\n * import { Runner } from '@pixi/runner';\n *\n * const myObject = {\n *     loaded: new Runner('loaded')\n * }\n *\n * const listener = {\n *     loaded: function(){\n *         // thin\n *     }\n * }\n *\n * myObject.loaded.add(listener);\n *\n * myObject.loaded.emit();\n * ```\n *\n * Or for handling calling the same function on many items\n * ```\n * import { Runner } from '@pixi/runner';\n *\n * const myGame = {\n *     update: new Runner('update')\n * }\n *\n * const gameObject = {\n *     update: function(time){\n *         // update my gamey state\n *     }\n * }\n *\n * myGame.update.add(gameObject);\n *\n * myGame.update.emit(time);\n * ```\n *\n * @memberof PIXI\n */var Runner=/** @class */function(){/**\n     * @param name - The function name that will be executed on the listeners added to this Runner.\n     */function Runner(name){this.items=[];this._name=name;this._aliasCount=0;}/**\n     * Dispatch/Broadcast Runner to all listeners added to the queue.\n     *\n     * @param {...any} params - (optional) parameters to pass to each listener\n     */Runner.prototype.emit=function(a0,a1,a2,a3,a4,a5,a6,a7){if(arguments.length>8){throw new Error('max arguments reached');}var _a=this,name=_a.name,items=_a.items;this._aliasCount++;for(var i=0,len=items.length;i<len;i++){items[i][name](a0,a1,a2,a3,a4,a5,a6,a7);}if(items===this.items){this._aliasCount--;}return this;};Runner.prototype.ensureNonAliasedItems=function(){if(this._aliasCount>0&&this.items.length>1){this._aliasCount=0;this.items=this.items.slice(0);}};/**\n     * Add a listener to the Runner\n     *\n     * Runners do not need to have scope or functions passed to them.\n     * All that is required is to pass the listening object and ensure that it has contains a function that has the same name\n     * as the name provided to the Runner when it was created.\n     *\n     * Eg A listener passed to this Runner will require a 'complete' function.\n     *\n     * ```\n     * import { Runner } from '@pixi/runner';\n     *\n     * const complete = new Runner('complete');\n     * ```\n     *\n     * The scope used will be the object itself.\n     *\n     * @param {any} item - The object that will be listening.\n     */Runner.prototype.add=function(item){if(item[this._name]){this.ensureNonAliasedItems();this.remove(item);this.items.push(item);}return this;};/**\n     * Remove a single listener from the dispatch queue.\n     *\n     * @param {any} item - The listener that you would like to remove.\n     */Runner.prototype.remove=function(item){var index=this.items.indexOf(item);if(index!==-1){this.ensureNonAliasedItems();this.items.splice(index,1);}return this;};/**\n     * Check to see if the listener is already in the Runner\n     *\n     * @param {any} item - The listener that you would like to check.\n     */Runner.prototype.contains=function(item){return this.items.indexOf(item)!==-1;};/** Remove all listeners from the Runner */Runner.prototype.removeAll=function(){this.ensureNonAliasedItems();this.items.length=0;return this;};/** Remove all references, don't use after this. */Runner.prototype.destroy=function(){this.removeAll();this.items=null;this._name=null;};Object.defineProperty(Runner.prototype,\"empty\",{/**\n         * `true` if there are no this Runner contains no listeners\n         *\n         * @readonly\n         */get:function get(){return this.items.length===0;},enumerable:false,configurable:true});Object.defineProperty(Runner.prototype,\"name\",{/**\n         * The name of the runner.\n         *\n         * @readonly\n         */get:function get(){return this._name;},enumerable:false,configurable:true});return Runner;}();Object.defineProperties(Runner.prototype,{/**\n     * Alias for `emit`\n     * @memberof PIXI.Runner#\n     * @method dispatch\n     * @see PIXI.Runner#emit\n     */dispatch:{value:Runner.prototype.emit},/**\n     * Alias for `emit`\n     * @memberof PIXI.Runner#\n     * @method run\n     * @see PIXI.Runner#emit\n     */run:{value:Runner.prototype.emit}});export{Runner};","map":null,"metadata":{},"sourceType":"module"}