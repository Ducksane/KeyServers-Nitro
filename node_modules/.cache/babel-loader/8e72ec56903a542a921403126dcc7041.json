{"ast":null,"code":"import{useEffect}from'react';import useCommittedRef from'./useCommittedRef';/**\n * Creates a `setInterval` that is properly cleaned up when a component unmounted\n *\n * ```tsx\n *  function Timer() {\n *    const [timer, setTimer] = useState(0)\n *    useInterval(() => setTimer(i => i + 1), 1000)\n *\n *    return <span>{timer} seconds past</span>\n *  }\n * ```\n *\n * @param fn an function run on each interval\n * @param ms The milliseconds duration of the interval\n */function useInterval(fn,ms,paused,runImmediately){if(paused===void 0){paused=false;}if(runImmediately===void 0){runImmediately=false;}var handle;var fnRef=useCommittedRef(fn);// this ref is necessary b/c useEffect will sometimes miss a paused toggle\n// orphaning a setTimeout chain in the aether, so relying on it's refresh logic is not reliable.\nvar pausedRef=useCommittedRef(paused);var tick=function tick(){if(pausedRef.current)return;fnRef.current();schedule();// eslint-disable-line no-use-before-define\n};var schedule=function schedule(){clearTimeout(handle);handle=setTimeout(tick,ms);};useEffect(function(){if(runImmediately){tick();}else{schedule();}return function(){return clearTimeout(handle);};},[paused,runImmediately]);}export default useInterval;","map":null,"metadata":{},"sourceType":"module"}