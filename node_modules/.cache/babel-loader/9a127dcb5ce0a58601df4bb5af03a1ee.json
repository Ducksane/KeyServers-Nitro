{"ast":null,"code":"import _objectSpread from\"/home/muphy/Documents/habboom/Nitro-Edit-main/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/home/muphy/Documents/habboom/Nitro-Edit-main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _objectWithoutProperties from\"/home/muphy/Documents/habboom/Nitro-Edit-main/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";var _excluded=[\"children\",\"transition\",\"popperConfig\"];import*as React from'react';import{useRef}from'react';import classNames from'classnames';import BaseOverlay from'@restart/ui/Overlay';import useMergedRefs from'@restart/hooks/useMergedRefs';import useOverlayOffset from'./useOverlayOffset';import Fade from'./Fade';import safeFindDOMNode from'./safeFindDOMNode';import{jsx as _jsx}from\"react/jsx-runtime\";var defaultProps={transition:Fade,rootClose:false,show:false,placement:'top'};function wrapRefs(props,arrowProps){var ref=props.ref;var aRef=arrowProps.ref;props.ref=ref.__wrapped||(ref.__wrapped=function(r){return ref(safeFindDOMNode(r));});arrowProps.ref=aRef.__wrapped||(aRef.__wrapped=function(r){return aRef(safeFindDOMNode(r));});}var Overlay=/*#__PURE__*/React.forwardRef(function(_ref,outerRef){var overlay=_ref.children,transition=_ref.transition,_ref$popperConfig=_ref.popperConfig,popperConfig=_ref$popperConfig===void 0?{}:_ref$popperConfig,outerProps=_objectWithoutProperties(_ref,_excluded);var popperRef=useRef({});var _useOverlayOffset=useOverlayOffset(outerProps.offset),_useOverlayOffset2=_slicedToArray(_useOverlayOffset,2),ref=_useOverlayOffset2[0],modifiers=_useOverlayOffset2[1];var mergedRef=useMergedRefs(outerRef,ref);var actualTransition=transition===true?Fade:transition||undefined;return/*#__PURE__*/_jsx(BaseOverlay,_objectSpread(_objectSpread({},outerProps),{},{ref:mergedRef,popperConfig:_objectSpread(_objectSpread({},popperConfig),{},{modifiers:modifiers.concat(popperConfig.modifiers||[])}),transition:actualTransition,children:function children(overlayProps,_ref2){var arrowProps=_ref2.arrowProps,popperObj=_ref2.popper,show=_ref2.show;var _popperObj$state,_popperObj$state$modi;wrapRefs(overlayProps,arrowProps);// Need to get placement from popper object, handling case when overlay is flipped using 'flip' prop\nvar updatedPlacement=popperObj==null?void 0:popperObj.placement;var popper=Object.assign(popperRef.current,{state:popperObj==null?void 0:popperObj.state,scheduleUpdate:popperObj==null?void 0:popperObj.update,placement:updatedPlacement,outOfBoundaries:(popperObj==null?void 0:(_popperObj$state=popperObj.state)==null?void 0:(_popperObj$state$modi=_popperObj$state.modifiersData.hide)==null?void 0:_popperObj$state$modi.isReferenceHidden)||false});if(typeof overlay==='function')return overlay(_objectSpread(_objectSpread(_objectSpread({},overlayProps),{},{placement:updatedPlacement,show:show},!transition&&show&&{className:'show'}),{},{popper:popper,arrowProps:arrowProps}));return/*#__PURE__*/React.cloneElement(overlay,_objectSpread(_objectSpread({},overlayProps),{},{placement:updatedPlacement,arrowProps:arrowProps,popper:popper,className:classNames(overlay.props.className,!transition&&show&&'show'),style:_objectSpread(_objectSpread({},overlay.props.style),overlayProps.style)}));}}));});Overlay.displayName='Overlay';Overlay.defaultProps=defaultProps;export default Overlay;","map":null,"metadata":{},"sourceType":"module"}