{"ast":null,"code":"import _objectSpread from\"/home/muphy/Documents/habboom/Nitro-Edit-main/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _objectWithoutProperties from\"/home/muphy/Documents/habboom/Nitro-Edit-main/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";var _excluded=[\"title\",\"children\",\"bsPrefix\",\"rootCloseEvent\",\"variant\",\"size\",\"menuRole\",\"renderMenuOnMount\",\"disabled\",\"href\",\"id\",\"menuVariant\"];import*as React from'react';import PropTypes from'prop-types';import Dropdown from'./Dropdown';import DropdownToggle from'./DropdownToggle';import DropdownMenu from'./DropdownMenu';import{alignPropType}from'./types';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var propTypes={/**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string}\n   */id:PropTypes.string,/** An `href` passed to the Toggle component */href:PropTypes.string,/** An `onClick` handler passed to the Toggle component */onClick:PropTypes.func,/** The content of the non-toggle Button.  */title:PropTypes.node.isRequired,/** Disables both Buttons  */disabled:PropTypes.bool,/**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */align:alignPropType,/** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */menuRole:PropTypes.string,/** Whether to render the dropdown menu in the DOM before the first time it is shown */renderMenuOnMount:PropTypes.bool,/**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */rootCloseEvent:PropTypes.string,/**\n   * Menu color variant.\n   *\n   * Omitting this will use the default light color.\n   */menuVariant:PropTypes.oneOf(['dark']),/** @ignore */bsPrefix:PropTypes.string,/** @ignore */variant:PropTypes.string,/** @ignore */size:PropTypes.string};/**\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of\n * [`Dropdown`'s props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._ Only\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\n * along with menu-related props are passed to the `Dropdown.Menu`\n */var DropdownButton=/*#__PURE__*/React.forwardRef(function(_ref,ref){var title=_ref.title,children=_ref.children,bsPrefix=_ref.bsPrefix,rootCloseEvent=_ref.rootCloseEvent,variant=_ref.variant,size=_ref.size,menuRole=_ref.menuRole,renderMenuOnMount=_ref.renderMenuOnMount,disabled=_ref.disabled,href=_ref.href,id=_ref.id,menuVariant=_ref.menuVariant,props=_objectWithoutProperties(_ref,_excluded);return/*#__PURE__*/_jsxs(Dropdown,_objectSpread(_objectSpread({ref:ref},props),{},{children:[/*#__PURE__*/_jsx(DropdownToggle,{id:id,href:href,size:size,variant:variant,disabled:disabled,childBsPrefix:bsPrefix,children:title}),/*#__PURE__*/_jsx(DropdownMenu,{role:menuRole,renderOnMount:renderMenuOnMount,rootCloseEvent:rootCloseEvent,variant:menuVariant,children:children})]}));});DropdownButton.displayName='DropdownButton';DropdownButton.propTypes=propTypes;export default DropdownButton;","map":null,"metadata":{},"sourceType":"module"}