{"ast":null,"code":"/*!\n * @pixi/core - v6.3.0\n * Compiled Wed, 23 Mar 2022 18:58:56 UTC\n *\n * @pixi/core is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */import{settings}from'@pixi/settings';import{ENV,ALPHA_MODES,SCALE_MODES,FORMATS,TYPES,TARGETS,MIPMAP_MODES,MSAA_QUALITY,BUFFER_TYPE,CLEAR_MODES,DRAW_MODES,BUFFER_BITS,MASK_TYPES,PRECISION,BLEND_MODES,GC_MODES,SAMPLER_TYPES,WRAP_MODES,RENDERER_TYPE}from'@pixi/constants';import{isMobile,isPow2,BaseTextureCache,TextureCache,uid,EventEmitter,determineCrossOrigin,getResolutionOfUrl,deprecation,nextPow2,getBufferType,ProgramCache,removeItems,hex2string,hex2rgb,sayHello,isWebGLSupported,premultiplyBlendMode,log2,premultiplyTint}from'@pixi/utils';import{Runner}from'@pixi/runner';import{Ticker}from'@pixi/ticker';import{groupD8,Rectangle,Point,Matrix}from'@pixi/math';/**\n * The maximum support for using WebGL. If a device does not\n * support WebGL version, for instance WebGL 2, it will still\n * attempt to fallback support to WebGL 1. If you want to\n * explicitly remove feature support to target a more stable\n * baseline, prefer a lower environment.\n *\n * Due to {@link https://bugs.chromium.org/p/chromium/issues/detail?id=934823|bug in chromium}\n * we disable webgl2 by default for all non-apple mobile devices.\n *\n * @static\n * @name PREFER_ENV\n * @memberof PIXI.settings\n * @type {number}\n * @default PIXI.ENV.WEBGL2\n */settings.PREFER_ENV=isMobile.any?ENV.WEBGL:ENV.WEBGL2;/**\n * If set to `true`, *only* Textures and BaseTexture objects stored\n * in the caches ({@link PIXI.utils.TextureCache TextureCache} and\n * {@link PIXI.utils.BaseTextureCache BaseTextureCache}) can be\n * used when calling {@link PIXI.Texture.from Texture.from} or\n * {@link PIXI.BaseTexture.from BaseTexture.from}.\n * Otherwise, these `from` calls throw an exception. Using this property\n * can be useful if you want to enforce preloading all assets with\n * {@link PIXI.Loader Loader}.\n *\n * @static\n * @name STRICT_TEXTURE_CACHE\n * @memberof PIXI.settings\n * @type {boolean}\n * @default false\n */settings.STRICT_TEXTURE_CACHE=false;/**\n * Collection of installed resource types, class must extend {@link PIXI.Resource}.\n * @example\n * class CustomResource extends PIXI.Resource {\n *   // MUST have source, options constructor signature\n *   // for auto-detected resources to be created.\n *   constructor(source, options) {\n *     super();\n *   }\n *   upload(renderer, baseTexture, glTexture) {\n *     // upload with GL\n *     return true;\n *   }\n *   // used to auto-detect resource\n *   static test(source, extension) {\n *     return extension === 'xyz'|| source instanceof SomeClass;\n *   }\n * }\n * // Install the new resource type\n * PIXI.INSTALLED.push(CustomResource);\n *\n * @memberof PIXI\n * @type {Array<PIXI.IResourcePlugin>}\n * @static\n * @readonly\n */var INSTALLED=[];/**\n * Create a resource element from a single source element. This\n * auto-detects which type of resource to create. All resources that\n * are auto-detectable must have a static `test` method and a constructor\n * with the arguments `(source, options?)`. Currently, the supported\n * resources for auto-detection include:\n *  - {@link PIXI.ImageResource}\n *  - {@link PIXI.CanvasResource}\n *  - {@link PIXI.VideoResource}\n *  - {@link PIXI.SVGResource}\n *  - {@link PIXI.BufferResource}\n * @static\n * @memberof PIXI\n * @function autoDetectResource\n * @param {string|*} source - Resource source, this can be the URL to the resource,\n *        a typed-array (for BufferResource), HTMLVideoElement, SVG data-uri\n *        or any other resource that can be auto-detected. If not resource is\n *        detected, it's assumed to be an ImageResource.\n * @param {object} [options] - Pass-through options to use for Resource\n * @param {number} [options.width] - Width of BufferResource or SVG rasterization\n * @param {number} [options.height] - Height of BufferResource or SVG rasterization\n * @param {boolean} [options.autoLoad=true] - Image, SVG and Video flag to start loading\n * @param {number} [options.scale=1] - SVG source scale. Overridden by width, height\n * @param {boolean} [options.createBitmap=PIXI.settings.CREATE_IMAGE_BITMAP] - Image option to create Bitmap object\n * @param {boolean} [options.crossorigin=true] - Image and Video option to set crossOrigin\n * @param {boolean} [options.autoPlay=true] - Video option to start playing video immediately\n * @param {number} [options.updateFPS=0] - Video option to update how many times a second the\n *        texture should be updated from the video. Leave at 0 to update at every render\n * @return {PIXI.Resource} The created resource.\n */function autoDetectResource(source,options){if(!source){return null;}var extension='';if(typeof source==='string'){// search for file extension: period, 3-4 chars, then ?, # or EOL\nvar result=/\\.(\\w{3,4})(?:$|\\?|#)/i.exec(source);if(result){extension=result[1].toLowerCase();}}for(var i=INSTALLED.length-1;i>=0;--i){var ResourcePlugin=INSTALLED[i];if(ResourcePlugin.test&&ResourcePlugin.test(source,extension)){return new ResourcePlugin(source,options);}}throw new Error('Unrecognized source type to auto-detect Resource');}/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */ /* global Reflect, Promise */var _extendStatics=function extendStatics(d,b){_extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p)){d[p]=b[p];}}};return _extendStatics(d,b);};function __extends(d,b){_extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());}var _assign=function __assign(){_assign=Object.assign||function __assign(t){var arguments$1=arguments;for(var s,i=1,n=arguments.length;i<n;i++){s=arguments$1[i];for(var p in s){if(Object.prototype.hasOwnProperty.call(s,p)){t[p]=s[p];}}}return t;};return _assign.apply(this,arguments);};function __rest(s,e){var t={};for(var p in s){if(Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0){t[p]=s[p];}}if(s!=null&&typeof Object.getOwnPropertySymbols===\"function\"){for(var i=0,p=Object.getOwnPropertySymbols(s);i<p.length;i++){if(e.indexOf(p[i])<0){t[p[i]]=s[p[i]];}}}return t;}/**\n * Base resource class for textures that manages validation and uploading, depending on its type.\n *\n * Uploading of a base texture to the GPU is required.\n *\n * @memberof PIXI\n */var Resource=/** @class */function(){/**\n     * @param width - Width of the resource\n     * @param height - Height of the resource\n     */function Resource(width,height){if(width===void 0){width=0;}if(height===void 0){height=0;}this._width=width;this._height=height;this.destroyed=false;this.internal=false;this.onResize=new Runner('setRealSize');this.onUpdate=new Runner('update');this.onError=new Runner('onError');}/**\n     * Bind to a parent BaseTexture\n     *\n     * @param baseTexture - Parent texture\n     */Resource.prototype.bind=function(baseTexture){this.onResize.add(baseTexture);this.onUpdate.add(baseTexture);this.onError.add(baseTexture);// Call a resize immediate if we already\n// have the width and height of the resource\nif(this._width||this._height){this.onResize.emit(this._width,this._height);}};/**\n     * Unbind to a parent BaseTexture\n     *\n     * @param baseTexture - Parent texture\n     */Resource.prototype.unbind=function(baseTexture){this.onResize.remove(baseTexture);this.onUpdate.remove(baseTexture);this.onError.remove(baseTexture);};/**\n     * Trigger a resize event\n     *\n     * @param width - X dimension\n     * @param height - Y dimension\n     */Resource.prototype.resize=function(width,height){if(width!==this._width||height!==this._height){this._width=width;this._height=height;this.onResize.emit(width,height);}};Object.defineProperty(Resource.prototype,\"valid\",{/**\n         * Has been validated\n         *\n         * @readonly\n         */get:function get(){return!!this._width&&!!this._height;},enumerable:false,configurable:true});/** Has been updated trigger event. */Resource.prototype.update=function(){if(!this.destroyed){this.onUpdate.emit();}};/**\n     * This can be overridden to start preloading a resource\n     * or do any other prepare step.\n     *\n     * @protected\n     * @return Handle the validate event\n     */Resource.prototype.load=function(){return Promise.resolve(this);};Object.defineProperty(Resource.prototype,\"width\",{/**\n         * The width of the resource.\n         *\n         * @readonly\n         */get:function get(){return this._width;},enumerable:false,configurable:true});Object.defineProperty(Resource.prototype,\"height\",{/**\n         * The height of the resource.\n         *\n         * @readonly\n         */get:function get(){return this._height;},enumerable:false,configurable:true});/**\n     * Set the style, optional to override\n     *\n     * @param renderer - yeah, renderer!\n     * @param baseTexture - the texture\n     * @param glTexture - texture instance for this webgl context\n     * @returns - `true` is success\n     */Resource.prototype.style=function(_renderer,_baseTexture,_glTexture){return false;};/** Clean up anything, this happens when destroying is ready. */Resource.prototype.dispose=function(){// override\n};/**\n     * Call when destroying resource, unbind any BaseTexture object\n     * before calling this method, as reference counts are maintained\n     * internally.\n     */Resource.prototype.destroy=function(){if(!this.destroyed){this.destroyed=true;this.dispose();this.onError.removeAll();this.onError=null;this.onResize.removeAll();this.onResize=null;this.onUpdate.removeAll();this.onUpdate=null;}};/**\n     * Abstract, used to auto-detect resource type.\n     *\n     * @param {*} source - The source object\n     * @param {string} extension - The extension of source, if set\n     */Resource.test=function(_source,_extension){return false;};return Resource;}();/**\n * @interface SharedArrayBuffer\n */ /**\n * Buffer resource with data of typed array.\n *\n * @memberof PIXI\n */var BufferResource=/** @class */function(_super){__extends(BufferResource,_super);/**\n     * @param source - Source buffer\n     * @param options - Options\n     * @param {number} options.width - Width of the texture\n     * @param {number} options.height - Height of the texture\n     */function BufferResource(source,options){var _this=this;var _a=options||{},width=_a.width,height=_a.height;if(!width||!height){throw new Error('BufferResource width or height invalid');}_this=_super.call(this,width,height)||this;_this.data=source;return _this;}/**\n     * Upload the texture to the GPU.\n     *\n     * @param renderer - Upload to the renderer\n     * @param baseTexture - Reference to parent texture\n     * @param glTexture - glTexture\n     * @returns - true is success\n     */BufferResource.prototype.upload=function(renderer,baseTexture,glTexture){var gl=renderer.gl;gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,baseTexture.alphaMode===ALPHA_MODES.UNPACK);var width=baseTexture.realWidth;var height=baseTexture.realHeight;if(glTexture.width===width&&glTexture.height===height){gl.texSubImage2D(baseTexture.target,0,0,0,width,height,baseTexture.format,glTexture.type,this.data);}else{glTexture.width=width;glTexture.height=height;gl.texImage2D(baseTexture.target,0,glTexture.internalFormat,width,height,0,baseTexture.format,glTexture.type,this.data);}return true;};/** Destroy and don't use after this. */BufferResource.prototype.dispose=function(){this.data=null;};/**\n     * Used to auto-detect the type of resource.\n     *\n     * @param {*} source - The source object\n     * @return {boolean} `true` if <canvas>\n     */BufferResource.test=function(source){return source instanceof Float32Array||source instanceof Uint8Array||source instanceof Uint32Array;};return BufferResource;}(Resource);var defaultBufferOptions={scaleMode:SCALE_MODES.NEAREST,format:FORMATS.RGBA,alphaMode:ALPHA_MODES.NPM};/**\n * A Texture stores the information that represents an image.\n * All textures have a base texture, which contains information about the source.\n * Therefore you can have many textures all using a single BaseTexture\n *\n * @memberof PIXI\n * @typeParam R - The BaseTexture's Resource type.\n * @typeParam RO - The options for constructing resource.\n */var BaseTexture=/** @class */function(_super){__extends(BaseTexture,_super);/**\n     * @param {PIXI.Resource|string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} [resource=null] -\n     *        The current resource to use, for things that aren't Resource objects, will be converted\n     *        into a Resource.\n     * @param options - Collection of options\n     * @param {PIXI.MIPMAP_MODES} [options.mipmap=PIXI.settings.MIPMAP_TEXTURES] - If mipmapping is enabled for texture\n     * @param {number} [options.anisotropicLevel=PIXI.settings.ANISOTROPIC_LEVEL] - Anisotropic filtering level of texture\n     * @param {PIXI.WRAP_MODES} [options.wrapMode=PIXI.settings.WRAP_MODE] - Wrap mode for textures\n     * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.settings.SCALE_MODE] - Default scale mode, linear, nearest\n     * @param {PIXI.FORMATS} [options.format=PIXI.FORMATS.RGBA] - GL format type\n     * @param {PIXI.TYPES} [options.type=PIXI.TYPES.UNSIGNED_BYTE] - GL data type\n     * @param {PIXI.TARGETS} [options.target=PIXI.TARGETS.TEXTURE_2D] - GL texture target\n     * @param {PIXI.ALPHA_MODES} [options.alphaMode=PIXI.ALPHA_MODES.UNPACK] - Pre multiply the image alpha\n     * @param {number} [options.width=0] - Width of the texture\n     * @param {number} [options.height=0] - Height of the texture\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - Resolution of the base texture\n     * @param {object} [options.resourceOptions] - Optional resource options,\n     *        see {@link PIXI.autoDetectResource autoDetectResource}\n     */function BaseTexture(resource,options){if(resource===void 0){resource=null;}if(options===void 0){options=null;}var _this=_super.call(this)||this;options=options||{};var alphaMode=options.alphaMode,mipmap=options.mipmap,anisotropicLevel=options.anisotropicLevel,scaleMode=options.scaleMode,width=options.width,height=options.height,wrapMode=options.wrapMode,format=options.format,type=options.type,target=options.target,resolution=options.resolution,resourceOptions=options.resourceOptions;// Convert the resource to a Resource object\nif(resource&&!(resource instanceof Resource)){resource=autoDetectResource(resource,resourceOptions);resource.internal=true;}_this.resolution=resolution||settings.RESOLUTION;_this.width=Math.round((width||0)*_this.resolution)/_this.resolution;_this.height=Math.round((height||0)*_this.resolution)/_this.resolution;_this._mipmap=mipmap!==undefined?mipmap:settings.MIPMAP_TEXTURES;_this.anisotropicLevel=anisotropicLevel!==undefined?anisotropicLevel:settings.ANISOTROPIC_LEVEL;_this._wrapMode=wrapMode||settings.WRAP_MODE;_this._scaleMode=scaleMode!==undefined?scaleMode:settings.SCALE_MODE;_this.format=format||FORMATS.RGBA;_this.type=type||TYPES.UNSIGNED_BYTE;_this.target=target||TARGETS.TEXTURE_2D;_this.alphaMode=alphaMode!==undefined?alphaMode:ALPHA_MODES.UNPACK;_this.uid=uid();_this.touched=0;_this.isPowerOfTwo=false;_this._refreshPOT();_this._glTextures={};_this.dirtyId=0;_this.dirtyStyleId=0;_this.cacheId=null;_this.valid=width>0&&height>0;_this.textureCacheIds=[];_this.destroyed=false;_this.resource=null;_this._batchEnabled=0;_this._batchLocation=0;_this.parentTextureArray=null;/**\n         * Fired when a not-immediately-available source finishes loading.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#loaded\n         * @param {PIXI.BaseTexture} baseTexture - Resource loaded.\n         */ /**\n         * Fired when a not-immediately-available source fails to load.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#error\n         * @param {PIXI.BaseTexture} baseTexture - Resource errored.\n         * @param {ErrorEvent} event - Load error event.\n         */ /**\n         * Fired when BaseTexture is updated.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#loaded\n         * @param {PIXI.BaseTexture} baseTexture - Resource loaded.\n         */ /**\n         * Fired when BaseTexture is updated.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#update\n         * @param {PIXI.BaseTexture} baseTexture - Instance of texture being updated.\n         */ /**\n         * Fired when BaseTexture is destroyed.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#dispose\n         * @param {PIXI.BaseTexture} baseTexture - Instance of texture being destroyed.\n         */ // Set the resource\n_this.setResource(resource);return _this;}Object.defineProperty(BaseTexture.prototype,\"realWidth\",{/**\n         * Pixel width of the source of this texture\n         *\n         * @readonly\n         */get:function get(){return Math.round(this.width*this.resolution);},enumerable:false,configurable:true});Object.defineProperty(BaseTexture.prototype,\"realHeight\",{/**\n         * Pixel height of the source of this texture\n         *\n         * @readonly\n         */get:function get(){return Math.round(this.height*this.resolution);},enumerable:false,configurable:true});Object.defineProperty(BaseTexture.prototype,\"mipmap\",{/**\n         * Mipmap mode of the texture, affects downscaled images\n         *\n         * @default PIXI.settings.MIPMAP_TEXTURES\n         */get:function get(){return this._mipmap;},set:function set(value){if(this._mipmap!==value){this._mipmap=value;this.dirtyStyleId++;}},enumerable:false,configurable:true});Object.defineProperty(BaseTexture.prototype,\"scaleMode\",{/**\n         * The scale mode to apply when scaling this texture\n         *\n         * @default PIXI.settings.SCALE_MODE\n         */get:function get(){return this._scaleMode;},set:function set(value){if(this._scaleMode!==value){this._scaleMode=value;this.dirtyStyleId++;}},enumerable:false,configurable:true});Object.defineProperty(BaseTexture.prototype,\"wrapMode\",{/**\n         * How the texture wraps\n         *\n         * @default PIXI.settings.WRAP_MODE\n         */get:function get(){return this._wrapMode;},set:function set(value){if(this._wrapMode!==value){this._wrapMode=value;this.dirtyStyleId++;}},enumerable:false,configurable:true});/**\n     * Changes style options of BaseTexture\n     *\n     * @param scaleMode - Pixi scalemode\n     * @param mipmap - enable mipmaps\n     * @returns - this\n     */BaseTexture.prototype.setStyle=function(scaleMode,mipmap){var dirty;if(scaleMode!==undefined&&scaleMode!==this.scaleMode){this.scaleMode=scaleMode;dirty=true;}if(mipmap!==undefined&&mipmap!==this.mipmap){this.mipmap=mipmap;dirty=true;}if(dirty){this.dirtyStyleId++;}return this;};/**\n     * Changes w/h/resolution. Texture becomes valid if width and height are greater than zero.\n     *\n     * @param desiredWidth - Desired visual width\n     * @param desiredHeight - Desired visual height\n     * @param resolution - Optionally set resolution\n     * @returns - this\n     */BaseTexture.prototype.setSize=function(desiredWidth,desiredHeight,resolution){resolution=resolution||this.resolution;return this.setRealSize(desiredWidth*resolution,desiredHeight*resolution,resolution);};/**\n     * Sets real size of baseTexture, preserves current resolution.\n     *\n     * @param realWidth - Full rendered width\n     * @param realHeight - Full rendered height\n     * @param resolution - Optionally set resolution\n     * @returns - this\n     */BaseTexture.prototype.setRealSize=function(realWidth,realHeight,resolution){this.resolution=resolution||this.resolution;this.width=Math.round(realWidth)/this.resolution;this.height=Math.round(realHeight)/this.resolution;this._refreshPOT();this.update();return this;};/**\n     * Refresh check for isPowerOfTwo texture based on size\n     *\n     * @private\n     */BaseTexture.prototype._refreshPOT=function(){this.isPowerOfTwo=isPow2(this.realWidth)&&isPow2(this.realHeight);};/**\n     * Changes resolution\n     *\n     * @param resolution - res\n     * @returns - this\n     */BaseTexture.prototype.setResolution=function(resolution){var oldResolution=this.resolution;if(oldResolution===resolution){return this;}this.resolution=resolution;if(this.valid){this.width=Math.round(this.width*oldResolution)/resolution;this.height=Math.round(this.height*oldResolution)/resolution;this.emit('update',this);}this._refreshPOT();return this;};/**\n     * Sets the resource if it wasn't set. Throws error if resource already present\n     *\n     * @param resource - that is managing this BaseTexture\n     * @returns - this\n     */BaseTexture.prototype.setResource=function(resource){if(this.resource===resource){return this;}if(this.resource){throw new Error('Resource can be set only once');}resource.bind(this);this.resource=resource;return this;};/** Invalidates the object. Texture becomes valid if width and height are greater than zero. */BaseTexture.prototype.update=function(){if(!this.valid){if(this.width>0&&this.height>0){this.valid=true;this.emit('loaded',this);this.emit('update',this);}}else{this.dirtyId++;this.dirtyStyleId++;this.emit('update',this);}};/**\n     * Handle errors with resources.\n     *\n     * @private\n     * @param event - Error event emitted.\n     */BaseTexture.prototype.onError=function(event){this.emit('error',this,event);};/**\n     * Destroys this base texture.\n     * The method stops if resource doesn't want this texture to be destroyed.\n     * Removes texture from all caches.\n     */BaseTexture.prototype.destroy=function(){// remove and destroy the resource\nif(this.resource){this.resource.unbind(this);// only destroy resourced created internally\nif(this.resource.internal){this.resource.destroy();}this.resource=null;}if(this.cacheId){delete BaseTextureCache[this.cacheId];delete TextureCache[this.cacheId];this.cacheId=null;}// finally let the WebGL renderer know..\nthis.dispose();BaseTexture.removeFromCache(this);this.textureCacheIds=null;this.destroyed=true;};/**\n     * Frees the texture from WebGL memory without destroying this texture object.\n     * This means you can still use the texture later which will upload it to GPU\n     * memory again.\n     *\n     * @fires PIXI.BaseTexture#dispose\n     */BaseTexture.prototype.dispose=function(){this.emit('dispose',this);};/** Utility function for BaseTexture|Texture cast. */BaseTexture.prototype.castToBaseTexture=function(){return this;};/**\n     * Helper function that creates a base texture based on the source you provide.\n     * The source can be - image url, image element, canvas element. If the\n     * source is an image url or an image element and not in the base texture\n     * cache, it will be created and loaded.\n     *\n     * @static\n     * @param {string|HTMLImageElement|HTMLCanvasElement|SVGElement|HTMLVideoElement} source - The\n     *        source to create base texture from.\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @param {string} [options.pixiIdPrefix=pixiid] - If a source has no id, this is the prefix of the generated id\n     * @param {boolean} [strict] - Enforce strict-mode, see {@link PIXI.settings.STRICT_TEXTURE_CACHE}.\n     * @returns {PIXI.BaseTexture} The new base texture.\n     */BaseTexture.from=function(source,options,strict){if(strict===void 0){strict=settings.STRICT_TEXTURE_CACHE;}var isFrame=typeof source==='string';var cacheId=null;if(isFrame){cacheId=source;}else{if(!source._pixiId){var prefix=options&&options.pixiIdPrefix||'pixiid';source._pixiId=prefix+\"_\"+uid();}cacheId=source._pixiId;}var baseTexture=BaseTextureCache[cacheId];// Strict-mode rejects invalid cacheIds\nif(isFrame&&strict&&!baseTexture){throw new Error(\"The cacheId \\\"\"+cacheId+\"\\\" does not exist in BaseTextureCache.\");}if(!baseTexture){baseTexture=new BaseTexture(source,options);baseTexture.cacheId=cacheId;BaseTexture.addToCache(baseTexture,cacheId);}return baseTexture;};/**\n     * Create a new BaseTexture with a BufferResource from a Float32Array.\n     * RGBA values are floats from 0 to 1.\n     *\n     * @param {Float32Array|Uint8Array} buffer - The optional array to use, if no data\n     *        is provided, a new Float32Array is created.\n     * @param width - Width of the resource\n     * @param height - Height of the resource\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @return - The resulting new BaseTexture\n     */BaseTexture.fromBuffer=function(buffer,width,height,options){buffer=buffer||new Float32Array(width*height*4);var resource=new BufferResource(buffer,{width:width,height:height});var type=buffer instanceof Float32Array?TYPES.FLOAT:TYPES.UNSIGNED_BYTE;return new BaseTexture(resource,Object.assign(defaultBufferOptions,options||{width:width,height:height,type:type}));};/**\n     * Adds a BaseTexture to the global BaseTextureCache. This cache is shared across the whole PIXI object.\n     *\n     *\n     * @param {PIXI.BaseTexture} baseTexture - The BaseTexture to add to the cache.\n     * @param {string} id - The id that the BaseTexture will be stored against.\n     */BaseTexture.addToCache=function(baseTexture,id){if(id){if(baseTexture.textureCacheIds.indexOf(id)===-1){baseTexture.textureCacheIds.push(id);}if(BaseTextureCache[id]){// eslint-disable-next-line no-console\nconsole.warn(\"BaseTexture added to the cache with an id [\"+id+\"] that already had an entry\");}BaseTextureCache[id]=baseTexture;}};/**\n     * Remove a BaseTexture from the global BaseTextureCache.\n     *\n     * @param {string|PIXI.BaseTexture} baseTexture - id of a BaseTexture to be removed, or a BaseTexture instance itself.\n     * @return {PIXI.BaseTexture|null} The BaseTexture that was removed.\n     */BaseTexture.removeFromCache=function(baseTexture){if(typeof baseTexture==='string'){var baseTextureFromCache=BaseTextureCache[baseTexture];if(baseTextureFromCache){var index=baseTextureFromCache.textureCacheIds.indexOf(baseTexture);if(index>-1){baseTextureFromCache.textureCacheIds.splice(index,1);}delete BaseTextureCache[baseTexture];return baseTextureFromCache;}}else if(baseTexture&&baseTexture.textureCacheIds){for(var i=0;i<baseTexture.textureCacheIds.length;++i){delete BaseTextureCache[baseTexture.textureCacheIds[i]];}baseTexture.textureCacheIds.length=0;return baseTexture;}return null;};/** Global number of the texture batch, used by multi-texture renderers. */BaseTexture._globalBatch=0;return BaseTexture;}(EventEmitter);/**\n * Resource that can manage several resource (items) inside.\n * All resources need to have the same pixel size.\n * Parent class for CubeResource and ArrayResource\n *\n * @memberof PIXI\n */var AbstractMultiResource=/** @class */function(_super){__extends(AbstractMultiResource,_super);/**\n     * @param length\n     * @param options - Options to for Resource constructor\n     * @param {number} [options.width] - Width of the resource\n     * @param {number} [options.height] - Height of the resource\n     */function AbstractMultiResource(length,options){var _this=this;var _a=options||{},width=_a.width,height=_a.height;_this=_super.call(this,width,height)||this;_this.items=[];_this.itemDirtyIds=[];for(var i=0;i<length;i++){var partTexture=new BaseTexture();_this.items.push(partTexture);// -2 - first run of texture array upload\n// -1 - texture item was allocated\n// >=0 - texture item uploaded , in sync with items[i].dirtyId\n_this.itemDirtyIds.push(-2);}_this.length=length;_this._load=null;_this.baseTexture=null;return _this;}/**\n     * Used from ArrayResource and CubeResource constructors.\n     *\n     * @param resources - Can be resources, image elements, canvas, etc. ,\n     *  length should be same as constructor length\n     * @param options - Detect options for resources\n     */AbstractMultiResource.prototype.initFromArray=function(resources,options){for(var i=0;i<this.length;i++){if(!resources[i]){continue;}if(resources[i].castToBaseTexture){this.addBaseTextureAt(resources[i].castToBaseTexture(),i);}else if(resources[i]instanceof Resource){this.addResourceAt(resources[i],i);}else{this.addResourceAt(autoDetectResource(resources[i],options),i);}}};/** Destroy this BaseImageResource. */AbstractMultiResource.prototype.dispose=function(){for(var i=0,len=this.length;i<len;i++){this.items[i].destroy();}this.items=null;this.itemDirtyIds=null;this._load=null;};/**\n     * Set a resource by ID\n     *\n     * @param resource\n     * @param index - Zero-based index of resource to set\n     * @return - Instance for chaining\n     */AbstractMultiResource.prototype.addResourceAt=function(resource,index){if(!this.items[index]){throw new Error(\"Index \"+index+\" is out of bounds\");}// Inherit the first resource dimensions\nif(resource.valid&&!this.valid){this.resize(resource.width,resource.height);}this.items[index].setResource(resource);return this;};/** Set the parent base texture. */AbstractMultiResource.prototype.bind=function(baseTexture){if(this.baseTexture!==null){throw new Error('Only one base texture per TextureArray is allowed');}_super.prototype.bind.call(this,baseTexture);for(var i=0;i<this.length;i++){this.items[i].parentTextureArray=baseTexture;this.items[i].on('update',baseTexture.update,baseTexture);}};/** Unset the parent base texture. */AbstractMultiResource.prototype.unbind=function(baseTexture){_super.prototype.unbind.call(this,baseTexture);for(var i=0;i<this.length;i++){this.items[i].parentTextureArray=null;this.items[i].off('update',baseTexture.update,baseTexture);}};/**\n     * Load all the resources simultaneously\n     *\n     * @return - When load is resolved\n     */AbstractMultiResource.prototype.load=function(){var _this=this;if(this._load){return this._load;}var resources=this.items.map(function(item){return item.resource;}).filter(function(item){return item;});// TODO: also implement load part-by-part strategy\nvar promises=resources.map(function(item){return item.load();});this._load=Promise.all(promises).then(function(){var _a=_this.items[0],realWidth=_a.realWidth,realHeight=_a.realHeight;_this.resize(realWidth,realHeight);return Promise.resolve(_this);});return this._load;};return AbstractMultiResource;}(Resource);/**\n * A resource that contains a number of sources.\n *\n * @memberof PIXI\n */var ArrayResource=/** @class */function(_super){__extends(ArrayResource,_super);/**\n     * @param source - Number of items in array or the collection\n     *        of image URLs to use. Can also be resources, image elements, canvas, etc.\n     * @param options - Options to apply to {@link PIXI.autoDetectResource}\n     * @param {number} [options.width] - Width of the resource\n     * @param {number} [options.height] - Height of the resource\n     */function ArrayResource(source,options){var _this=this;var _a=options||{},width=_a.width,height=_a.height;var urls;var length;if(Array.isArray(source)){urls=source;length=source.length;}else{length=source;}_this=_super.call(this,length,{width:width,height:height})||this;if(urls){_this.initFromArray(urls,options);}return _this;}/**\n     * Set a baseTexture by ID,\n     * ArrayResource just takes resource from it, nothing more\n     *\n     * @param baseTexture\n     * @param index - Zero-based index of resource to set\n     * @return - Instance for chaining\n     */ArrayResource.prototype.addBaseTextureAt=function(baseTexture,index){if(baseTexture.resource){this.addResourceAt(baseTexture.resource,index);}else{throw new Error('ArrayResource does not support RenderTexture');}return this;};/** Add binding */ArrayResource.prototype.bind=function(baseTexture){_super.prototype.bind.call(this,baseTexture);baseTexture.target=TARGETS.TEXTURE_2D_ARRAY;};/**\n     * Upload the resources to the GPU.\n     *\n     * @param renderer\n     * @param texture\n     * @param glTexture\n     * @returns - whether texture was uploaded\n     */ArrayResource.prototype.upload=function(renderer,texture,glTexture){var _a=this,length=_a.length,itemDirtyIds=_a.itemDirtyIds,items=_a.items;var gl=renderer.gl;if(glTexture.dirtyId<0){gl.texImage3D(gl.TEXTURE_2D_ARRAY,0,glTexture.internalFormat,this._width,this._height,length,0,texture.format,glTexture.type,null);}for(var i=0;i<length;i++){var item=items[i];if(itemDirtyIds[i]<item.dirtyId){itemDirtyIds[i]=item.dirtyId;if(item.valid){gl.texSubImage3D(gl.TEXTURE_2D_ARRAY,0,0,// xoffset\n0,// yoffset\ni,// zoffset\nitem.resource.width,item.resource.height,1,texture.format,glTexture.type,item.resource.source);}}}return true;};return ArrayResource;}(AbstractMultiResource);/**\n * Base for all the image/canvas resources.\n *\n * @memberof PIXI\n */var BaseImageResource=/** @class */function(_super){__extends(BaseImageResource,_super);/**\n     * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} source\n     */function BaseImageResource(source){var _this=this;var sourceAny=source;var width=sourceAny.naturalWidth||sourceAny.videoWidth||sourceAny.width;var height=sourceAny.naturalHeight||sourceAny.videoHeight||sourceAny.height;_this=_super.call(this,width,height)||this;_this.source=source;_this.noSubImage=false;return _this;}/**\n     * Set cross origin based detecting the url and the crossorigin\n     *\n     * @param element - Element to apply crossOrigin\n     * @param url - URL to check\n     * @param crossorigin - Cross origin value to use\n     */BaseImageResource.crossOrigin=function(element,url,crossorigin){if(crossorigin===undefined&&url.indexOf('data:')!==0){element.crossOrigin=determineCrossOrigin(url);}else if(crossorigin!==false){element.crossOrigin=typeof crossorigin==='string'?crossorigin:'anonymous';}};/**\n     * Upload the texture to the GPU.\n     *\n     * @param renderer - Upload to the renderer\n     * @param baseTexture - Reference to parent texture\n     * @param glTexture\n     * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} [source] - (optional)\n     * @returns - true is success\n     */BaseImageResource.prototype.upload=function(renderer,baseTexture,glTexture,source){var gl=renderer.gl;var width=baseTexture.realWidth;var height=baseTexture.realHeight;source=source||this.source;if(source instanceof HTMLImageElement){if(!source.complete||source.naturalWidth===0){return false;}}else if(source instanceof HTMLVideoElement){if(source.readyState<=1){return false;}}gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,baseTexture.alphaMode===ALPHA_MODES.UNPACK);if(!this.noSubImage&&baseTexture.target===gl.TEXTURE_2D&&glTexture.width===width&&glTexture.height===height){gl.texSubImage2D(gl.TEXTURE_2D,0,0,0,baseTexture.format,glTexture.type,source);}else{glTexture.width=width;glTexture.height=height;gl.texImage2D(baseTexture.target,0,glTexture.internalFormat,baseTexture.format,glTexture.type,source);}return true;};/**\n     * Checks if source width/height was changed, resize can cause extra baseTexture update.\n     * Triggers one update in any case.\n     */BaseImageResource.prototype.update=function(){if(this.destroyed){return;}var source=this.source;var width=source.naturalWidth||source.videoWidth||source.width;var height=source.naturalHeight||source.videoHeight||source.height;this.resize(width,height);_super.prototype.update.call(this);};/** Destroy this {@link BaseImageResource} */BaseImageResource.prototype.dispose=function(){this.source=null;};return BaseImageResource;}(Resource);/**\n * @interface OffscreenCanvas\n */ /**\n * Resource type for HTMLCanvasElement.\n *\n * @memberof PIXI\n */var CanvasResource=/** @class */function(_super){__extends(CanvasResource,_super);/**\n     * @param source - Canvas element to use\n     */ // eslint-disable-next-line @typescript-eslint/no-useless-constructor\nfunction CanvasResource(source){return _super.call(this,source)||this;}/**\n     * Used to auto-detect the type of resource.\n     *\n     * @param {*} source - The source object\n     * @return {boolean} `true` if source is HTMLCanvasElement or OffscreenCanvas\n     */CanvasResource.test=function(source){var OffscreenCanvas=globalThis.OffscreenCanvas;// Check for browsers that don't yet support OffscreenCanvas\nif(OffscreenCanvas&&source instanceof OffscreenCanvas){return true;}return globalThis.HTMLCanvasElement&&source instanceof HTMLCanvasElement;};return CanvasResource;}(BaseImageResource);/**\n * Resource for a CubeTexture which contains six resources.\n *\n * @memberof PIXI\n */var CubeResource=/** @class */function(_super){__extends(CubeResource,_super);/**\n     * @param {Array<string|PIXI.Resource>} [source] - Collection of URLs or resources\n     *        to use as the sides of the cube.\n     * @param options - ImageResource options\n     * @param {number} [options.width] - Width of resource\n     * @param {number} [options.height] - Height of resource\n     * @param {number} [options.autoLoad=true] - Whether to auto-load resources\n     * @param {number} [options.linkBaseTexture=true] - In case BaseTextures are supplied,\n     *   whether to copy them or use\n     */function CubeResource(source,options){var _this=this;var _a=options||{},width=_a.width,height=_a.height,autoLoad=_a.autoLoad,linkBaseTexture=_a.linkBaseTexture;if(source&&source.length!==CubeResource.SIDES){throw new Error(\"Invalid length. Got \"+source.length+\", expected 6\");}_this=_super.call(this,6,{width:width,height:height})||this;for(var i=0;i<CubeResource.SIDES;i++){_this.items[i].target=TARGETS.TEXTURE_CUBE_MAP_POSITIVE_X+i;}_this.linkBaseTexture=linkBaseTexture!==false;if(source){_this.initFromArray(source,options);}if(autoLoad!==false){_this.load();}return _this;}/**\n     * Add binding.\n     *\n     * @param baseTexture - parent base texture\n     */CubeResource.prototype.bind=function(baseTexture){_super.prototype.bind.call(this,baseTexture);baseTexture.target=TARGETS.TEXTURE_CUBE_MAP;};CubeResource.prototype.addBaseTextureAt=function(baseTexture,index,linkBaseTexture){if(linkBaseTexture===undefined){linkBaseTexture=this.linkBaseTexture;}if(!this.items[index]){throw new Error(\"Index \"+index+\" is out of bounds\");}if(!this.linkBaseTexture||baseTexture.parentTextureArray||Object.keys(baseTexture._glTextures).length>0){// copy mode\nif(baseTexture.resource){this.addResourceAt(baseTexture.resource,index);}else{throw new Error(\"CubeResource does not support copying of renderTexture.\");}}else{// link mode, the difficult one!\nbaseTexture.target=TARGETS.TEXTURE_CUBE_MAP_POSITIVE_X+index;baseTexture.parentTextureArray=this.baseTexture;this.items[index]=baseTexture;}if(baseTexture.valid&&!this.valid){this.resize(baseTexture.realWidth,baseTexture.realHeight);}this.items[index]=baseTexture;return this;};/**\n     * Upload the resource\n     *\n     * @returns {boolean} true is success\n     */CubeResource.prototype.upload=function(renderer,_baseTexture,glTexture){var dirty=this.itemDirtyIds;for(var i=0;i<CubeResource.SIDES;i++){var side=this.items[i];if(dirty[i]<side.dirtyId){if(side.valid&&side.resource){side.resource.upload(renderer,side,glTexture);dirty[i]=side.dirtyId;}else if(dirty[i]<-1){// either item is not valid yet, either its a renderTexture\n// allocate the memory\nrenderer.gl.texImage2D(side.target,0,glTexture.internalFormat,_baseTexture.realWidth,_baseTexture.realHeight,0,_baseTexture.format,glTexture.type,null);dirty[i]=-1;}}}return true;};/**\n     * Used to auto-detect the type of resource.\n     *\n     * @param {*} source - The source object\n     * @return {boolean} `true` if source is an array of 6 elements\n     */CubeResource.test=function(source){return Array.isArray(source)&&source.length===CubeResource.SIDES;};/** Number of texture sides to store for CubeResources. */CubeResource.SIDES=6;return CubeResource;}(AbstractMultiResource);/**\n * Resource type for HTMLImageElement.\n *\n * @memberof PIXI\n */var ImageResource=/** @class */function(_super){__extends(ImageResource,_super);/**\n     * @param source - image source or URL\n     * @param options\n     * @param {boolean} [options.autoLoad=true] - start loading process\n     * @param {boolean} [options.createBitmap=PIXI.settings.CREATE_IMAGE_BITMAP] - whether its required to create\n     *        a bitmap before upload\n     * @param {boolean} [options.crossorigin=true] - Load image using cross origin\n     * @param {PIXI.ALPHA_MODES} [options.alphaMode=PIXI.ALPHA_MODES.UNPACK] - Premultiply image alpha in bitmap\n     */function ImageResource(source,options){var _this=this;options=options||{};if(!(source instanceof HTMLImageElement)){var imageElement=new Image();BaseImageResource.crossOrigin(imageElement,source,options.crossorigin);imageElement.src=source;source=imageElement;}_this=_super.call(this,source)||this;// FireFox 68, and possibly other versions, seems like setting the HTMLImageElement#width and #height\n// to non-zero values before its loading completes if images are in a cache.\n// Because of this, need to set the `_width` and the `_height` to zero to avoid uploading incomplete images.\n// Please refer to the issue #5968 (https://github.com/pixijs/pixi.js/issues/5968).\nif(!source.complete&&!!_this._width&&!!_this._height){_this._width=0;_this._height=0;}_this.url=source.src;_this._process=null;_this.preserveBitmap=false;_this.createBitmap=(options.createBitmap!==undefined?options.createBitmap:settings.CREATE_IMAGE_BITMAP)&&!!globalThis.createImageBitmap;_this.alphaMode=typeof options.alphaMode==='number'?options.alphaMode:null;_this.bitmap=null;_this._load=null;if(options.autoLoad!==false){_this.load();}return _this;}/**\n     * Returns a promise when image will be loaded and processed.\n     *\n     * @param createBitmap - whether process image into bitmap\n     */ImageResource.prototype.load=function(createBitmap){var _this=this;if(this._load){return this._load;}if(createBitmap!==undefined){this.createBitmap=createBitmap;}this._load=new Promise(function(resolve,reject){var source=_this.source;_this.url=source.src;var completed=function completed(){if(_this.destroyed){return;}source.onload=null;source.onerror=null;_this.resize(source.width,source.height);_this._load=null;if(_this.createBitmap){resolve(_this.process());}else{resolve(_this);}};if(source.complete&&source.src){completed();}else{source.onload=completed;source.onerror=function(event){// Avoids Promise freezing when resource broken\nreject(event);_this.onError.emit(event);};}});return this._load;};/**\n     * Called when we need to convert image into BitmapImage.\n     * Can be called multiple times, real promise is cached inside.\n     *\n     * @return - Cached promise to fill that bitmap\n     */ImageResource.prototype.process=function(){var _this=this;var source=this.source;if(this._process!==null){return this._process;}if(this.bitmap!==null||!globalThis.createImageBitmap){return Promise.resolve(this);}var createImageBitmap=globalThis.createImageBitmap;var cors=!source.crossOrigin||source.crossOrigin==='anonymous';this._process=fetch(source.src,{mode:cors?'cors':'no-cors'}).then(function(r){return r.blob();}).then(function(blob){return createImageBitmap(blob,0,0,source.width,source.height,{premultiplyAlpha:_this.alphaMode===ALPHA_MODES.UNPACK?'premultiply':'none'});}).then(function(bitmap){if(_this.destroyed){return Promise.reject();}_this.bitmap=bitmap;_this.update();_this._process=null;return Promise.resolve(_this);});return this._process;};/**\n     * Upload the image resource to GPU.\n     *\n     * @param renderer - Renderer to upload to\n     * @param baseTexture - BaseTexture for this resource\n     * @param glTexture - GLTexture to use\n     * @returns {boolean} true is success\n     */ImageResource.prototype.upload=function(renderer,baseTexture,glTexture){if(typeof this.alphaMode==='number'){// bitmap stores unpack premultiply flag, we dont have to notify texImage2D about it\nbaseTexture.alphaMode=this.alphaMode;}if(!this.createBitmap){return _super.prototype.upload.call(this,renderer,baseTexture,glTexture);}if(!this.bitmap){// yeah, ignore the output\nthis.process();if(!this.bitmap){return false;}}_super.prototype.upload.call(this,renderer,baseTexture,glTexture,this.bitmap);if(!this.preserveBitmap){// checks if there are other renderers that possibly need this bitmap\nvar flag=true;var glTextures=baseTexture._glTextures;for(var key in glTextures){var otherTex=glTextures[key];if(otherTex!==glTexture&&otherTex.dirtyId!==baseTexture.dirtyId){flag=false;break;}}if(flag){if(this.bitmap.close){this.bitmap.close();}this.bitmap=null;}}return true;};/** Destroys this resource. */ImageResource.prototype.dispose=function(){this.source.onload=null;this.source.onerror=null;_super.prototype.dispose.call(this);if(this.bitmap){this.bitmap.close();this.bitmap=null;}this._process=null;this._load=null;};/**\n     * Used to auto-detect the type of resource.\n     *\n     * @param {*} source - The source object\n     * @return {boolean} `true` if source is string or HTMLImageElement\n     */ImageResource.test=function(source){return typeof source==='string'||source instanceof HTMLImageElement;};return ImageResource;}(BaseImageResource);/**\n * Resource type for SVG elements and graphics.\n *\n * @memberof PIXI\n */var SVGResource=/** @class */function(_super){__extends(SVGResource,_super);/**\n     * @param sourceBase64 - Base64 encoded SVG element or URL for SVG file.\n     * @param {object} [options] - Options to use\n     * @param {number} [options.scale=1] - Scale to apply to SVG. Overridden by...\n     * @param {number} [options.width] - Rasterize SVG this wide. Aspect ratio preserved if height not specified.\n     * @param {number} [options.height] - Rasterize SVG this high. Aspect ratio preserved if width not specified.\n     * @param {boolean} [options.autoLoad=true] - Start loading right away.\n     */function SVGResource(sourceBase64,options){var _this=this;options=options||{};_this=_super.call(this,document.createElement('canvas'))||this;_this._width=0;_this._height=0;_this.svg=sourceBase64;_this.scale=options.scale||1;_this._overrideWidth=options.width;_this._overrideHeight=options.height;_this._resolve=null;_this._crossorigin=options.crossorigin;_this._load=null;if(options.autoLoad!==false){_this.load();}return _this;}SVGResource.prototype.load=function(){var _this=this;if(this._load){return this._load;}this._load=new Promise(function(resolve){// Save this until after load is finished\n_this._resolve=function(){_this.resize(_this.source.width,_this.source.height);resolve(_this);};// Convert SVG inline string to data-uri\nif(SVGResource.SVG_XML.test(_this.svg.trim())){if(!btoa){throw new Error('Your browser doesn\\'t support base64 conversions.');}_this.svg=\"data:image/svg+xml;base64,\"+btoa(unescape(encodeURIComponent(_this.svg)));}_this._loadSvg();});return this._load;};/** Loads an SVG image from `imageUrl` or `data URL`. */SVGResource.prototype._loadSvg=function(){var _this=this;var tempImage=new Image();BaseImageResource.crossOrigin(tempImage,this.svg,this._crossorigin);tempImage.src=this.svg;tempImage.onerror=function(event){if(!_this._resolve){return;}tempImage.onerror=null;_this.onError.emit(event);};tempImage.onload=function(){if(!_this._resolve){return;}var svgWidth=tempImage.width;var svgHeight=tempImage.height;if(!svgWidth||!svgHeight){throw new Error('The SVG image must have width and height defined (in pixels), canvas API needs them.');}// Set render size\nvar width=svgWidth*_this.scale;var height=svgHeight*_this.scale;if(_this._overrideWidth||_this._overrideHeight){width=_this._overrideWidth||_this._overrideHeight/svgHeight*svgWidth;height=_this._overrideHeight||_this._overrideWidth/svgWidth*svgHeight;}width=Math.round(width);height=Math.round(height);// Create a canvas element\nvar canvas=_this.source;canvas.width=width;canvas.height=height;canvas._pixiId=\"canvas_\"+uid();// Draw the Svg to the canvas\ncanvas.getContext('2d').drawImage(tempImage,0,0,svgWidth,svgHeight,0,0,width,height);_this._resolve();_this._resolve=null;};};/**\n     * Get size from an svg string using a regular expression.\n     *\n     * @param svgString - a serialized svg element\n     * @return - image extension\n     */SVGResource.getSize=function(svgString){var sizeMatch=SVGResource.SVG_SIZE.exec(svgString);var size={};if(sizeMatch){size[sizeMatch[1]]=Math.round(parseFloat(sizeMatch[3]));size[sizeMatch[5]]=Math.round(parseFloat(sizeMatch[7]));}return size;};/** Destroys this texture. */SVGResource.prototype.dispose=function(){_super.prototype.dispose.call(this);this._resolve=null;this._crossorigin=null;};/**\n     * Used to auto-detect the type of resource.\n     *\n     * @param {*} source - The source object\n     * @param {string} extension - The extension of source, if set\n     * @return {boolean} - If the source is a SVG source or data file\n     */SVGResource.test=function(source,extension){// url file extension is SVG\nreturn extension==='svg'// source is SVG data-uri\n||typeof source==='string'&&/^data:image\\/svg\\+xml(;(charset=utf8|utf8))?;base64/.test(source)// source is SVG inline\n||typeof source==='string'&&SVGResource.SVG_XML.test(source);};/**\n     * Regular expression for SVG XML document.\n     *\n     * @example &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;&lt;!-- image/svg --&gt;&lt;svg\n     * @readonly\n     */SVGResource.SVG_XML=/^(<\\?xml[^?]+\\?>)?\\s*(<!--[^(-->)]*-->)?\\s*\\<svg/m;/**\n     * Regular expression for SVG size.\n     *\n     * @example &lt;svg width=\"100\" height=\"100\"&gt;&lt;/svg&gt;\n     * @readonly\n     */SVGResource.SVG_SIZE=/<svg[^>]*(?:\\s(width|height)=('|\")(\\d*(?:\\.\\d+)?)(?:px)?('|\"))[^>]*(?:\\s(width|height)=('|\")(\\d*(?:\\.\\d+)?)(?:px)?('|\"))[^>]*>/i;// eslint-disable-line max-len\nreturn SVGResource;}(BaseImageResource);/**\n * Resource type for {@code HTMLVideoElement}.\n *\n * @memberof PIXI\n */var VideoResource=/** @class */function(_super){__extends(VideoResource,_super);/**\n     * @param {HTMLVideoElement|object|string|Array<string|object>} source - Video element to use.\n     * @param {object} [options] - Options to use\n     * @param {boolean} [options.autoLoad=true] - Start loading the video immediately\n     * @param {boolean} [options.autoPlay=true] - Start playing video immediately\n     * @param {number} [options.updateFPS=0] - How many times a second to update the texture from the video.\n     * Leave at 0 to update at every render.\n     * @param {boolean} [options.crossorigin=true] - Load image using cross origin\n     */function VideoResource(source,options){var _this=this;options=options||{};if(!(source instanceof HTMLVideoElement)){var videoElement=document.createElement('video');// workaround for https://github.com/pixijs/pixi.js/issues/5996\nvideoElement.setAttribute('preload','auto');videoElement.setAttribute('webkit-playsinline','');videoElement.setAttribute('playsinline','');if(typeof source==='string'){source=[source];}var firstSrc=source[0].src||source[0];BaseImageResource.crossOrigin(videoElement,firstSrc,options.crossorigin);// array of objects or strings\nfor(var i=0;i<source.length;++i){var sourceElement=document.createElement('source');var _a=source[i],src=_a.src,mime=_a.mime;src=src||source[i];var baseSrc=src.split('?').shift().toLowerCase();var ext=baseSrc.slice(baseSrc.lastIndexOf('.')+1);mime=mime||VideoResource.MIME_TYPES[ext]||\"video/\"+ext;sourceElement.src=src;sourceElement.type=mime;videoElement.appendChild(sourceElement);}// Override the source\nsource=videoElement;}_this=_super.call(this,source)||this;_this.noSubImage=true;_this._autoUpdate=true;_this._isConnectedToTicker=false;_this._updateFPS=options.updateFPS||0;_this._msToNextUpdate=0;_this.autoPlay=options.autoPlay!==false;_this._load=null;_this._resolve=null;// Bind for listeners\n_this._onCanPlay=_this._onCanPlay.bind(_this);_this._onError=_this._onError.bind(_this);if(options.autoLoad!==false){_this.load();}return _this;}/**\n     * Trigger updating of the texture.\n     *\n     * @param deltaTime - time delta since last tick\n     */VideoResource.prototype.update=function(_deltaTime){if(!this.destroyed){// account for if video has had its playbackRate changed\nvar elapsedMS=Ticker.shared.elapsedMS*this.source.playbackRate;this._msToNextUpdate=Math.floor(this._msToNextUpdate-elapsedMS);if(!this._updateFPS||this._msToNextUpdate<=0){_super.prototype.update.call(this);this._msToNextUpdate=this._updateFPS?Math.floor(1000/this._updateFPS):0;}}};/**\n     * Start preloading the video resource.\n     *\n     * @return {Promise<void>} Handle the validate event\n     */VideoResource.prototype.load=function(){var _this=this;if(this._load){return this._load;}var source=this.source;if((source.readyState===source.HAVE_ENOUGH_DATA||source.readyState===source.HAVE_FUTURE_DATA)&&source.width&&source.height){source.complete=true;}source.addEventListener('play',this._onPlayStart.bind(this));source.addEventListener('pause',this._onPlayStop.bind(this));if(!this._isSourceReady()){source.addEventListener('canplay',this._onCanPlay);source.addEventListener('canplaythrough',this._onCanPlay);source.addEventListener('error',this._onError,true);}else{this._onCanPlay();}this._load=new Promise(function(resolve){if(_this.valid){resolve(_this);}else{_this._resolve=resolve;source.load();}});return this._load;};/** Handle video error events. */VideoResource.prototype._onError=function(event){this.source.removeEventListener('error',this._onError,true);this.onError.emit(event);};/**\n     * Returns true if the underlying source is playing.\n     *\n     * @return - True if playing.\n     */VideoResource.prototype._isSourcePlaying=function(){var source=this.source;return source.currentTime>0&&source.paused===false&&source.ended===false&&source.readyState>2;};/**\n     * Returns true if the underlying source is ready for playing.\n     *\n     * @return - True if ready.\n     */VideoResource.prototype._isSourceReady=function(){var source=this.source;return source.readyState===3||source.readyState===4;};/** Runs the update loop when the video is ready to play. */VideoResource.prototype._onPlayStart=function(){// Just in case the video has not received its can play even yet..\nif(!this.valid){this._onCanPlay();}if(this.autoUpdate&&!this._isConnectedToTicker){Ticker.shared.add(this.update,this);this._isConnectedToTicker=true;}};/** Fired when a pause event is triggered, stops the update loop. */VideoResource.prototype._onPlayStop=function(){if(this._isConnectedToTicker){Ticker.shared.remove(this.update,this);this._isConnectedToTicker=false;}};/** Fired when the video is loaded and ready to play. */VideoResource.prototype._onCanPlay=function(){var source=this.source;source.removeEventListener('canplay',this._onCanPlay);source.removeEventListener('canplaythrough',this._onCanPlay);var valid=this.valid;this.resize(source.videoWidth,source.videoHeight);// prevent multiple loaded dispatches..\nif(!valid&&this._resolve){this._resolve(this);this._resolve=null;}if(this._isSourcePlaying()){this._onPlayStart();}else if(this.autoPlay){source.play();}};/** Destroys this texture. */VideoResource.prototype.dispose=function(){if(this._isConnectedToTicker){Ticker.shared.remove(this.update,this);this._isConnectedToTicker=false;}var source=this.source;if(source){source.removeEventListener('error',this._onError,true);source.pause();source.src='';source.load();}_super.prototype.dispose.call(this);};Object.defineProperty(VideoResource.prototype,\"autoUpdate\",{/** Should the base texture automatically update itself, set to true by default. */get:function get(){return this._autoUpdate;},set:function set(value){if(value!==this._autoUpdate){this._autoUpdate=value;if(!this._autoUpdate&&this._isConnectedToTicker){Ticker.shared.remove(this.update,this);this._isConnectedToTicker=false;}else if(this._autoUpdate&&!this._isConnectedToTicker&&this._isSourcePlaying()){Ticker.shared.add(this.update,this);this._isConnectedToTicker=true;}}},enumerable:false,configurable:true});Object.defineProperty(VideoResource.prototype,\"updateFPS\",{/**\n         * How many times a second to update the texture from the video. Leave at 0 to update at every render.\n         * A lower fps can help performance, as updating the texture at 60fps on a 30ps video may not be efficient.\n         */get:function get(){return this._updateFPS;},set:function set(value){if(value!==this._updateFPS){this._updateFPS=value;}},enumerable:false,configurable:true});/**\n     * Used to auto-detect the type of resource.\n     *\n     * @param {*} source - The source object\n     * @param {string} extension - The extension of source, if set\n     * @return {boolean} `true` if video source\n     */VideoResource.test=function(source,extension){return globalThis.HTMLVideoElement&&source instanceof HTMLVideoElement||VideoResource.TYPES.indexOf(extension)>-1;};/**\n     * List of common video file extensions supported by VideoResource.\n     *\n     * @readonly\n     */VideoResource.TYPES=['mp4','m4v','webm','ogg','ogv','h264','avi','mov'];/**\n     * Map of video MIME types that can't be directly derived from file extensions.\n     *\n     * @readonly\n     */VideoResource.MIME_TYPES={ogv:'video/ogg',mov:'video/quicktime',m4v:'video/mp4'};return VideoResource;}(BaseImageResource);/**\n * Resource type for ImageBitmap.\n *\n * @memberof PIXI\n */var ImageBitmapResource=/** @class */function(_super){__extends(ImageBitmapResource,_super);/**\n     * @param source - Image element to use\n     */ // eslint-disable-next-line @typescript-eslint/no-useless-constructor\nfunction ImageBitmapResource(source){return _super.call(this,source)||this;}/**\n     * Used to auto-detect the type of resource.\n     *\n     * @param {*} source - The source object\n     * @return {boolean} `true` if source is an ImageBitmap\n     */ImageBitmapResource.test=function(source){return!!globalThis.createImageBitmap&&source instanceof ImageBitmap;};return ImageBitmapResource;}(BaseImageResource);INSTALLED.push(ImageResource,ImageBitmapResource,CanvasResource,VideoResource,SVGResource,BufferResource,CubeResource,ArrayResource);var _resources={__proto__:null,Resource:Resource,BaseImageResource:BaseImageResource,INSTALLED:INSTALLED,autoDetectResource:autoDetectResource,AbstractMultiResource:AbstractMultiResource,ArrayResource:ArrayResource,BufferResource:BufferResource,CanvasResource:CanvasResource,CubeResource:CubeResource,ImageResource:ImageResource,SVGResource:SVGResource,VideoResource:VideoResource,ImageBitmapResource:ImageBitmapResource};/**\n * Resource type for DepthTexture.\n *\n * @memberof PIXI\n */var DepthResource=/** @class */function(_super){__extends(DepthResource,_super);function DepthResource(){return _super!==null&&_super.apply(this,arguments)||this;}/**\n     * Upload the texture to the GPU.\n     *\n     * @param renderer - Upload to the renderer\n     * @param baseTexture - Reference to parent texture\n     * @param glTexture - glTexture\n     * @return - true is success\n     */DepthResource.prototype.upload=function(renderer,baseTexture,glTexture){var gl=renderer.gl;gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,baseTexture.alphaMode===ALPHA_MODES.UNPACK);var width=baseTexture.realWidth;var height=baseTexture.realHeight;if(glTexture.width===width&&glTexture.height===height){gl.texSubImage2D(baseTexture.target,0,0,0,width,height,baseTexture.format,glTexture.type,this.data);}else{glTexture.width=width;glTexture.height=height;gl.texImage2D(baseTexture.target,0,glTexture.internalFormat,width,height,0,baseTexture.format,glTexture.type,this.data);}return true;};return DepthResource;}(BufferResource);/**\n * A framebuffer can be used to render contents off of the screen. {@link PIXI.BaseRenderTexture} uses\n * one internally to render into itself. You can attach a depth or stencil buffer to a framebuffer.\n *\n * On WebGL 2 machines, shaders can output to multiple textures simultaneously with GLSL 300 ES.\n *\n * @memberof PIXI\n */var Framebuffer=/** @class */function(){/**\n     * @param width - Width of the frame buffer\n     * @param height - Height of the frame buffer\n     */function Framebuffer(width,height){this.width=Math.round(width||100);this.height=Math.round(height||100);this.stencil=false;this.depth=false;this.dirtyId=0;this.dirtyFormat=0;this.dirtySize=0;this.depthTexture=null;this.colorTextures=[];this.glFramebuffers={};this.disposeRunner=new Runner('disposeFramebuffer');this.multisample=MSAA_QUALITY.NONE;}Object.defineProperty(Framebuffer.prototype,\"colorTexture\",{/**\n         * Reference to the colorTexture.\n         *\n         * @readonly\n         */get:function get(){return this.colorTextures[0];},enumerable:false,configurable:true});/**\n     * Add texture to the colorTexture array.\n     *\n     * @param index - Index of the array to add the texture to\n     * @param texture - Texture to add to the array\n     */Framebuffer.prototype.addColorTexture=function(index,texture){if(index===void 0){index=0;}// TODO add some validation to the texture - same width / height etc?\nthis.colorTextures[index]=texture||new BaseTexture(null,{scaleMode:SCALE_MODES.NEAREST,resolution:1,mipmap:MIPMAP_MODES.OFF,width:this.width,height:this.height});this.dirtyId++;this.dirtyFormat++;return this;};/**\n     * Add a depth texture to the frame buffer.\n     *\n     * @param texture - Texture to add.\n     */Framebuffer.prototype.addDepthTexture=function(texture){/* eslint-disable max-len */this.depthTexture=texture||new BaseTexture(new DepthResource(null,{width:this.width,height:this.height}),{scaleMode:SCALE_MODES.NEAREST,resolution:1,width:this.width,height:this.height,mipmap:MIPMAP_MODES.OFF,format:FORMATS.DEPTH_COMPONENT,type:TYPES.UNSIGNED_SHORT});this.dirtyId++;this.dirtyFormat++;return this;};/** Enable depth on the frame buffer. */Framebuffer.prototype.enableDepth=function(){this.depth=true;this.dirtyId++;this.dirtyFormat++;return this;};/** Enable stencil on the frame buffer. */Framebuffer.prototype.enableStencil=function(){this.stencil=true;this.dirtyId++;this.dirtyFormat++;return this;};/**\n     * Resize the frame buffer\n     *\n     * @param width - Width of the frame buffer to resize to\n     * @param height - Height of the frame buffer to resize to\n     */Framebuffer.prototype.resize=function(width,height){width=Math.round(width);height=Math.round(height);if(width===this.width&&height===this.height){return;}this.width=width;this.height=height;this.dirtyId++;this.dirtySize++;for(var i=0;i<this.colorTextures.length;i++){var texture=this.colorTextures[i];var resolution=texture.resolution;// take into account the fact the texture may have a different resolution..\ntexture.setSize(width/resolution,height/resolution);}if(this.depthTexture){var resolution=this.depthTexture.resolution;this.depthTexture.setSize(width/resolution,height/resolution);}};/** Disposes WebGL resources that are connected to this geometry. */Framebuffer.prototype.dispose=function(){this.disposeRunner.emit(this,false);};/** Destroys and removes the depth texture added to this framebuffer. */Framebuffer.prototype.destroyDepthTexture=function(){if(this.depthTexture){this.depthTexture.destroy();this.depthTexture=null;++this.dirtyId;++this.dirtyFormat;}};return Framebuffer;}();/**\n * A BaseRenderTexture is a special texture that allows any PixiJS display object to be rendered to it.\n *\n * __Hint__: All DisplayObjects (i.e. Sprites) that render to a BaseRenderTexture should be preloaded\n * otherwise black rectangles will be drawn instead.\n *\n * A BaseRenderTexture takes a snapshot of any Display Object given to its render method. The position\n * and rotation of the given Display Objects is ignored. For example:\n *\n * ```js\n * let renderer = PIXI.autoDetectRenderer();\n * let baseRenderTexture = new PIXI.BaseRenderTexture({ width: 800, height: 600 });\n * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);\n * let sprite = PIXI.Sprite.from(\"spinObj_01.png\");\n *\n * sprite.position.x = 800/2;\n * sprite.position.y = 600/2;\n * sprite.anchor.x = 0.5;\n * sprite.anchor.y = 0.5;\n *\n * renderer.render(sprite, {renderTexture});\n * ```\n *\n * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0\n * you can clear the transform\n *\n * ```js\n *\n * sprite.setTransform()\n *\n * let baseRenderTexture = new PIXI.BaseRenderTexture({ width: 100, height: 100 });\n * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);\n *\n * renderer.render(sprite, {renderTexture});  // Renders to center of RenderTexture\n * ```\n *\n * @memberof PIXI\n */var BaseRenderTexture=/** @class */function(_super){__extends(BaseRenderTexture,_super);/**\n     * @param options\n     * @param {number} [options.width=100] - The width of the base render texture.\n     * @param {number} [options.height=100] - The height of the base render texture.\n     * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES}\n     *   for possible values.\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio\n     *   of the texture being generated.\n     * @param {PIXI.MSAA_QUALITY} [options.multisample=PIXI.MSAA_QUALITY.NONE] - The number of samples of the frame buffer.\n     */function BaseRenderTexture(options){if(options===void 0){options={};}var _this=this;if(typeof options==='number'){/* eslint-disable prefer-rest-params */ // Backward compatibility of signature\nvar width=arguments[0];var height=arguments[1];var scaleMode=arguments[2];var resolution=arguments[3];options={width:width,height:height,scaleMode:scaleMode,resolution:resolution};/* eslint-enable prefer-rest-params */}options.width=options.width||100;options.height=options.height||100;options.multisample=options.multisample!==undefined?options.multisample:MSAA_QUALITY.NONE;_this=_super.call(this,null,options)||this;// Set defaults\n_this.mipmap=MIPMAP_MODES.OFF;_this.valid=true;_this.clearColor=[0,0,0,0];_this.framebuffer=new Framebuffer(_this.realWidth,_this.realHeight).addColorTexture(0,_this);_this.framebuffer.multisample=options.multisample;// TODO - could this be added the systems?\n_this.maskStack=[];_this.filterStack=[{}];return _this;}/**\n     * Resizes the BaseRenderTexture.\n     *\n     * @param desiredWidth - The desired width to resize to.\n     * @param desiredHeight - The desired height to resize to.\n     */BaseRenderTexture.prototype.resize=function(desiredWidth,desiredHeight){this.framebuffer.resize(desiredWidth*this.resolution,desiredHeight*this.resolution);this.setRealSize(this.framebuffer.width,this.framebuffer.height);};/**\n     * Frees the texture and framebuffer from WebGL memory without destroying this texture object.\n     * This means you can still use the texture later which will upload it to GPU\n     * memory again.\n     *\n     * @fires PIXI.BaseTexture#dispose\n     */BaseRenderTexture.prototype.dispose=function(){this.framebuffer.dispose();_super.prototype.dispose.call(this);};/** Destroys this texture. */BaseRenderTexture.prototype.destroy=function(){_super.prototype.destroy.call(this);this.framebuffer.destroyDepthTexture();this.framebuffer=null;};return BaseRenderTexture;}(BaseTexture);/**\n * Stores a texture's frame in UV coordinates, in\n * which everything lies in the rectangle `[(0,0), (1,0),\n * (1,1), (0,1)]`.\n *\n * | Corner       | Coordinates |\n * |--------------|-------------|\n * | Top-Left     | `(x0,y0)`   |\n * | Top-Right    | `(x1,y1)`   |\n * | Bottom-Right | `(x2,y2)`   |\n * | Bottom-Left  | `(x3,y3)`   |\n *\n * @protected\n * @memberof PIXI\n */var TextureUvs=/** @class */function(){function TextureUvs(){this.x0=0;this.y0=0;this.x1=1;this.y1=0;this.x2=1;this.y2=1;this.x3=0;this.y3=1;this.uvsFloat32=new Float32Array(8);}/**\n     * Sets the texture Uvs based on the given frame information.\n     *\n     * @protected\n     * @param frame - The frame of the texture\n     * @param baseFrame - The base frame of the texture\n     * @param rotate - Rotation of frame, see {@link PIXI.groupD8}\n     */TextureUvs.prototype.set=function(frame,baseFrame,rotate){var tw=baseFrame.width;var th=baseFrame.height;if(rotate){// width and height div 2 div baseFrame size\nvar w2=frame.width/2/tw;var h2=frame.height/2/th;// coordinates of center\nvar cX=frame.x/tw+w2;var cY=frame.y/th+h2;rotate=groupD8.add(rotate,groupD8.NW);// NW is top-left corner\nthis.x0=cX+w2*groupD8.uX(rotate);this.y0=cY+h2*groupD8.uY(rotate);rotate=groupD8.add(rotate,2);// rotate 90 degrees clockwise\nthis.x1=cX+w2*groupD8.uX(rotate);this.y1=cY+h2*groupD8.uY(rotate);rotate=groupD8.add(rotate,2);this.x2=cX+w2*groupD8.uX(rotate);this.y2=cY+h2*groupD8.uY(rotate);rotate=groupD8.add(rotate,2);this.x3=cX+w2*groupD8.uX(rotate);this.y3=cY+h2*groupD8.uY(rotate);}else{this.x0=frame.x/tw;this.y0=frame.y/th;this.x1=(frame.x+frame.width)/tw;this.y1=frame.y/th;this.x2=(frame.x+frame.width)/tw;this.y2=(frame.y+frame.height)/th;this.x3=frame.x/tw;this.y3=(frame.y+frame.height)/th;}this.uvsFloat32[0]=this.x0;this.uvsFloat32[1]=this.y0;this.uvsFloat32[2]=this.x1;this.uvsFloat32[3]=this.y1;this.uvsFloat32[4]=this.x2;this.uvsFloat32[5]=this.y2;this.uvsFloat32[6]=this.x3;this.uvsFloat32[7]=this.y3;};TextureUvs.prototype.toString=function(){return\"[@pixi/core:TextureUvs \"+(\"x0=\"+this.x0+\" y0=\"+this.y0+\" \")+(\"x1=\"+this.x1+\" y1=\"+this.y1+\" x2=\"+this.x2+\" \")+(\"y2=\"+this.y2+\" x3=\"+this.x3+\" y3=\"+this.y3)+\"]\";};return TextureUvs;}();var DEFAULT_UVS=new TextureUvs();/**\n * A texture stores the information that represents an image or part of an image.\n *\n * It cannot be added to the display list directly; instead use it as the texture for a Sprite.\n * If no frame is provided for a texture, then the whole image is used.\n *\n * You can directly create a texture from an image and then reuse it multiple times like this :\n *\n * ```js\n * let texture = PIXI.Texture.from('assets/image.png');\n * let sprite1 = new PIXI.Sprite(texture);\n * let sprite2 = new PIXI.Sprite(texture);\n * ```\n *\n * If you didnt pass the texture frame to constructor, it enables `noFrame` mode:\n * it subscribes on baseTexture events, it automatically resizes at the same time as baseTexture.\n *\n * Textures made from SVGs, loaded or not, cannot be used before the file finishes processing.\n * You can check for this by checking the sprite's _textureID property.\n * ```js\n * var texture = PIXI.Texture.from('assets/image.svg');\n * var sprite1 = new PIXI.Sprite(texture);\n * //sprite1._textureID should not be undefined if the texture has finished processing the SVG file\n * ```\n * You can use a ticker or rAF to ensure your sprites load the finished textures after processing. See issue #3068.\n *\n * @memberof PIXI\n * @typeParam R - The BaseTexture's Resource type.\n */var Texture=/** @class */function(_super){__extends(Texture,_super);/**\n     * @param baseTexture - The base texture source to create the texture from\n     * @param frame - The rectangle frame of the texture to show\n     * @param orig - The area of original texture\n     * @param trim - Trimmed rectangle of original texture\n     * @param rotate - indicates how the texture was rotated by texture packer. See {@link PIXI.groupD8}\n     * @param anchor - Default anchor point used for sprite placement / rotation\n     */function Texture(baseTexture,frame,orig,trim,rotate,anchor){var _this=_super.call(this)||this;_this.noFrame=false;if(!frame){_this.noFrame=true;frame=new Rectangle(0,0,1,1);}if(baseTexture instanceof Texture){baseTexture=baseTexture.baseTexture;}_this.baseTexture=baseTexture;_this._frame=frame;_this.trim=trim;_this.valid=false;_this._uvs=DEFAULT_UVS;_this.uvMatrix=null;_this.orig=orig||frame;// new Rectangle(0, 0, 1, 1);\n_this._rotate=Number(rotate||0);if(rotate===true){// this is old texturepacker legacy, some games/libraries are passing \"true\" for rotated textures\n_this._rotate=2;}else if(_this._rotate%2!==0){throw new Error('attempt to use diamond-shaped UVs. If you are sure, set rotation manually');}_this.defaultAnchor=anchor?new Point(anchor.x,anchor.y):new Point(0,0);_this._updateID=0;_this.textureCacheIds=[];if(!baseTexture.valid){baseTexture.once('loaded',_this.onBaseTextureUpdated,_this);}else if(_this.noFrame){// if there is no frame we should monitor for any base texture changes..\nif(baseTexture.valid){_this.onBaseTextureUpdated(baseTexture);}}else{_this.frame=frame;}if(_this.noFrame){baseTexture.on('update',_this.onBaseTextureUpdated,_this);}return _this;}/**\n     * Updates this texture on the gpu.\n     *\n     * Calls the TextureResource update.\n     *\n     * If you adjusted `frame` manually, please call `updateUvs()` instead.\n     */Texture.prototype.update=function(){if(this.baseTexture.resource){this.baseTexture.resource.update();}};/**\n     * Called when the base texture is updated\n     *\n     * @protected\n     * @param baseTexture - The base texture.\n     */Texture.prototype.onBaseTextureUpdated=function(baseTexture){if(this.noFrame){if(!this.baseTexture.valid){return;}this._frame.width=baseTexture.width;this._frame.height=baseTexture.height;this.valid=true;this.updateUvs();}else{// TODO this code looks confusing.. boo to abusing getters and setters!\n// if user gave us frame that has bigger size than resized texture it can be a problem\nthis.frame=this._frame;}this.emit('update',this);};/**\n     * Destroys this texture\n     *\n     * @param [destroyBase=false] - Whether to destroy the base texture as well\n     */Texture.prototype.destroy=function(destroyBase){if(this.baseTexture){if(destroyBase){var resource=this.baseTexture.resource;// delete the texture if it exists in the texture cache..\n// this only needs to be removed if the base texture is actually destroyed too..\nif(resource&&resource.url&&TextureCache[resource.url]){Texture.removeFromCache(resource.url);}this.baseTexture.destroy();}this.baseTexture.off('loaded',this.onBaseTextureUpdated,this);this.baseTexture.off('update',this.onBaseTextureUpdated,this);this.baseTexture=null;}this._frame=null;this._uvs=null;this.trim=null;this.orig=null;this.valid=false;Texture.removeFromCache(this);this.textureCacheIds=null;};/**\n     * Creates a new texture object that acts the same as this one.\n     *\n     * @return - The new texture\n     */Texture.prototype.clone=function(){var clonedFrame=this._frame.clone();var clonedOrig=this._frame===this.orig?clonedFrame:this.orig.clone();var clonedTexture=new Texture(this.baseTexture,!this.noFrame&&clonedFrame,clonedOrig,this.trim&&this.trim.clone(),this.rotate,this.defaultAnchor);if(this.noFrame){clonedTexture._frame=clonedFrame;}return clonedTexture;};/**\n     * Updates the internal WebGL UV cache. Use it after you change `frame` or `trim` of the texture.\n     * Call it after changing the frame\n     */Texture.prototype.updateUvs=function(){if(this._uvs===DEFAULT_UVS){this._uvs=new TextureUvs();}this._uvs.set(this._frame,this.baseTexture,this.rotate);this._updateID++;};/**\n     * Helper function that creates a new Texture based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     *\n     * @param {string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|PIXI.BaseTexture} source -\n     *        Source to create texture from\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @param {string} [options.pixiIdPrefix=pixiid] - If a source has no id, this is the prefix of the generated id\n     * @param {boolean} [strict] - Enforce strict-mode, see {@link PIXI.settings.STRICT_TEXTURE_CACHE}.\n     * @return {PIXI.Texture} The newly created texture\n     */Texture.from=function(source,options,strict){if(options===void 0){options={};}if(strict===void 0){strict=settings.STRICT_TEXTURE_CACHE;}var isFrame=typeof source==='string';var cacheId=null;if(isFrame){cacheId=source;}else if(source instanceof BaseTexture){if(!source.cacheId){var prefix=options&&options.pixiIdPrefix||'pixiid';source.cacheId=prefix+\"-\"+uid();BaseTexture.addToCache(source,source.cacheId);}cacheId=source.cacheId;}else{if(!source._pixiId){var prefix=options&&options.pixiIdPrefix||'pixiid';source._pixiId=prefix+\"_\"+uid();}cacheId=source._pixiId;}var texture=TextureCache[cacheId];// Strict-mode rejects invalid cacheIds\nif(isFrame&&strict&&!texture){throw new Error(\"The cacheId \\\"\"+cacheId+\"\\\" does not exist in TextureCache.\");}if(!texture&&!(source instanceof BaseTexture)){if(!options.resolution){options.resolution=getResolutionOfUrl(source);}texture=new Texture(new BaseTexture(source,options));texture.baseTexture.cacheId=cacheId;BaseTexture.addToCache(texture.baseTexture,cacheId);Texture.addToCache(texture,cacheId);}else if(!texture&&source instanceof BaseTexture){texture=new Texture(source);Texture.addToCache(texture,cacheId);}// lets assume its a base texture!\nreturn texture;};/**\n     * Useful for loading textures via URLs. Use instead of `Texture.from` because\n     * it does a better job of handling failed URLs more effectively. This also ignores\n     * `PIXI.settings.STRICT_TEXTURE_CACHE`. Works for Videos, SVGs, Images.\n     *\n     * @param url - The remote URL to load.\n     * @param options - Optional options to include\n     * @return - A Promise that resolves to a Texture.\n     */Texture.fromURL=function(url,options){var resourceOptions=Object.assign({autoLoad:false},options===null||options===void 0?void 0:options.resourceOptions);var texture=Texture.from(url,Object.assign({resourceOptions:resourceOptions},options),false);var resource=texture.baseTexture.resource;// The texture was already loaded\nif(texture.baseTexture.valid){return Promise.resolve(texture);}// Manually load the texture, this should allow users to handle load errors\nreturn resource.load().then(function(){return Promise.resolve(texture);});};/**\n     * Create a new Texture with a BufferResource from a Float32Array.\n     * RGBA values are floats from 0 to 1.\n     *\n     * @param {Float32Array|Uint8Array} buffer - The optional array to use, if no data\n     *        is provided, a new Float32Array is created.\n     * @param width - Width of the resource\n     * @param height - Height of the resource\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @return - The resulting new BaseTexture\n     */Texture.fromBuffer=function(buffer,width,height,options){return new Texture(BaseTexture.fromBuffer(buffer,width,height,options));};/**\n     * Create a texture from a source and add to the cache.\n     *\n     * @param {HTMLImageElement|HTMLCanvasElement|string} source - The input source.\n     * @param imageUrl - File name of texture, for cache and resolving resolution.\n     * @param name - Human readable name for the texture cache. If no name is\n     *        specified, only `imageUrl` will be used as the cache ID.\n     * @return - Output texture\n     */Texture.fromLoader=function(source,imageUrl,name,options){var baseTexture=new BaseTexture(source,Object.assign({scaleMode:settings.SCALE_MODE,resolution:getResolutionOfUrl(imageUrl)},options));var resource=baseTexture.resource;if(resource instanceof ImageResource){resource.url=imageUrl;}var texture=new Texture(baseTexture);// No name, use imageUrl instead\nif(!name){name=imageUrl;}// lets also add the frame to pixi's global cache for 'fromLoader' function\nBaseTexture.addToCache(texture.baseTexture,name);Texture.addToCache(texture,name);// also add references by url if they are different.\nif(name!==imageUrl){BaseTexture.addToCache(texture.baseTexture,imageUrl);Texture.addToCache(texture,imageUrl);}// Generally images are valid right away\nif(texture.baseTexture.valid){return Promise.resolve(texture);}// SVG assets need to be parsed async, let's wait\nreturn new Promise(function(resolve){texture.baseTexture.once('loaded',function(){return resolve(texture);});});};/**\n     * Adds a Texture to the global TextureCache. This cache is shared across the whole PIXI object.\n     *\n     * @param texture - The Texture to add to the cache.\n     * @param id - The id that the Texture will be stored against.\n     */Texture.addToCache=function(texture,id){if(id){if(texture.textureCacheIds.indexOf(id)===-1){texture.textureCacheIds.push(id);}if(TextureCache[id]){// eslint-disable-next-line no-console\nconsole.warn(\"Texture added to the cache with an id [\"+id+\"] that already had an entry\");}TextureCache[id]=texture;}};/**\n     * Remove a Texture from the global TextureCache.\n     *\n     * @param texture - id of a Texture to be removed, or a Texture instance itself\n     * @return - The Texture that was removed\n     */Texture.removeFromCache=function(texture){if(typeof texture==='string'){var textureFromCache=TextureCache[texture];if(textureFromCache){var index=textureFromCache.textureCacheIds.indexOf(texture);if(index>-1){textureFromCache.textureCacheIds.splice(index,1);}delete TextureCache[texture];return textureFromCache;}}else if(texture&&texture.textureCacheIds){for(var i=0;i<texture.textureCacheIds.length;++i){// Check that texture matches the one being passed in before deleting it from the cache.\nif(TextureCache[texture.textureCacheIds[i]]===texture){delete TextureCache[texture.textureCacheIds[i]];}}texture.textureCacheIds.length=0;return texture;}return null;};Object.defineProperty(Texture.prototype,\"resolution\",{/**\n         * Returns resolution of baseTexture\n         *\n         * @readonly\n         */get:function get(){return this.baseTexture.resolution;},enumerable:false,configurable:true});Object.defineProperty(Texture.prototype,\"frame\",{/**\n         * The frame specifies the region of the base texture that this texture uses.\n         * Please call `updateUvs()` after you change coordinates of `frame` manually.\n         */get:function get(){return this._frame;},set:function set(frame){this._frame=frame;this.noFrame=false;var x=frame.x,y=frame.y,width=frame.width,height=frame.height;var xNotFit=x+width>this.baseTexture.width;var yNotFit=y+height>this.baseTexture.height;if(xNotFit||yNotFit){var relationship=xNotFit&&yNotFit?'and':'or';var errorX=\"X: \"+x+\" + \"+width+\" = \"+(x+width)+\" > \"+this.baseTexture.width;var errorY=\"Y: \"+y+\" + \"+height+\" = \"+(y+height)+\" > \"+this.baseTexture.height;throw new Error('Texture Error: frame does not fit inside the base Texture dimensions: '+(errorX+\" \"+relationship+\" \"+errorY));}this.valid=width&&height&&this.baseTexture.valid;if(!this.trim&&!this.rotate){this.orig=frame;}if(this.valid){this.updateUvs();}},enumerable:false,configurable:true});Object.defineProperty(Texture.prototype,\"rotate\",{/**\n         * Indicates whether the texture is rotated inside the atlas\n         * set to 2 to compensate for texture packer rotation\n         * set to 6 to compensate for spine packer rotation\n         * can be used to rotate or mirror sprites\n         * See {@link PIXI.groupD8} for explanation\n         */get:function get(){return this._rotate;},set:function set(rotate){this._rotate=rotate;if(this.valid){this.updateUvs();}},enumerable:false,configurable:true});Object.defineProperty(Texture.prototype,\"width\",{/** The width of the Texture in pixels. */get:function get(){return this.orig.width;},enumerable:false,configurable:true});Object.defineProperty(Texture.prototype,\"height\",{/** The height of the Texture in pixels. */get:function get(){return this.orig.height;},enumerable:false,configurable:true});/** Utility function for BaseTexture|Texture cast. */Texture.prototype.castToBaseTexture=function(){return this.baseTexture;};return Texture;}(EventEmitter);function createWhiteTexture(){var canvas=document.createElement('canvas');canvas.width=16;canvas.height=16;var context=canvas.getContext('2d');context.fillStyle='white';context.fillRect(0,0,16,16);return new Texture(new BaseTexture(new CanvasResource(canvas)));}function removeAllHandlers(tex){tex.destroy=function _emptyDestroy(){};tex.on=function _emptyOn(){};tex.once=function _emptyOnce(){};tex.emit=function _emptyEmit(){};}/**\n * An empty texture, used often to not have to create multiple empty textures.\n * Can not be destroyed.\n *\n * @static\n * @constant\n * @member {PIXI.Texture}\n */Texture.EMPTY=new Texture(new BaseTexture());removeAllHandlers(Texture.EMPTY);removeAllHandlers(Texture.EMPTY.baseTexture);/**\n * A white texture of 16x16 size, used for graphics and other things\n * Can not be destroyed.\n *\n * @static\n * @constant\n * @member {PIXI.Texture}\n */Texture.WHITE=createWhiteTexture();removeAllHandlers(Texture.WHITE);removeAllHandlers(Texture.WHITE.baseTexture);/**\n * A RenderTexture is a special texture that allows any PixiJS display object to be rendered to it.\n *\n * __Hint__: All DisplayObjects (i.e. Sprites) that render to a RenderTexture should be preloaded\n * otherwise black rectangles will be drawn instead.\n *\n * __Hint-2__: The actual memory allocation will happen on first render.\n * You shouldn't create renderTextures each frame just to delete them after, try to reuse them.\n *\n * A RenderTexture takes a snapshot of any Display Object given to its render method. For example:\n *\n * ```js\n * let renderer = PIXI.autoDetectRenderer();\n * let renderTexture = PIXI.RenderTexture.create({ width: 800, height: 600 });\n * let sprite = PIXI.Sprite.from(\"spinObj_01.png\");\n *\n * sprite.position.x = 800/2;\n * sprite.position.y = 600/2;\n * sprite.anchor.x = 0.5;\n * sprite.anchor.y = 0.5;\n *\n * renderer.render(sprite, {renderTexture});\n * ```\n * Note that you should not create a new renderer, but reuse the same one as the rest of the application.\n *\n * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0\n * you can clear the transform\n *\n * ```js\n *\n * sprite.setTransform()\n *\n * let renderTexture = new PIXI.RenderTexture.create({ width: 100, height: 100 });\n *\n * renderer.render(sprite, {renderTexture});  // Renders to center of RenderTexture\n * ```\n *\n * @memberof PIXI\n */var RenderTexture=/** @class */function(_super){__extends(RenderTexture,_super);/**\n     * @param baseRenderTexture - The base texture object that this texture uses.\n     * @param frame - The rectangle frame of the texture to show.\n     */function RenderTexture(baseRenderTexture,frame){var _this=_super.call(this,baseRenderTexture,frame)||this;_this.valid=true;_this.filterFrame=null;_this.filterPoolKey=null;_this.updateUvs();return _this;}Object.defineProperty(RenderTexture.prototype,\"framebuffer\",{/**\n         * Shortcut to `this.baseTexture.framebuffer`, saves baseTexture cast.\n         *\n         * @readonly\n         */get:function get(){return this.baseTexture.framebuffer;},enumerable:false,configurable:true});Object.defineProperty(RenderTexture.prototype,\"multisample\",{/**\n         * Shortcut to `this.framebuffer.multisample`.\n         *\n         * @default PIXI.MSAA_QUALITY.NONE\n         */get:function get(){return this.framebuffer.multisample;},set:function set(value){this.framebuffer.multisample=value;},enumerable:false,configurable:true});/**\n     * Resizes the RenderTexture.\n     *\n     * @param desiredWidth - The desired width to resize to.\n     * @param desiredHeight - The desired height to resize to.\n     * @param resizeBaseTexture - Should the baseTexture.width and height values be resized as well?\n     */RenderTexture.prototype.resize=function(desiredWidth,desiredHeight,resizeBaseTexture){if(resizeBaseTexture===void 0){resizeBaseTexture=true;}var resolution=this.baseTexture.resolution;var width=Math.round(desiredWidth*resolution)/resolution;var height=Math.round(desiredHeight*resolution)/resolution;// TODO - could be not required..\nthis.valid=width>0&&height>0;this._frame.width=this.orig.width=width;this._frame.height=this.orig.height=height;if(resizeBaseTexture){this.baseTexture.resize(width,height);}this.updateUvs();};/**\n     * Changes the resolution of baseTexture, but does not change framebuffer size.\n     *\n     * @param resolution - The new resolution to apply to RenderTexture\n     */RenderTexture.prototype.setResolution=function(resolution){var baseTexture=this.baseTexture;if(baseTexture.resolution===resolution){return;}baseTexture.setResolution(resolution);this.resize(baseTexture.width,baseTexture.height,false);};RenderTexture.create=function(options){var arguments$1=arguments;var rest=[];for(var _i=1;_i<arguments.length;_i++){rest[_i-1]=arguments$1[_i];}// @deprecated fallback, old-style: create(width, height, scaleMode, resolution)\nif(typeof options==='number'){deprecation('6.0.0','Arguments (width, height, scaleMode, resolution) have been deprecated.');/* eslint-disable prefer-rest-params */options={width:options,height:rest[0],scaleMode:rest[1],resolution:rest[2]};/* eslint-enable prefer-rest-params */}return new RenderTexture(new BaseRenderTexture(options));};return RenderTexture;}(Texture);/**\n * Texture pool, used by FilterSystem and plugins.\n *\n * Stores collection of temporary pow2 or screen-sized renderTextures\n *\n * If you use custom RenderTexturePool for your filters, you can use methods\n * `getFilterTexture` and `returnFilterTexture` same as in\n *\n * @memberof PIXI\n */var RenderTexturePool=/** @class */function(){/**\n     * @param textureOptions - options that will be passed to BaseRenderTexture constructor\n     * @param {PIXI.SCALE_MODES} [textureOptions.scaleMode] - See {@link PIXI.SCALE_MODES} for possible values.\n     */function RenderTexturePool(textureOptions){this.texturePool={};this.textureOptions=textureOptions||{};this.enableFullScreen=false;this._pixelsWidth=0;this._pixelsHeight=0;}/**\n     * Creates texture with params that were specified in pool constructor.\n     *\n     * @param realWidth - Width of texture in pixels.\n     * @param realHeight - Height of texture in pixels.\n     * @param multisample - Number of samples of the framebuffer.\n     */RenderTexturePool.prototype.createTexture=function(realWidth,realHeight,multisample){if(multisample===void 0){multisample=MSAA_QUALITY.NONE;}var baseRenderTexture=new BaseRenderTexture(Object.assign({width:realWidth,height:realHeight,resolution:1,multisample:multisample},this.textureOptions));return new RenderTexture(baseRenderTexture);};/**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     *\n     * @param minWidth - The minimum width of the render texture.\n     * @param minHeight - The minimum height of the render texture.\n     * @param resolution - The resolution of the render texture.\n     * @param multisample - Number of samples of the render texture.\n     * @return The new render texture.\n     */RenderTexturePool.prototype.getOptimalTexture=function(minWidth,minHeight,resolution,multisample){if(resolution===void 0){resolution=1;}if(multisample===void 0){multisample=MSAA_QUALITY.NONE;}var key;minWidth=Math.ceil(minWidth*resolution-1e-6);minHeight=Math.ceil(minHeight*resolution-1e-6);if(!this.enableFullScreen||minWidth!==this._pixelsWidth||minHeight!==this._pixelsHeight){minWidth=nextPow2(minWidth);minHeight=nextPow2(minHeight);key=((minWidth&0xFFFF)<<16|minHeight&0xFFFF)>>>0;if(multisample>1){key+=multisample*0x100000000;}}else{key=multisample>1?-multisample:-1;}if(!this.texturePool[key]){this.texturePool[key]=[];}var renderTexture=this.texturePool[key].pop();if(!renderTexture){renderTexture=this.createTexture(minWidth,minHeight,multisample);}renderTexture.filterPoolKey=key;renderTexture.setResolution(resolution);return renderTexture;};/**\n     * Gets extra texture of the same size as input renderTexture\n     *\n     * `getFilterTexture(input, 0.5)` or `getFilterTexture(0.5, input)`\n     *\n     * @param input - renderTexture from which size and resolution will be copied\n     * @param resolution - override resolution of the renderTexture\n     *  It overrides, it does not multiply\n     * @param multisample - number of samples of the renderTexture\n     * @returns\n     */RenderTexturePool.prototype.getFilterTexture=function(input,resolution,multisample){var filterTexture=this.getOptimalTexture(input.width,input.height,resolution||input.resolution,multisample||MSAA_QUALITY.NONE);filterTexture.filterFrame=input.filterFrame;return filterTexture;};/**\n     * Place a render texture back into the pool.\n     *\n     * @param renderTexture - The renderTexture to free\n     */RenderTexturePool.prototype.returnTexture=function(renderTexture){var key=renderTexture.filterPoolKey;renderTexture.filterFrame=null;this.texturePool[key].push(renderTexture);};/**\n     * Alias for returnTexture, to be compliant with FilterSystem interface.\n     *\n     * @param renderTexture - The renderTexture to free\n     */RenderTexturePool.prototype.returnFilterTexture=function(renderTexture){this.returnTexture(renderTexture);};/**\n     * Clears the pool.\n     *\n     * @param destroyTextures - Destroy all stored textures.\n     */RenderTexturePool.prototype.clear=function(destroyTextures){destroyTextures=destroyTextures!==false;if(destroyTextures){for(var i in this.texturePool){var textures=this.texturePool[i];if(textures){for(var j=0;j<textures.length;j++){textures[j].destroy(true);}}}}this.texturePool={};};/**\n     * If screen size was changed, drops all screen-sized textures,\n     * sets new screen size, sets `enableFullScreen` to true\n     *\n     * Size is measured in pixels, `renderer.view` can be passed here, not `renderer.screen`\n     *\n     * @param size - Initial size of screen.\n     */RenderTexturePool.prototype.setScreenSize=function(size){if(size.width===this._pixelsWidth&&size.height===this._pixelsHeight){return;}this.enableFullScreen=size.width>0&&size.height>0;for(var i in this.texturePool){if(!(Number(i)<0)){continue;}var textures=this.texturePool[i];if(textures){for(var j=0;j<textures.length;j++){textures[j].destroy(true);}}this.texturePool[i]=[];}this._pixelsWidth=size.width;this._pixelsHeight=size.height;};/**\n     * Key that is used to store fullscreen renderTextures in a pool\n     *\n     * @constant\n     */RenderTexturePool.SCREEN_KEY=-1;return RenderTexturePool;}();/* eslint-disable max-len */ /**\n * Holds the information for a single attribute structure required to render geometry.\n *\n * This does not contain the actual data, but instead has a buffer id that maps to a {@link PIXI.Buffer}\n * This can include anything from positions, uvs, normals, colors etc.\n *\n * @memberof PIXI\n */var Attribute=/** @class */function(){/**\n     * @param buffer - the id of the buffer that this attribute will look for\n     * @param size - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2.\n     * @param normalized - should the data be normalized.\n     * @param {PIXI.TYPES} [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {@link PIXI.TYPES} to see the ones available\n     * @param [stride=0] - How far apart, in bytes, the start of each value is. (used for interleaving data)\n     * @param [start=0] - How far into the array to start reading values (used for interleaving data)\n     * @param [instance=false] - Whether the geometry is instanced.\n     */function Attribute(buffer,size,normalized,type,stride,start,instance){if(size===void 0){size=0;}if(normalized===void 0){normalized=false;}if(type===void 0){type=TYPES.FLOAT;}this.buffer=buffer;this.size=size;this.normalized=normalized;this.type=type;this.stride=stride;this.start=start;this.instance=instance;}/** Destroys the Attribute. */Attribute.prototype.destroy=function(){this.buffer=null;};/**\n     * Helper function that creates an Attribute based on the information provided\n     *\n     * @param buffer - the id of the buffer that this attribute will look for\n     * @param [size=0] - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2\n     * @param [normalized=false] - should the data be normalized.\n     * @param [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {@link PIXI.TYPES} to see the ones available\n     * @param [stride=0] - How far apart, in bytes, the start of each value is. (used for interleaving data)\n     * @returns - A new {@link PIXI.Attribute} based on the information provided\n     */Attribute.from=function(buffer,size,normalized,type,stride){return new Attribute(buffer,size,normalized,type,stride);};return Attribute;}();var UID=0;/**\n * A wrapper for data so that it can be used and uploaded by WebGL\n *\n * @memberof PIXI\n */var Buffer=/** @class */function(){/**\n     * @param {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} data - the data to store in the buffer.\n     * @param _static - `true` for static buffer\n     * @param index - `true` for index buffer\n     */function Buffer(data,_static,index){if(_static===void 0){_static=true;}if(index===void 0){index=false;}this.data=data||new Float32Array(1);this._glBuffers={};this._updateID=0;this.index=index;this.static=_static;this.id=UID++;this.disposeRunner=new Runner('disposeBuffer');}// TODO could explore flagging only a partial upload?\n/**\n     * Flags this buffer as requiring an upload to the GPU.\n     * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|number[]} [data] - the data to update in the buffer.\n     */Buffer.prototype.update=function(data){if(data instanceof Array){data=new Float32Array(data);}this.data=data||this.data;this._updateID++;};/** Disposes WebGL resources that are connected to this geometry. */Buffer.prototype.dispose=function(){this.disposeRunner.emit(this,false);};/** Destroys the buffer. */Buffer.prototype.destroy=function(){this.dispose();this.data=null;};Object.defineProperty(Buffer.prototype,\"index\",{get:function get(){return this.type===BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;},/**\n         * Flags whether this is an index buffer.\n         *\n         * Index buffers are of type `ELEMENT_ARRAY_BUFFER`. Note that setting this property to false will make\n         * the buffer of type `ARRAY_BUFFER`.\n         *\n         * For backwards compatibility.\n         */set:function set(value){this.type=value?BUFFER_TYPE.ELEMENT_ARRAY_BUFFER:BUFFER_TYPE.ARRAY_BUFFER;},enumerable:false,configurable:true});/**\n     * Helper function that creates a buffer based on an array or TypedArray\n     *\n     * @param {ArrayBufferView | number[]} data - the TypedArray that the buffer will store. If this is a regular Array it will be converted to a Float32Array.\n     * @return - A new Buffer based on the data provided.\n     */Buffer.from=function(data){if(data instanceof Array){data=new Float32Array(data);}return new Buffer(data);};return Buffer;}();/* eslint-disable object-shorthand */var map={Float32Array:Float32Array,Uint32Array:Uint32Array,Int32Array:Int32Array,Uint8Array:Uint8Array};function interleaveTypedArrays(arrays,sizes){var outSize=0;var stride=0;var views={};for(var i=0;i<arrays.length;i++){stride+=sizes[i];outSize+=arrays[i].length;}var buffer=new ArrayBuffer(outSize*4);var out=null;var littleOffset=0;for(var i=0;i<arrays.length;i++){var size=sizes[i];var array=arrays[i];var type=getBufferType(array);if(!views[type]){views[type]=new map[type](buffer);}out=views[type];for(var j=0;j<array.length;j++){var indexStart=(j/size|0)*stride+littleOffset;var index=j%size;out[indexStart+index]=array[j];}littleOffset+=size;}return new Float32Array(buffer);}var byteSizeMap={5126:4,5123:2,5121:1};var UID$1=0;/* eslint-disable object-shorthand */var map$1={Float32Array:Float32Array,Uint32Array:Uint32Array,Int32Array:Int32Array,Uint8Array:Uint8Array,Uint16Array:Uint16Array};/* eslint-disable max-len */ /**\n * The Geometry represents a model. It consists of two components:\n * - GeometryStyle - The structure of the model such as the attributes layout\n * - GeometryData - the data of the model - this consists of buffers.\n * This can include anything from positions, uvs, normals, colors etc.\n *\n * Geometry can be defined without passing in a style or data if required (thats how I prefer!)\n *\n * ```js\n * let geometry = new PIXI.Geometry();\n *\n * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);\n * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1],2)\n * geometry.addIndex([0,1,2,1,3,2])\n * ```\n *\n * @memberof PIXI\n */var Geometry=/** @class */function(){/**\n     * @param buffers - An array of buffers. optional.\n     * @param attributes - Of the geometry, optional structure of the attributes layout\n     */function Geometry(buffers,attributes){if(buffers===void 0){buffers=[];}if(attributes===void 0){attributes={};}this.buffers=buffers;this.indexBuffer=null;this.attributes=attributes;this.glVertexArrayObjects={};this.id=UID$1++;this.instanced=false;this.instanceCount=1;this.disposeRunner=new Runner('disposeGeometry');this.refCount=0;}/**\n     *\n     * Adds an attribute to the geometry\n     * Note: `stride` and `start` should be `undefined` if you dont know them, not 0!\n     *\n     * @param id - the name of the attribute (matching up to a shader)\n     * @param {PIXI.Buffer|number[]} buffer - the buffer that holds the data of the attribute . You can also provide an Array and a buffer will be created from it.\n     * @param size - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2\n     * @param normalized - should the data be normalized.\n     * @param [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {PIXI.TYPES} to see the ones available\n     * @param [stride=0] - How far apart, in bytes, the start of each value is. (used for interleaving data)\n     * @param [start=0] - How far into the array to start reading values (used for interleaving data)\n     * @param instance - Instancing flag\n     * @return - Returns self, useful for chaining.\n     */Geometry.prototype.addAttribute=function(id,buffer,size,normalized,type,stride,start,instance){if(size===void 0){size=0;}if(normalized===void 0){normalized=false;}if(instance===void 0){instance=false;}if(!buffer){throw new Error('You must pass a buffer when creating an attribute');}// check if this is a buffer!\nif(!(buffer instanceof Buffer)){// its an array!\nif(buffer instanceof Array){buffer=new Float32Array(buffer);}buffer=new Buffer(buffer);}var ids=id.split('|');if(ids.length>1){for(var i=0;i<ids.length;i++){this.addAttribute(ids[i],buffer,size,normalized,type);}return this;}var bufferIndex=this.buffers.indexOf(buffer);if(bufferIndex===-1){this.buffers.push(buffer);bufferIndex=this.buffers.length-1;}this.attributes[id]=new Attribute(bufferIndex,size,normalized,type,stride,start,instance);// assuming that if there is instanced data then this will be drawn with instancing!\nthis.instanced=this.instanced||instance;return this;};/**\n     * Returns the requested attribute.\n     *\n     * @param id - The name of the attribute required\n     * @return - The attribute requested.\n     */Geometry.prototype.getAttribute=function(id){return this.attributes[id];};/**\n     * Returns the requested buffer.\n     *\n     * @param id - The name of the buffer required.\n     * @return - The buffer requested.\n     */Geometry.prototype.getBuffer=function(id){return this.buffers[this.getAttribute(id).buffer];};/**\n    *\n    * Adds an index buffer to the geometry\n    * The index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.\n    *\n    * @param {PIXI.Buffer|number[]} [buffer] - The buffer that holds the data of the index buffer. You can also provide an Array and a buffer will be created from it.\n    * @return - Returns self, useful for chaining.\n    */Geometry.prototype.addIndex=function(buffer){if(!(buffer instanceof Buffer)){// its an array!\nif(buffer instanceof Array){buffer=new Uint16Array(buffer);}buffer=new Buffer(buffer);}buffer.type=BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;this.indexBuffer=buffer;if(this.buffers.indexOf(buffer)===-1){this.buffers.push(buffer);}return this;};/**\n     * Returns the index buffer\n     *\n     * @return - The index buffer.\n     */Geometry.prototype.getIndex=function(){return this.indexBuffer;};/**\n     * This function modifies the structure so that all current attributes become interleaved into a single buffer\n     * This can be useful if your model remains static as it offers a little performance boost\n     *\n     * @return - Returns self, useful for chaining.\n     */Geometry.prototype.interleave=function(){// a simple check to see if buffers are already interleaved..\nif(this.buffers.length===1||this.buffers.length===2&&this.indexBuffer){return this;}// assume already that no buffers are interleaved\nvar arrays=[];var sizes=[];var interleavedBuffer=new Buffer();var i;for(i in this.attributes){var attribute=this.attributes[i];var buffer=this.buffers[attribute.buffer];arrays.push(buffer.data);sizes.push(attribute.size*byteSizeMap[attribute.type]/4);attribute.buffer=0;}interleavedBuffer.data=interleaveTypedArrays(arrays,sizes);for(i=0;i<this.buffers.length;i++){if(this.buffers[i]!==this.indexBuffer){this.buffers[i].destroy();}}this.buffers=[interleavedBuffer];if(this.indexBuffer){this.buffers.push(this.indexBuffer);}return this;};/** Get the size of the geometries, in vertices. */Geometry.prototype.getSize=function(){for(var i in this.attributes){var attribute=this.attributes[i];var buffer=this.buffers[attribute.buffer];return buffer.data.length/(attribute.stride/4||attribute.size);}return 0;};/** Disposes WebGL resources that are connected to this geometry. */Geometry.prototype.dispose=function(){this.disposeRunner.emit(this,false);};/** Destroys the geometry. */Geometry.prototype.destroy=function(){this.dispose();this.buffers=null;this.indexBuffer=null;this.attributes=null;};/**\n     * Returns a clone of the geometry.\n     *\n     * @returns - A new clone of this geometry.\n     */Geometry.prototype.clone=function(){var geometry=new Geometry();for(var i=0;i<this.buffers.length;i++){geometry.buffers[i]=new Buffer(this.buffers[i].data.slice(0));}for(var i in this.attributes){var attrib=this.attributes[i];geometry.attributes[i]=new Attribute(attrib.buffer,attrib.size,attrib.normalized,attrib.type,attrib.stride,attrib.start,attrib.instance);}if(this.indexBuffer){geometry.indexBuffer=geometry.buffers[this.buffers.indexOf(this.indexBuffer)];geometry.indexBuffer.type=BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;}return geometry;};/**\n     * Merges an array of geometries into a new single one.\n     *\n     * Geometry attribute styles must match for this operation to work.\n     *\n     * @param geometries - array of geometries to merge\n     * @return - Shiny new geometry!\n     */Geometry.merge=function(geometries){// todo add a geometry check!\n// also a size check.. cant be too big!]\nvar geometryOut=new Geometry();var arrays=[];var sizes=[];var offsets=[];var geometry;// pass one.. get sizes..\nfor(var i=0;i<geometries.length;i++){geometry=geometries[i];for(var j=0;j<geometry.buffers.length;j++){sizes[j]=sizes[j]||0;sizes[j]+=geometry.buffers[j].data.length;offsets[j]=0;}}// build the correct size arrays..\nfor(var i=0;i<geometry.buffers.length;i++){// TODO types!\narrays[i]=new map$1[getBufferType(geometry.buffers[i].data)](sizes[i]);geometryOut.buffers[i]=new Buffer(arrays[i]);}// pass to set data..\nfor(var i=0;i<geometries.length;i++){geometry=geometries[i];for(var j=0;j<geometry.buffers.length;j++){arrays[j].set(geometry.buffers[j].data,offsets[j]);offsets[j]+=geometry.buffers[j].data.length;}}geometryOut.attributes=geometry.attributes;if(geometry.indexBuffer){geometryOut.indexBuffer=geometryOut.buffers[geometry.buffers.indexOf(geometry.indexBuffer)];geometryOut.indexBuffer.type=BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;var offset=0;var stride=0;var offset2=0;var bufferIndexToCount=0;// get a buffer\nfor(var i=0;i<geometry.buffers.length;i++){if(geometry.buffers[i]!==geometry.indexBuffer){bufferIndexToCount=i;break;}}// figure out the stride of one buffer..\nfor(var i in geometry.attributes){var attribute=geometry.attributes[i];if((attribute.buffer|0)===bufferIndexToCount){stride+=attribute.size*byteSizeMap[attribute.type]/4;}}// time to off set all indexes..\nfor(var i=0;i<geometries.length;i++){var indexBufferData=geometries[i].indexBuffer.data;for(var j=0;j<indexBufferData.length;j++){geometryOut.indexBuffer.data[j+offset2]+=offset;}offset+=geometries[i].buffers[bufferIndexToCount].data.length/stride;offset2+=indexBufferData.length;}}return geometryOut;};return Geometry;}();/**\n * Helper class to create a quad\n *\n * @memberof PIXI\n */var Quad=/** @class */function(_super){__extends(Quad,_super);function Quad(){var _this=_super.call(this)||this;_this.addAttribute('aVertexPosition',new Float32Array([0,0,1,0,1,1,0,1])).addIndex([0,1,3,2]);return _this;}return Quad;}(Geometry);/**\n * Helper class to create a quad with uvs like in v4\n *\n * @memberof PIXI\n */var QuadUv=/** @class */function(_super){__extends(QuadUv,_super);function QuadUv(){var _this=_super.call(this)||this;_this.vertices=new Float32Array([-1,-1,1,-1,1,1,-1,1]);_this.uvs=new Float32Array([0,0,1,0,1,1,0,1]);_this.vertexBuffer=new Buffer(_this.vertices);_this.uvBuffer=new Buffer(_this.uvs);_this.addAttribute('aVertexPosition',_this.vertexBuffer).addAttribute('aTextureCoord',_this.uvBuffer).addIndex([0,1,2,0,2,3]);return _this;}/**\n     * Maps two Rectangle to the quad.\n     *\n     * @param targetTextureFrame - The first rectangle\n     * @param destinationFrame - The second rectangle\n     * @return - Returns itself.\n     */QuadUv.prototype.map=function(targetTextureFrame,destinationFrame){var x=0;// destinationFrame.x / targetTextureFrame.width;\nvar y=0;// destinationFrame.y / targetTextureFrame.height;\nthis.uvs[0]=x;this.uvs[1]=y;this.uvs[2]=x+destinationFrame.width/targetTextureFrame.width;this.uvs[3]=y;this.uvs[4]=x+destinationFrame.width/targetTextureFrame.width;this.uvs[5]=y+destinationFrame.height/targetTextureFrame.height;this.uvs[6]=x;this.uvs[7]=y+destinationFrame.height/targetTextureFrame.height;x=destinationFrame.x;y=destinationFrame.y;this.vertices[0]=x;this.vertices[1]=y;this.vertices[2]=x+destinationFrame.width;this.vertices[3]=y;this.vertices[4]=x+destinationFrame.width;this.vertices[5]=y+destinationFrame.height;this.vertices[6]=x;this.vertices[7]=y+destinationFrame.height;this.invalidate();return this;};/**\n     * Legacy upload method, just marks buffers dirty.\n     *\n     * @returns - Returns itself.\n     */QuadUv.prototype.invalidate=function(){this.vertexBuffer._updateID++;this.uvBuffer._updateID++;return this;};return QuadUv;}(Geometry);var UID$2=0;/**\n * Uniform group holds uniform map and some ID's for work\n *\n * `UniformGroup` has two modes:\n *\n * 1: Normal mode\n * Normal mode will upload the uniforms with individual function calls as required\n *\n * 2: Uniform buffer mode\n * This mode will treat the uniforms as a uniform buffer. You can pass in either a buffer that you manually handle, or\n * or a generic object that PixiJS will automatically map to a buffer for you.\n * For maximum benefits, make Ubo UniformGroups static, and only update them each frame.\n *\n * Rules of UBOs:\n * - UBOs only work with WebGL2, so make sure you have a fallback!\n * - Only floats are supported (including vec[2,3,4], mat[2,3,4])\n * - Samplers cannot be used in ubo's (a GPU limitation)\n * - You must ensure that the object you pass in exactly matches in the shader ubo structure.\n * Otherwise, weirdness will ensue!\n * - The name of the ubo object added to the group must match exactly the name of the ubo in the shader.\n *\n * ```\n * // ubo in shader:\n * uniform myCoolData { // declaring a ubo..\n * mat4 uCoolMatrix;\n * float uFloatyMcFloatFace\n *\n *\n * // a new uniform buffer object..\n * const myCoolData = new UniformBufferGroup({\n *   uCoolMatrix: new Matrix(),\n *   uFloatyMcFloatFace: 23,\n * }}\n *\n * // build a shader...\n * const shader = Shader.from(srcVert, srcFrag, {\n *   myCoolData // name matches the ubo name in the shader. will be processed accordingly.\n * })\n *\n *  ```\n *\n * @memberof PIXI\n */var UniformGroup=/** @class */function(){/**\n     * @param {object | Buffer} [uniforms] - Custom uniforms to use to augment the built-in ones. Or a pixi buffer.\n     * @param isStatic - Uniforms wont be changed after creation.\n     * @param isUbo - If true, will treat this uniform group as a uniform buffer object.\n     */function UniformGroup(uniforms,isStatic,isUbo){this.group=true;// lets generate this when the shader ?\nthis.syncUniforms={};this.dirtyId=0;this.id=UID$2++;this.static=!!isStatic;this.ubo=!!isUbo;if(uniforms instanceof Buffer){this.buffer=uniforms;this.buffer.type=BUFFER_TYPE.UNIFORM_BUFFER;this.autoManage=false;this.ubo=true;}else{this.uniforms=uniforms;if(this.ubo){this.buffer=new Buffer(new Float32Array(1));this.buffer.type=BUFFER_TYPE.UNIFORM_BUFFER;this.autoManage=true;}}}UniformGroup.prototype.update=function(){this.dirtyId++;if(!this.autoManage&&this.buffer){this.buffer.update();}};UniformGroup.prototype.add=function(name,uniforms,_static){if(!this.ubo){this.uniforms[name]=new UniformGroup(uniforms,_static);}else{// eslint-disable-next-line max-len\nthrow new Error('[UniformGroup] uniform groups in ubo mode cannot be modified, or have uniform groups nested in them');}};UniformGroup.from=function(uniforms,_static,_ubo){return new UniformGroup(uniforms,_static,_ubo);};/**\n     * A short hand function for creating a static UBO UniformGroup.\n     *\n     * @param uniforms - the ubo item\n     * @param _static - should this be updated each time it is used? defaults to true here!\n     */UniformGroup.uboFrom=function(uniforms,_static){return new UniformGroup(uniforms,_static!==null&&_static!==void 0?_static:true,true);};return UniformGroup;}();/**\n * System plugin to the renderer to manage filter states.\n *\n * @ignore\n */var FilterState=/** @class */function(){function FilterState(){this.renderTexture=null;this.target=null;this.legacy=false;this.resolution=1;this.multisample=MSAA_QUALITY.NONE;// next three fields are created only for root\n// re-assigned for everything else\nthis.sourceFrame=new Rectangle();this.destinationFrame=new Rectangle();this.bindingSourceFrame=new Rectangle();this.bindingDestinationFrame=new Rectangle();this.filters=[];this.transform=null;}/** Clears the state */FilterState.prototype.clear=function(){this.target=null;this.filters=null;this.renderTexture=null;};return FilterState;}();var tempPoints=[new Point(),new Point(),new Point(),new Point()];var tempMatrix=new Matrix();/**\n * System plugin to the renderer to manage filters.\n *\n * ## Pipeline\n *\n * The FilterSystem executes the filtering pipeline by rendering the display-object into a texture, applying its\n * [filters]{@link PIXI.Filter} in series, and the last filter outputs into the final render-target.\n *\n * The filter-frame is the rectangle in world space being filtered, and those contents are mapped into\n * `(0, 0, filterFrame.width, filterFrame.height)` into the filter render-texture. The filter-frame is also called\n * the source-frame, as it is used to bind the filter render-textures. The last filter outputs to the `filterFrame`\n * in the final render-target.\n *\n * ## Usage\n *\n * {@link PIXI.Container#renderAdvanced} is an example of how to use the filter system. It is a 3 step process:\n *\n * * **push**: Use {@link PIXI.FilterSystem#push} to push the set of filters to be applied on a filter-target.\n * * **render**: Render the contents to be filtered using the renderer. The filter-system will only capture the contents\n *      inside the bounds of the filter-target. NOTE: Using {@link PIXI.Renderer#render} is\n *      illegal during an existing render cycle, and it may reset the filter system.\n * * **pop**: Use {@link PIXI.FilterSystem#pop} to pop & execute the filters you initially pushed. It will apply them\n *      serially and output to the bounds of the filter-target.\n *\n * @memberof PIXI\n */var FilterSystem=/** @class */function(){/**\n     * @param renderer - The renderer this System works for.\n     */function FilterSystem(renderer){this.renderer=renderer;this.defaultFilterStack=[{}];this.texturePool=new RenderTexturePool();this.texturePool.setScreenSize(renderer.view);this.statePool=[];this.quad=new Quad();this.quadUv=new QuadUv();this.tempRect=new Rectangle();this.activeState={};this.globalUniforms=new UniformGroup({outputFrame:new Rectangle(),inputSize:new Float32Array(4),inputPixel:new Float32Array(4),inputClamp:new Float32Array(4),resolution:1,// legacy variables\nfilterArea:new Float32Array(4),filterClamp:new Float32Array(4)},true);this.forceClear=false;this.useMaxPadding=false;}/**\n     * Pushes a set of filters to be applied later to the system. This will redirect further rendering into an\n     * input render-texture for the rest of the filtering pipeline.\n     *\n     * @param {PIXI.DisplayObject} target - The target of the filter to render.\n     * @param filters - The filters to apply.\n     */FilterSystem.prototype.push=function(target,filters){var _a,_b;var renderer=this.renderer;var filterStack=this.defaultFilterStack;var state=this.statePool.pop()||new FilterState();var renderTextureSystem=this.renderer.renderTexture;var resolution=filters[0].resolution;var multisample=filters[0].multisample;var padding=filters[0].padding;var autoFit=filters[0].autoFit;// We don't know whether it's a legacy filter until it was bound for the first time,\n// therefore we have to assume that it is if legacy is undefined.\nvar legacy=(_a=filters[0].legacy)!==null&&_a!==void 0?_a:true;for(var i=1;i<filters.length;i++){var filter=filters[i];// let's use the lowest resolution\nresolution=Math.min(resolution,filter.resolution);// let's use the lowest number of samples\nmultisample=Math.min(multisample,filter.multisample);// figure out the padding required for filters\npadding=this.useMaxPadding// old behavior: use largest amount of padding!\n?Math.max(padding,filter.padding)// new behavior: sum the padding\n:padding+filter.padding;// only auto fit if all filters are autofit\nautoFit=autoFit&&filter.autoFit;legacy=legacy||((_b=filter.legacy)!==null&&_b!==void 0?_b:true);}if(filterStack.length===1){this.defaultFilterStack[0].renderTexture=renderTextureSystem.current;}filterStack.push(state);state.resolution=resolution;state.multisample=multisample;state.legacy=legacy;state.target=target;state.sourceFrame.copyFrom(target.filterArea||target.getBounds(true));state.sourceFrame.pad(padding);if(autoFit){var sourceFrameProjected=this.tempRect.copyFrom(renderTextureSystem.sourceFrame);// Project source frame into world space (if projection is applied)\nif(renderer.projection.transform){this.transformAABB(tempMatrix.copyFrom(renderer.projection.transform).invert(),sourceFrameProjected);}state.sourceFrame.fit(sourceFrameProjected);}// Round sourceFrame in screen space based on render-texture.\nthis.roundFrame(state.sourceFrame,renderTextureSystem.current?renderTextureSystem.current.resolution:renderer.resolution,renderTextureSystem.sourceFrame,renderTextureSystem.destinationFrame,renderer.projection.transform);state.renderTexture=this.getOptimalFilterTexture(state.sourceFrame.width,state.sourceFrame.height,resolution,multisample);state.filters=filters;state.destinationFrame.width=state.renderTexture.width;state.destinationFrame.height=state.renderTexture.height;var destinationFrame=this.tempRect;destinationFrame.x=0;destinationFrame.y=0;destinationFrame.width=state.sourceFrame.width;destinationFrame.height=state.sourceFrame.height;state.renderTexture.filterFrame=state.sourceFrame;state.bindingSourceFrame.copyFrom(renderTextureSystem.sourceFrame);state.bindingDestinationFrame.copyFrom(renderTextureSystem.destinationFrame);state.transform=renderer.projection.transform;renderer.projection.transform=null;renderTextureSystem.bind(state.renderTexture,state.sourceFrame,destinationFrame);renderer.framebuffer.clear(0,0,0,0);};/** Pops off the filter and applies it. */FilterSystem.prototype.pop=function(){var filterStack=this.defaultFilterStack;var state=filterStack.pop();var filters=state.filters;this.activeState=state;var globalUniforms=this.globalUniforms.uniforms;globalUniforms.outputFrame=state.sourceFrame;globalUniforms.resolution=state.resolution;var inputSize=globalUniforms.inputSize;var inputPixel=globalUniforms.inputPixel;var inputClamp=globalUniforms.inputClamp;inputSize[0]=state.destinationFrame.width;inputSize[1]=state.destinationFrame.height;inputSize[2]=1.0/inputSize[0];inputSize[3]=1.0/inputSize[1];inputPixel[0]=Math.round(inputSize[0]*state.resolution);inputPixel[1]=Math.round(inputSize[1]*state.resolution);inputPixel[2]=1.0/inputPixel[0];inputPixel[3]=1.0/inputPixel[1];inputClamp[0]=0.5*inputPixel[2];inputClamp[1]=0.5*inputPixel[3];inputClamp[2]=state.sourceFrame.width*inputSize[2]-0.5*inputPixel[2];inputClamp[3]=state.sourceFrame.height*inputSize[3]-0.5*inputPixel[3];// only update the rect if its legacy..\nif(state.legacy){var filterArea=globalUniforms.filterArea;filterArea[0]=state.destinationFrame.width;filterArea[1]=state.destinationFrame.height;filterArea[2]=state.sourceFrame.x;filterArea[3]=state.sourceFrame.y;globalUniforms.filterClamp=globalUniforms.inputClamp;}this.globalUniforms.update();var lastState=filterStack[filterStack.length-1];this.renderer.framebuffer.blit();if(filters.length===1){filters[0].apply(this,state.renderTexture,lastState.renderTexture,CLEAR_MODES.BLEND,state);this.returnFilterTexture(state.renderTexture);}else{var flip=state.renderTexture;var flop=this.getOptimalFilterTexture(flip.width,flip.height,state.resolution);flop.filterFrame=flip.filterFrame;var i=0;for(i=0;i<filters.length-1;++i){if(i===1&&state.multisample>1){flop=this.getOptimalFilterTexture(flip.width,flip.height,state.resolution);flop.filterFrame=flip.filterFrame;}filters[i].apply(this,flip,flop,CLEAR_MODES.CLEAR,state);var t=flip;flip=flop;flop=t;}filters[i].apply(this,flip,lastState.renderTexture,CLEAR_MODES.BLEND,state);if(i>1&&state.multisample>1){this.returnFilterTexture(state.renderTexture);}this.returnFilterTexture(flip);this.returnFilterTexture(flop);}// lastState.renderTexture is blitted when lastState is popped\nstate.clear();this.statePool.push(state);};/**\n     * Binds a renderTexture with corresponding `filterFrame`, clears it if mode corresponds.\n     *\n     * @param filterTexture - renderTexture to bind, should belong to filter pool or filter stack\n     * @param clearMode - clearMode, by default its CLEAR/YES. See {@link PIXI.CLEAR_MODES}\n     */FilterSystem.prototype.bindAndClear=function(filterTexture,clearMode){if(clearMode===void 0){clearMode=CLEAR_MODES.CLEAR;}var _a=this.renderer,renderTextureSystem=_a.renderTexture,stateSystem=_a.state;if(filterTexture===this.defaultFilterStack[this.defaultFilterStack.length-1].renderTexture){// Restore projection transform if rendering into the output render-target.\nthis.renderer.projection.transform=this.activeState.transform;}else{// Prevent projection within filtering pipeline.\nthis.renderer.projection.transform=null;}if(filterTexture&&filterTexture.filterFrame){var destinationFrame=this.tempRect;destinationFrame.x=0;destinationFrame.y=0;destinationFrame.width=filterTexture.filterFrame.width;destinationFrame.height=filterTexture.filterFrame.height;renderTextureSystem.bind(filterTexture,filterTexture.filterFrame,destinationFrame);}else if(filterTexture!==this.defaultFilterStack[this.defaultFilterStack.length-1].renderTexture){renderTextureSystem.bind(filterTexture);}else{// Restore binding for output render-target.\nthis.renderer.renderTexture.bind(filterTexture,this.activeState.bindingSourceFrame,this.activeState.bindingDestinationFrame);}// Clear the texture in BLIT mode if blending is disabled or the forceClear flag is set. The blending\n// is stored in the 0th bit of the state.\nvar autoClear=stateSystem.stateId&1||this.forceClear;if(clearMode===CLEAR_MODES.CLEAR||clearMode===CLEAR_MODES.BLIT&&autoClear){// Use framebuffer.clear because we want to clear the whole filter texture, not just the filtering\n// area over which the shaders are run. This is because filters may sampling outside of it (e.g. blur)\n// instead of clamping their arithmetic.\nthis.renderer.framebuffer.clear(0,0,0,0);}};/**\n     * Draws a filter using the default rendering process.\n     *\n     * This should be called only by {@link Filter#apply}.\n     *\n     * @param filter - The filter to draw.\n     * @param input - The input render target.\n     * @param output - The target to output to.\n     * @param clearMode - Should the output be cleared before rendering to it\n     */FilterSystem.prototype.applyFilter=function(filter,input,output,clearMode){var renderer=this.renderer;// Set state before binding, so bindAndClear gets the blend mode.\nrenderer.state.set(filter.state);this.bindAndClear(output,clearMode);// set the uniforms..\nfilter.uniforms.uSampler=input;filter.uniforms.filterGlobals=this.globalUniforms;// TODO make it so that the order of this does not matter..\n// because it does at the moment cos of global uniforms.\n// they need to get resynced\nrenderer.shader.bind(filter);// check to see if the filter is a legacy one..\nfilter.legacy=!!filter.program.attributeData.aTextureCoord;if(filter.legacy){this.quadUv.map(input._frame,input.filterFrame);renderer.geometry.bind(this.quadUv);renderer.geometry.draw(DRAW_MODES.TRIANGLES);}else{renderer.geometry.bind(this.quad);renderer.geometry.draw(DRAW_MODES.TRIANGLE_STRIP);}};/**\n     * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n     *\n     * Use `outputMatrix * vTextureCoord` in the shader.\n     *\n     * @param outputMatrix - The matrix to output to.\n     * @param {PIXI.Sprite} sprite - The sprite to map to.\n     * @return The mapped matrix.\n     */FilterSystem.prototype.calculateSpriteMatrix=function(outputMatrix,sprite){var _a=this.activeState,sourceFrame=_a.sourceFrame,destinationFrame=_a.destinationFrame;var orig=sprite._texture.orig;var mappedMatrix=outputMatrix.set(destinationFrame.width,0,0,destinationFrame.height,sourceFrame.x,sourceFrame.y);var worldTransform=sprite.worldTransform.copyTo(Matrix.TEMP_MATRIX);worldTransform.invert();mappedMatrix.prepend(worldTransform);mappedMatrix.scale(1.0/orig.width,1.0/orig.height);mappedMatrix.translate(sprite.anchor.x,sprite.anchor.y);return mappedMatrix;};/** Destroys this Filter System. */FilterSystem.prototype.destroy=function(){this.renderer=null;// Those textures has to be destroyed by RenderTextureSystem or FramebufferSystem\nthis.texturePool.clear(false);};/**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     *\n     * @param minWidth - The minimum width of the render texture in real pixels.\n     * @param minHeight - The minimum height of the render texture in real pixels.\n     * @param resolution - The resolution of the render texture.\n     * @param multisample - Number of samples of the render texture.\n     * @return - The new render texture.\n     */FilterSystem.prototype.getOptimalFilterTexture=function(minWidth,minHeight,resolution,multisample){if(resolution===void 0){resolution=1;}if(multisample===void 0){multisample=MSAA_QUALITY.NONE;}return this.texturePool.getOptimalTexture(minWidth,minHeight,resolution,multisample);};/**\n     * Gets extra render texture to use inside current filter\n     * To be compliant with older filters, you can use params in any order\n     *\n     * @param input - renderTexture from which size and resolution will be copied\n     * @param resolution - override resolution of the renderTexture\n     * @param multisample - number of samples of the renderTexture\n     */FilterSystem.prototype.getFilterTexture=function(input,resolution,multisample){if(typeof input==='number'){var swap=input;input=resolution;resolution=swap;}input=input||this.activeState.renderTexture;var filterTexture=this.texturePool.getOptimalTexture(input.width,input.height,resolution||input.resolution,multisample||MSAA_QUALITY.NONE);filterTexture.filterFrame=input.filterFrame;return filterTexture;};/**\n     * Frees a render texture back into the pool.\n     *\n     * @param renderTexture - The renderTarget to free\n     */FilterSystem.prototype.returnFilterTexture=function(renderTexture){this.texturePool.returnTexture(renderTexture);};/** Empties the texture pool. */FilterSystem.prototype.emptyPool=function(){this.texturePool.clear(true);};/** Calls `texturePool.resize()`, affects fullScreen renderTextures. */FilterSystem.prototype.resize=function(){this.texturePool.setScreenSize(this.renderer.view);};/**\n     * @param matrix - first param\n     * @param rect - second param\n     */FilterSystem.prototype.transformAABB=function(matrix,rect){var lt=tempPoints[0];var lb=tempPoints[1];var rt=tempPoints[2];var rb=tempPoints[3];lt.set(rect.left,rect.top);lb.set(rect.left,rect.bottom);rt.set(rect.right,rect.top);rb.set(rect.right,rect.bottom);matrix.apply(lt,lt);matrix.apply(lb,lb);matrix.apply(rt,rt);matrix.apply(rb,rb);var x0=Math.min(lt.x,lb.x,rt.x,rb.x);var y0=Math.min(lt.y,lb.y,rt.y,rb.y);var x1=Math.max(lt.x,lb.x,rt.x,rb.x);var y1=Math.max(lt.y,lb.y,rt.y,rb.y);rect.x=x0;rect.y=y0;rect.width=x1-x0;rect.height=y1-y0;};FilterSystem.prototype.roundFrame=function(frame,resolution,bindingSourceFrame,bindingDestinationFrame,transform){if(frame.width<=0||frame.height<=0||bindingSourceFrame.width<=0||bindingSourceFrame.height<=0){return;}if(transform){var a=transform.a,b=transform.b,c=transform.c,d=transform.d;// Skip if skew/rotation present in matrix, except for multiple of 90° rotation. If rotation\n// is a multiple of 90°, then either pair of (b,c) or (a,d) will be (0,0).\nif((Math.abs(b)>1e-4||Math.abs(c)>1e-4)&&(Math.abs(a)>1e-4||Math.abs(d)>1e-4)){return;}}transform=transform?tempMatrix.copyFrom(transform):tempMatrix.identity();// Get forward transform from world space to screen space\ntransform.translate(-bindingSourceFrame.x,-bindingSourceFrame.y).scale(bindingDestinationFrame.width/bindingSourceFrame.width,bindingDestinationFrame.height/bindingSourceFrame.height).translate(bindingDestinationFrame.x,bindingDestinationFrame.y);// Convert frame to screen space\nthis.transformAABB(transform,frame);// Round frame in screen space\nframe.ceil(resolution);// Project back into world space.\nthis.transformAABB(transform.invert(),frame);};return FilterSystem;}();/**\n * Base for a common object renderer that can be used as a\n * system renderer plugin.\n *\n * @memberof PIXI\n */var ObjectRenderer=/** @class */function(){/**\n     * @param renderer - The renderer this manager works for.\n     */function ObjectRenderer(renderer){this.renderer=renderer;}/**\n     * Stub method that should be used to empty the current\n     * batch by rendering objects now.\n     */ObjectRenderer.prototype.flush=function(){// flush!\n};/**\n     * Generic destruction method that frees all resources. This\n     * should be called by subclasses.\n     */ObjectRenderer.prototype.destroy=function(){this.renderer=null;};/**\n     * Stub method that initializes any state required before\n     * rendering starts. It is different from the `prerender`\n     * signal, which occurs every frame, in that it is called\n     * whenever an object requests _this_ renderer specifically.\n     */ObjectRenderer.prototype.start=function(){// set the shader..\n};/**\n     * Stops the renderer. It should free up any state and\n     * become dormant.\n     */ObjectRenderer.prototype.stop=function(){this.flush();};/**\n     * Keeps the object to render. It doesn't have to be\n     * rendered immediately.\n     *\n     * @param {PIXI.DisplayObject} object - The object to render.\n     */ObjectRenderer.prototype.render=function(_object){// render the object\n};return ObjectRenderer;}();/**\n * System plugin to the renderer to manage batching.\n *\n * @memberof PIXI\n */var BatchSystem=/** @class */function(){/**\n     * @param renderer - The renderer this System works for.\n     */function BatchSystem(renderer){this.renderer=renderer;this.emptyRenderer=new ObjectRenderer(renderer);this.currentRenderer=this.emptyRenderer;}/**\n     * Changes the current renderer to the one given in parameter\n     *\n     * @param objectRenderer - The object renderer to use.\n     */BatchSystem.prototype.setObjectRenderer=function(objectRenderer){if(this.currentRenderer===objectRenderer){return;}this.currentRenderer.stop();this.currentRenderer=objectRenderer;this.currentRenderer.start();};/**\n     * This should be called if you wish to do some custom rendering\n     * It will basically render anything that may be batched up such as sprites\n     */BatchSystem.prototype.flush=function(){this.setObjectRenderer(this.emptyRenderer);};/**\n     * Reset the system to an empty renderer\n     */BatchSystem.prototype.reset=function(){this.setObjectRenderer(this.emptyRenderer);};/**\n     * Handy function for batch renderers: copies bound textures in first maxTextures locations to array\n     * sets actual _batchLocation for them\n     *\n     * @param arr - arr copy destination\n     * @param maxTextures - number of copied elements\n     */BatchSystem.prototype.copyBoundTextures=function(arr,maxTextures){var boundTextures=this.renderer.texture.boundTextures;for(var i=maxTextures-1;i>=0;--i){arr[i]=boundTextures[i]||null;if(arr[i]){arr[i]._batchLocation=i;}}};/**\n     * Assigns batch locations to textures in array based on boundTextures state.\n     * All textures in texArray should have `_batchEnabled = _batchId`,\n     * and their count should be less than `maxTextures`.\n     *\n     * @param texArray - textures to bound\n     * @param boundTextures - current state of bound textures\n     * @param batchId - marker for _batchEnabled param of textures in texArray\n     * @param maxTextures - number of texture locations to manipulate\n     */BatchSystem.prototype.boundArray=function(texArray,boundTextures,batchId,maxTextures){var elements=texArray.elements,ids=texArray.ids,count=texArray.count;var j=0;for(var i=0;i<count;i++){var tex=elements[i];var loc=tex._batchLocation;if(loc>=0&&loc<maxTextures&&boundTextures[loc]===tex){ids[i]=loc;continue;}while(j<maxTextures){var bound=boundTextures[j];if(bound&&bound._batchEnabled===batchId&&bound._batchLocation===j){j++;continue;}ids[i]=j;tex._batchLocation=j;boundTextures[j]=tex;break;}}};/**\n     * @ignore\n     */BatchSystem.prototype.destroy=function(){this.renderer=null;};return BatchSystem;}();var CONTEXT_UID_COUNTER=0;/**\n * System plugin to the renderer to manage the context.\n *\n * @memberof PIXI\n */var ContextSystem=/** @class */function(){/** @param renderer - The renderer this System works for. */function ContextSystem(renderer){this.renderer=renderer;this.webGLVersion=1;this.extensions={};this.supports={uint32Indices:false};// Bind functions\nthis.handleContextLost=this.handleContextLost.bind(this);this.handleContextRestored=this.handleContextRestored.bind(this);renderer.view.addEventListener('webglcontextlost',this.handleContextLost,false);renderer.view.addEventListener('webglcontextrestored',this.handleContextRestored,false);}Object.defineProperty(ContextSystem.prototype,\"isLost\",{/**\n         * `true` if the context is lost\n         *\n         * @readonly\n         */get:function get(){return!this.gl||this.gl.isContextLost();},enumerable:false,configurable:true});/**\n     * Handles the context change event.\n     *\n     * @param {WebGLRenderingContext} gl - New WebGL context.\n     */ContextSystem.prototype.contextChange=function(gl){this.gl=gl;this.renderer.gl=gl;this.renderer.CONTEXT_UID=CONTEXT_UID_COUNTER++;// restore a context if it was previously lost\nif(gl.isContextLost()&&gl.getExtension('WEBGL_lose_context')){gl.getExtension('WEBGL_lose_context').restoreContext();}};/**\n     * Initializes the context.\n     *\n     * @protected\n     * @param {WebGLRenderingContext} gl - WebGL context\n     */ContextSystem.prototype.initFromContext=function(gl){this.gl=gl;this.validateContext(gl);this.renderer.gl=gl;this.renderer.CONTEXT_UID=CONTEXT_UID_COUNTER++;this.renderer.runners.contextChange.emit(gl);};/**\n     * Initialize from context options\n     *\n     * @protected\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\n     * @param {object} options - context attributes\n     */ContextSystem.prototype.initFromOptions=function(options){var gl=this.createContext(this.renderer.view,options);this.initFromContext(gl);};/**\n     * Helper class to create a WebGL Context\n     *\n     * @param canvas - the canvas element that we will get the context from\n     * @param options - An options object that gets passed in to the canvas element containing the\n     *    context attributes\n     * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext\n     * @return {WebGLRenderingContext} the WebGL context\n     */ContextSystem.prototype.createContext=function(canvas,options){var gl;if(settings.PREFER_ENV>=ENV.WEBGL2){gl=canvas.getContext('webgl2',options);}if(gl){this.webGLVersion=2;}else{this.webGLVersion=1;gl=canvas.getContext('webgl',options)||canvas.getContext('experimental-webgl',options);if(!gl){// fail, not able to get a context\nthrow new Error('This browser does not support WebGL. Try using the canvas renderer');}}this.gl=gl;this.getExtensions();return this.gl;};/** Auto-populate the {@link PIXI.ContextSystem.extensions extensions}. */ContextSystem.prototype.getExtensions=function(){// time to set up default extensions that Pixi uses.\nvar gl=this.gl;var common={anisotropicFiltering:gl.getExtension('EXT_texture_filter_anisotropic'),floatTextureLinear:gl.getExtension('OES_texture_float_linear'),s3tc:gl.getExtension('WEBGL_compressed_texture_s3tc'),s3tc_sRGB:gl.getExtension('WEBGL_compressed_texture_s3tc_srgb'),etc:gl.getExtension('WEBGL_compressed_texture_etc'),etc1:gl.getExtension('WEBGL_compressed_texture_etc1'),pvrtc:gl.getExtension('WEBGL_compressed_texture_pvrtc')||gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),atc:gl.getExtension('WEBGL_compressed_texture_atc'),astc:gl.getExtension('WEBGL_compressed_texture_astc')};if(this.webGLVersion===1){Object.assign(this.extensions,common,{drawBuffers:gl.getExtension('WEBGL_draw_buffers'),depthTexture:gl.getExtension('WEBGL_depth_texture'),loseContext:gl.getExtension('WEBGL_lose_context'),vertexArrayObject:gl.getExtension('OES_vertex_array_object')||gl.getExtension('MOZ_OES_vertex_array_object')||gl.getExtension('WEBKIT_OES_vertex_array_object'),uint32ElementIndex:gl.getExtension('OES_element_index_uint'),// Floats and half-floats\nfloatTexture:gl.getExtension('OES_texture_float'),floatTextureLinear:gl.getExtension('OES_texture_float_linear'),textureHalfFloat:gl.getExtension('OES_texture_half_float'),textureHalfFloatLinear:gl.getExtension('OES_texture_half_float_linear')});}else if(this.webGLVersion===2){Object.assign(this.extensions,common,{// Floats and half-floats\ncolorBufferFloat:gl.getExtension('EXT_color_buffer_float')});}};/**\n     * Handles a lost webgl context\n     *\n     * @param {WebGLContextEvent} event - The context lost event.\n     */ContextSystem.prototype.handleContextLost=function(event){event.preventDefault();};/** Handles a restored webgl context. */ContextSystem.prototype.handleContextRestored=function(){this.renderer.runners.contextChange.emit(this.gl);};ContextSystem.prototype.destroy=function(){var view=this.renderer.view;this.renderer=null;// remove listeners\nview.removeEventListener('webglcontextlost',this.handleContextLost);view.removeEventListener('webglcontextrestored',this.handleContextRestored);this.gl.useProgram(null);if(this.extensions.loseContext){this.extensions.loseContext.loseContext();}};/** Handle the post-render runner event. */ContextSystem.prototype.postrender=function(){if(this.renderer.renderingToScreen){this.gl.flush();}};/**\n     * Validate context.\n     *\n     * @param {WebGLRenderingContext} gl - Render context.\n     */ContextSystem.prototype.validateContext=function(gl){var attributes=gl.getContextAttributes();var isWebGl2='WebGL2RenderingContext'in globalThis&&gl instanceof globalThis.WebGL2RenderingContext;if(isWebGl2){this.webGLVersion=2;}// this is going to be fairly simple for now.. but at least we have room to grow!\nif(!attributes.stencil){/* eslint-disable max-len, no-console */console.warn('Provided WebGL context does not have a stencil buffer, masks may not render correctly');/* eslint-enable max-len, no-console */}var hasuint32=isWebGl2||!!gl.getExtension('OES_element_index_uint');this.supports.uint32Indices=hasuint32;if(!hasuint32){/* eslint-disable max-len, no-console */console.warn('Provided WebGL context does not support 32 index buffer, complex graphics may not render correctly');/* eslint-enable max-len, no-console */}};return ContextSystem;}();/**\n * Internal framebuffer for WebGL context.\n *\n * @memberof PIXI\n */var GLFramebuffer=/** @class */function(){function GLFramebuffer(framebuffer){this.framebuffer=framebuffer;this.stencil=null;this.dirtyId=-1;this.dirtyFormat=-1;this.dirtySize=-1;this.multisample=MSAA_QUALITY.NONE;this.msaaBuffer=null;this.blitFramebuffer=null;this.mipLevel=0;}return GLFramebuffer;}();var tempRectangle=new Rectangle();/**\n * System plugin to the renderer to manage framebuffers.\n *\n * @memberof PIXI\n */var FramebufferSystem=/** @class */function(){/**\n     * @param renderer - The renderer this System works for.\n     */function FramebufferSystem(renderer){this.renderer=renderer;this.managedFramebuffers=[];this.unknownFramebuffer=new Framebuffer(10,10);this.msaaSamples=null;}/** Sets up the renderer context and necessary buffers. */FramebufferSystem.prototype.contextChange=function(){var gl=this.gl=this.renderer.gl;this.CONTEXT_UID=this.renderer.CONTEXT_UID;this.current=this.unknownFramebuffer;this.viewport=new Rectangle();this.hasMRT=true;this.writeDepthTexture=true;this.disposeAll(true);// webgl2\nif(this.renderer.context.webGLVersion===1){// webgl 1!\nvar nativeDrawBuffersExtension_1=this.renderer.context.extensions.drawBuffers;var nativeDepthTextureExtension=this.renderer.context.extensions.depthTexture;if(settings.PREFER_ENV===ENV.WEBGL_LEGACY){nativeDrawBuffersExtension_1=null;nativeDepthTextureExtension=null;}if(nativeDrawBuffersExtension_1){gl.drawBuffers=function(activeTextures){return nativeDrawBuffersExtension_1.drawBuffersWEBGL(activeTextures);};}else{this.hasMRT=false;gl.drawBuffers=function(){// empty\n};}if(!nativeDepthTextureExtension){this.writeDepthTexture=false;}}else{// WebGL2\n// cache possible MSAA samples\nthis.msaaSamples=gl.getInternalformatParameter(gl.RENDERBUFFER,gl.RGBA8,gl.SAMPLES);}};/**\n     * Bind a framebuffer.\n     *\n     * @param framebuffer\n     * @param frame - frame, default is framebuffer size\n     * @param mipLevel - optional mip level to set on the framebuffer - defaults to 0\n     */FramebufferSystem.prototype.bind=function(framebuffer,frame,mipLevel){if(mipLevel===void 0){mipLevel=0;}var gl=this.gl;if(framebuffer){// TODO caching layer!\nvar fbo=framebuffer.glFramebuffers[this.CONTEXT_UID]||this.initFramebuffer(framebuffer);if(this.current!==framebuffer){this.current=framebuffer;gl.bindFramebuffer(gl.FRAMEBUFFER,fbo.framebuffer);}// make sure all textures are unbound..\nif(fbo.mipLevel!==mipLevel){framebuffer.dirtyId++;framebuffer.dirtyFormat++;fbo.mipLevel=mipLevel;}// now check for updates...\nif(fbo.dirtyId!==framebuffer.dirtyId){fbo.dirtyId=framebuffer.dirtyId;if(fbo.dirtyFormat!==framebuffer.dirtyFormat){fbo.dirtyFormat=framebuffer.dirtyFormat;fbo.dirtySize=framebuffer.dirtySize;this.updateFramebuffer(framebuffer,mipLevel);}else if(fbo.dirtySize!==framebuffer.dirtySize){fbo.dirtySize=framebuffer.dirtySize;this.resizeFramebuffer(framebuffer);}}for(var i=0;i<framebuffer.colorTextures.length;i++){var tex=framebuffer.colorTextures[i];this.renderer.texture.unbind(tex.parentTextureArray||tex);}if(framebuffer.depthTexture){this.renderer.texture.unbind(framebuffer.depthTexture);}if(frame){var mipWidth=frame.width>>mipLevel;var mipHeight=frame.height>>mipLevel;var scale=mipWidth/frame.width;this.setViewport(frame.x*scale,frame.y*scale,mipWidth,mipHeight);}else{var mipWidth=framebuffer.width>>mipLevel;var mipHeight=framebuffer.height>>mipLevel;this.setViewport(0,0,mipWidth,mipHeight);}}else{if(this.current){this.current=null;gl.bindFramebuffer(gl.FRAMEBUFFER,null);}if(frame){this.setViewport(frame.x,frame.y,frame.width,frame.height);}else{this.setViewport(0,0,this.renderer.width,this.renderer.height);}}};/**\n     * Set the WebGLRenderingContext's viewport.\n     *\n     * @param x - X position of viewport\n     * @param y - Y position of viewport\n     * @param width - Width of viewport\n     * @param height - Height of viewport\n     */FramebufferSystem.prototype.setViewport=function(x,y,width,height){var v=this.viewport;x=Math.round(x);y=Math.round(y);width=Math.round(width);height=Math.round(height);if(v.width!==width||v.height!==height||v.x!==x||v.y!==y){v.x=x;v.y=y;v.width=width;v.height=height;this.gl.viewport(x,y,width,height);}};Object.defineProperty(FramebufferSystem.prototype,\"size\",{/**\n         * Get the size of the current width and height. Returns object with `width` and `height` values.\n         *\n         * @readonly\n         */get:function get(){if(this.current){// TODO store temp\nreturn{x:0,y:0,width:this.current.width,height:this.current.height};}return{x:0,y:0,width:this.renderer.width,height:this.renderer.height};},enumerable:false,configurable:true});/**\n     * Clear the color of the context\n     *\n     * @param r - Red value from 0 to 1\n     * @param g - Green value from 0 to 1\n     * @param b - Blue value from 0 to 1\n     * @param a - Alpha value from 0 to 1\n     * @param {PIXI.BUFFER_BITS} [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks\n     *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.\n     */FramebufferSystem.prototype.clear=function(r,g,b,a,mask){if(mask===void 0){mask=BUFFER_BITS.COLOR|BUFFER_BITS.DEPTH;}var gl=this.gl;// TODO clear color can be set only one right?\ngl.clearColor(r,g,b,a);gl.clear(mask);};/**\n     * Initialize framebuffer for this context\n     *\n     * @protected\n     * @param framebuffer\n     * @returns - created GLFramebuffer\n     */FramebufferSystem.prototype.initFramebuffer=function(framebuffer){var gl=this.gl;var fbo=new GLFramebuffer(gl.createFramebuffer());fbo.multisample=this.detectSamples(framebuffer.multisample);framebuffer.glFramebuffers[this.CONTEXT_UID]=fbo;this.managedFramebuffers.push(framebuffer);framebuffer.disposeRunner.add(this);return fbo;};/**\n     * Resize the framebuffer\n     *\n     * @protected\n     */FramebufferSystem.prototype.resizeFramebuffer=function(framebuffer){var gl=this.gl;var fbo=framebuffer.glFramebuffers[this.CONTEXT_UID];if(fbo.msaaBuffer){gl.bindRenderbuffer(gl.RENDERBUFFER,fbo.msaaBuffer);gl.renderbufferStorageMultisample(gl.RENDERBUFFER,fbo.multisample,gl.RGBA8,framebuffer.width,framebuffer.height);}if(fbo.stencil){gl.bindRenderbuffer(gl.RENDERBUFFER,fbo.stencil);if(fbo.msaaBuffer){gl.renderbufferStorageMultisample(gl.RENDERBUFFER,fbo.multisample,gl.DEPTH24_STENCIL8,framebuffer.width,framebuffer.height);}else{gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_STENCIL,framebuffer.width,framebuffer.height);}}var colorTextures=framebuffer.colorTextures;var count=colorTextures.length;if(!gl.drawBuffers){count=Math.min(count,1);}for(var i=0;i<count;i++){var texture=colorTextures[i];var parentTexture=texture.parentTextureArray||texture;this.renderer.texture.bind(parentTexture,0);}if(framebuffer.depthTexture&&this.writeDepthTexture){this.renderer.texture.bind(framebuffer.depthTexture,0);}};/**\n     * Update the framebuffer\n     *\n     * @protected\n     */FramebufferSystem.prototype.updateFramebuffer=function(framebuffer,mipLevel){var gl=this.gl;var fbo=framebuffer.glFramebuffers[this.CONTEXT_UID];// bind the color texture\nvar colorTextures=framebuffer.colorTextures;var count=colorTextures.length;if(!gl.drawBuffers){count=Math.min(count,1);}if(fbo.multisample>1&&this.canMultisampleFramebuffer(framebuffer)){fbo.msaaBuffer=fbo.msaaBuffer||gl.createRenderbuffer();gl.bindRenderbuffer(gl.RENDERBUFFER,fbo.msaaBuffer);gl.renderbufferStorageMultisample(gl.RENDERBUFFER,fbo.multisample,gl.RGBA8,framebuffer.width,framebuffer.height);gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.RENDERBUFFER,fbo.msaaBuffer);}else if(fbo.msaaBuffer){gl.deleteRenderbuffer(fbo.msaaBuffer);fbo.msaaBuffer=null;if(fbo.blitFramebuffer){fbo.blitFramebuffer.dispose();fbo.blitFramebuffer=null;}}var activeTextures=[];for(var i=0;i<count;i++){var texture=colorTextures[i];var parentTexture=texture.parentTextureArray||texture;this.renderer.texture.bind(parentTexture,0);if(i===0&&fbo.msaaBuffer){continue;}gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0+i,texture.target,parentTexture._glTextures[this.CONTEXT_UID].texture,mipLevel);activeTextures.push(gl.COLOR_ATTACHMENT0+i);}if(activeTextures.length>1){gl.drawBuffers(activeTextures);}if(framebuffer.depthTexture){var writeDepthTexture=this.writeDepthTexture;if(writeDepthTexture){var depthTexture=framebuffer.depthTexture;this.renderer.texture.bind(depthTexture,0);gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.TEXTURE_2D,depthTexture._glTextures[this.CONTEXT_UID].texture,mipLevel);}}if((framebuffer.stencil||framebuffer.depth)&&!(framebuffer.depthTexture&&this.writeDepthTexture)){fbo.stencil=fbo.stencil||gl.createRenderbuffer();gl.bindRenderbuffer(gl.RENDERBUFFER,fbo.stencil);if(fbo.msaaBuffer){gl.renderbufferStorageMultisample(gl.RENDERBUFFER,fbo.multisample,gl.DEPTH24_STENCIL8,framebuffer.width,framebuffer.height);}else{gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_STENCIL,framebuffer.width,framebuffer.height);}gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,fbo.stencil);}else if(fbo.stencil){gl.deleteRenderbuffer(fbo.stencil);fbo.stencil=null;}};/** Returns true if the frame buffer can be multisampled. */FramebufferSystem.prototype.canMultisampleFramebuffer=function(framebuffer){return this.renderer.context.webGLVersion!==1&&framebuffer.colorTextures.length<=1&&!framebuffer.depthTexture;};/**\n     * Detects number of samples that is not more than a param but as close to it as possible\n     *\n     * @param samples - number of samples\n     * @returns - recommended number of samples\n     */FramebufferSystem.prototype.detectSamples=function(samples){var msaaSamples=this.msaaSamples;var res=MSAA_QUALITY.NONE;if(samples<=1||msaaSamples===null){return res;}for(var i=0;i<msaaSamples.length;i++){if(msaaSamples[i]<=samples){res=msaaSamples[i];break;}}if(res===1){res=MSAA_QUALITY.NONE;}return res;};/**\n     * Only works with WebGL2\n     *\n     * blits framebuffer to another of the same or bigger size\n     * after that target framebuffer is bound\n     *\n     * Fails with WebGL warning if blits multisample framebuffer to different size\n     *\n     * @param framebuffer - by default it blits \"into itself\", from renderBuffer to texture.\n     * @param sourcePixels - source rectangle in pixels\n     * @param destPixels - dest rectangle in pixels, assumed to be the same as sourcePixels\n     */FramebufferSystem.prototype.blit=function(framebuffer,sourcePixels,destPixels){var _a=this,current=_a.current,renderer=_a.renderer,gl=_a.gl,CONTEXT_UID=_a.CONTEXT_UID;if(renderer.context.webGLVersion!==2){return;}if(!current){return;}var fbo=current.glFramebuffers[CONTEXT_UID];if(!fbo){return;}if(!framebuffer){if(!fbo.msaaBuffer){return;}var colorTexture=current.colorTextures[0];if(!colorTexture){return;}if(!fbo.blitFramebuffer){fbo.blitFramebuffer=new Framebuffer(current.width,current.height);fbo.blitFramebuffer.addColorTexture(0,colorTexture);}framebuffer=fbo.blitFramebuffer;if(framebuffer.colorTextures[0]!==colorTexture){framebuffer.colorTextures[0]=colorTexture;framebuffer.dirtyId++;framebuffer.dirtyFormat++;}if(framebuffer.width!==current.width||framebuffer.height!==current.height){framebuffer.width=current.width;framebuffer.height=current.height;framebuffer.dirtyId++;framebuffer.dirtySize++;}}if(!sourcePixels){sourcePixels=tempRectangle;sourcePixels.width=current.width;sourcePixels.height=current.height;}if(!destPixels){destPixels=sourcePixels;}var sameSize=sourcePixels.width===destPixels.width&&sourcePixels.height===destPixels.height;this.bind(framebuffer);gl.bindFramebuffer(gl.READ_FRAMEBUFFER,fbo.framebuffer);gl.blitFramebuffer(sourcePixels.left,sourcePixels.top,sourcePixels.right,sourcePixels.bottom,destPixels.left,destPixels.top,destPixels.right,destPixels.bottom,gl.COLOR_BUFFER_BIT,sameSize?gl.NEAREST:gl.LINEAR);};/**\n     * Disposes framebuffer.\n     *\n     * @param framebuffer - framebuffer that has to be disposed of\n     * @param contextLost - If context was lost, we suppress all delete function calls\n     */FramebufferSystem.prototype.disposeFramebuffer=function(framebuffer,contextLost){var fbo=framebuffer.glFramebuffers[this.CONTEXT_UID];var gl=this.gl;if(!fbo){return;}delete framebuffer.glFramebuffers[this.CONTEXT_UID];var index=this.managedFramebuffers.indexOf(framebuffer);if(index>=0){this.managedFramebuffers.splice(index,1);}framebuffer.disposeRunner.remove(this);if(!contextLost){gl.deleteFramebuffer(fbo.framebuffer);if(fbo.msaaBuffer){gl.deleteRenderbuffer(fbo.msaaBuffer);}if(fbo.stencil){gl.deleteRenderbuffer(fbo.stencil);}}if(fbo.blitFramebuffer){fbo.blitFramebuffer.dispose();}};/**\n     * Disposes all framebuffers, but not textures bound to them.\n     *\n     * @param [contextLost=false] - If context was lost, we suppress all delete function calls\n     */FramebufferSystem.prototype.disposeAll=function(contextLost){var list=this.managedFramebuffers;this.managedFramebuffers=[];for(var i=0;i<list.length;i++){this.disposeFramebuffer(list[i],contextLost);}};/**\n     * Forcing creation of stencil buffer for current framebuffer, if it wasn't done before.\n     * Used by MaskSystem, when its time to use stencil mask for Graphics element.\n     *\n     * Its an alternative for public lazy `framebuffer.enableStencil`, in case we need stencil without rebind.\n     *\n     * @private\n     */FramebufferSystem.prototype.forceStencil=function(){var framebuffer=this.current;if(!framebuffer){return;}var fbo=framebuffer.glFramebuffers[this.CONTEXT_UID];if(!fbo||fbo.stencil){return;}framebuffer.stencil=true;var w=framebuffer.width;var h=framebuffer.height;var gl=this.gl;var stencil=gl.createRenderbuffer();gl.bindRenderbuffer(gl.RENDERBUFFER,stencil);if(fbo.msaaBuffer){gl.renderbufferStorageMultisample(gl.RENDERBUFFER,fbo.multisample,gl.DEPTH24_STENCIL8,w,h);}else{gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_STENCIL,w,h);}fbo.stencil=stencil;gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,stencil);};/**\n     * Resets framebuffer stored state, binds screen framebuffer.\n     *\n     * Should be called before renderTexture reset().\n     */FramebufferSystem.prototype.reset=function(){this.current=this.unknownFramebuffer;this.viewport=new Rectangle();};FramebufferSystem.prototype.destroy=function(){this.renderer=null;};return FramebufferSystem;}();var byteSizeMap$1={5126:4,5123:2,5121:1};/**\n * System plugin to the renderer to manage geometry.\n *\n * @memberof PIXI\n */var GeometrySystem=/** @class */function(){/** @param renderer - The renderer this System works for. */function GeometrySystem(renderer){this.renderer=renderer;this._activeGeometry=null;this._activeVao=null;this.hasVao=true;this.hasInstance=true;this.canUseUInt32ElementIndex=false;this.managedGeometries={};}/** Sets up the renderer context and necessary buffers. */GeometrySystem.prototype.contextChange=function(){this.disposeAll(true);var gl=this.gl=this.renderer.gl;var context=this.renderer.context;this.CONTEXT_UID=this.renderer.CONTEXT_UID;// webgl2\nif(context.webGLVersion!==2){// webgl 1!\nvar nativeVaoExtension_1=this.renderer.context.extensions.vertexArrayObject;if(settings.PREFER_ENV===ENV.WEBGL_LEGACY){nativeVaoExtension_1=null;}if(nativeVaoExtension_1){gl.createVertexArray=function(){return nativeVaoExtension_1.createVertexArrayOES();};gl.bindVertexArray=function(vao){return nativeVaoExtension_1.bindVertexArrayOES(vao);};gl.deleteVertexArray=function(vao){return nativeVaoExtension_1.deleteVertexArrayOES(vao);};}else{this.hasVao=false;gl.createVertexArray=function(){return null;};gl.bindVertexArray=function(){return null;};gl.deleteVertexArray=function(){return null;};}}if(context.webGLVersion!==2){var instanceExt_1=gl.getExtension('ANGLE_instanced_arrays');if(instanceExt_1){gl.vertexAttribDivisor=function(a,b){return instanceExt_1.vertexAttribDivisorANGLE(a,b);};gl.drawElementsInstanced=function(a,b,c,d,e){return instanceExt_1.drawElementsInstancedANGLE(a,b,c,d,e);};gl.drawArraysInstanced=function(a,b,c,d){return instanceExt_1.drawArraysInstancedANGLE(a,b,c,d);};}else{this.hasInstance=false;}}this.canUseUInt32ElementIndex=context.webGLVersion===2||!!context.extensions.uint32ElementIndex;};/**\n     * Binds geometry so that is can be drawn. Creating a Vao if required\n     *\n     * @param geometry - Instance of geometry to bind.\n     * @param shader - Instance of shader to use vao for.\n     */GeometrySystem.prototype.bind=function(geometry,shader){shader=shader||this.renderer.shader.shader;var gl=this.gl;// not sure the best way to address this..\n// currently different shaders require different VAOs for the same geometry\n// Still mulling over the best way to solve this one..\n// will likely need to modify the shader attribute locations at run time!\nvar vaos=geometry.glVertexArrayObjects[this.CONTEXT_UID];var incRefCount=false;if(!vaos){this.managedGeometries[geometry.id]=geometry;geometry.disposeRunner.add(this);geometry.glVertexArrayObjects[this.CONTEXT_UID]=vaos={};incRefCount=true;}var vao=vaos[shader.program.id]||this.initGeometryVao(geometry,shader,incRefCount);this._activeGeometry=geometry;if(this._activeVao!==vao){this._activeVao=vao;if(this.hasVao){gl.bindVertexArray(vao);}else{this.activateVao(geometry,shader.program);}}// TODO - optimise later!\n// don't need to loop through if nothing changed!\n// maybe look to add an 'autoupdate' to geometry?\nthis.updateBuffers();};/** Reset and unbind any active VAO and geometry. */GeometrySystem.prototype.reset=function(){this.unbind();};/** Update buffers of the currently bound geometry. */GeometrySystem.prototype.updateBuffers=function(){var geometry=this._activeGeometry;var bufferSystem=this.renderer.buffer;for(var i=0;i<geometry.buffers.length;i++){var buffer=geometry.buffers[i];bufferSystem.update(buffer);}};/**\n     * Check compatibility between a geometry and a program\n     *\n     * @param geometry - Geometry instance.\n     * @param program - Program instance.\n     */GeometrySystem.prototype.checkCompatibility=function(geometry,program){// geometry must have at least all the attributes that the shader requires.\nvar geometryAttributes=geometry.attributes;var shaderAttributes=program.attributeData;for(var j in shaderAttributes){if(!geometryAttributes[j]){throw new Error(\"shader and geometry incompatible, geometry missing the \\\"\"+j+\"\\\" attribute\");}}};/**\n     * Takes a geometry and program and generates a unique signature for them.\n     *\n     * @param geometry - To get signature from.\n     * @param program - To test geometry against.\n     * @return - Unique signature of the geometry and program\n     */GeometrySystem.prototype.getSignature=function(geometry,program){var attribs=geometry.attributes;var shaderAttributes=program.attributeData;var strings=['g',geometry.id];for(var i in attribs){if(shaderAttributes[i]){strings.push(i,shaderAttributes[i].location);}}return strings.join('-');};/**\n     * Creates or gets Vao with the same structure as the geometry and stores it on the geometry.\n     * If vao is created, it is bound automatically. We use a shader to infer what and how to set up the\n     * attribute locations.\n     *\n     * @param geometry - Instance of geometry to to generate Vao for.\n     * @param shader - Instance of the shader.\n     * @param incRefCount - Increment refCount of all geometry buffers.\n     */GeometrySystem.prototype.initGeometryVao=function(geometry,shader,incRefCount){if(incRefCount===void 0){incRefCount=true;}var gl=this.gl;var CONTEXT_UID=this.CONTEXT_UID;var bufferSystem=this.renderer.buffer;var program=shader.program;if(!program.glPrograms[CONTEXT_UID]){this.renderer.shader.generateProgram(shader);}this.checkCompatibility(geometry,program);var signature=this.getSignature(geometry,program);var vaoObjectHash=geometry.glVertexArrayObjects[this.CONTEXT_UID];var vao=vaoObjectHash[signature];if(vao){// this will give us easy access to the vao\nvaoObjectHash[program.id]=vao;return vao;}var buffers=geometry.buffers;var attributes=geometry.attributes;var tempStride={};var tempStart={};for(var j in buffers){tempStride[j]=0;tempStart[j]=0;}for(var j in attributes){if(!attributes[j].size&&program.attributeData[j]){attributes[j].size=program.attributeData[j].size;}else if(!attributes[j].size){console.warn(\"PIXI Geometry attribute '\"+j+\"' size cannot be determined (likely the bound shader does not have the attribute)\");// eslint-disable-line\n}tempStride[attributes[j].buffer]+=attributes[j].size*byteSizeMap$1[attributes[j].type];}for(var j in attributes){var attribute=attributes[j];var attribSize=attribute.size;if(attribute.stride===undefined){if(tempStride[attribute.buffer]===attribSize*byteSizeMap$1[attribute.type]){attribute.stride=0;}else{attribute.stride=tempStride[attribute.buffer];}}if(attribute.start===undefined){attribute.start=tempStart[attribute.buffer];tempStart[attribute.buffer]+=attribSize*byteSizeMap$1[attribute.type];}}vao=gl.createVertexArray();gl.bindVertexArray(vao);// first update - and create the buffers!\n// only create a gl buffer if it actually gets\nfor(var i=0;i<buffers.length;i++){var buffer=buffers[i];bufferSystem.bind(buffer);if(incRefCount){buffer._glBuffers[CONTEXT_UID].refCount++;}}// TODO - maybe make this a data object?\n// lets wait to see if we need to first!\nthis.activateVao(geometry,program);this._activeVao=vao;// add it to the cache!\nvaoObjectHash[program.id]=vao;vaoObjectHash[signature]=vao;return vao;};/**\n     * Disposes geometry.\n     *\n     * @param geometry - Geometry with buffers. Only VAO will be disposed\n     * @param [contextLost=false] - If context was lost, we suppress deleteVertexArray\n     */GeometrySystem.prototype.disposeGeometry=function(geometry,contextLost){var _a;if(!this.managedGeometries[geometry.id]){return;}delete this.managedGeometries[geometry.id];var vaos=geometry.glVertexArrayObjects[this.CONTEXT_UID];var gl=this.gl;var buffers=geometry.buffers;var bufferSystem=(_a=this.renderer)===null||_a===void 0?void 0:_a.buffer;geometry.disposeRunner.remove(this);if(!vaos){return;}// bufferSystem may have already been destroyed..\n// if this is the case, there is no need to destroy the geometry buffers...\n// they already have been!\nif(bufferSystem){for(var i=0;i<buffers.length;i++){var buf=buffers[i]._glBuffers[this.CONTEXT_UID];// my be null as context may have changed right before the dispose is called\nif(buf){buf.refCount--;if(buf.refCount===0&&!contextLost){bufferSystem.dispose(buffers[i],contextLost);}}}}if(!contextLost){for(var vaoId in vaos){// delete only signatures, everything else are copies\nif(vaoId[0]==='g'){var vao=vaos[vaoId];if(this._activeVao===vao){this.unbind();}gl.deleteVertexArray(vao);}}}delete geometry.glVertexArrayObjects[this.CONTEXT_UID];};/**\n     * Dispose all WebGL resources of all managed geometries.\n     *\n     * @param [contextLost=false] - If context was lost, we suppress `gl.delete` calls\n     */GeometrySystem.prototype.disposeAll=function(contextLost){var all=Object.keys(this.managedGeometries);for(var i=0;i<all.length;i++){this.disposeGeometry(this.managedGeometries[all[i]],contextLost);}};/**\n     * Activate vertex array object.\n     *\n     * @param geometry - Geometry instance.\n     * @param program - Shader program instance.\n     */GeometrySystem.prototype.activateVao=function(geometry,program){var gl=this.gl;var CONTEXT_UID=this.CONTEXT_UID;var bufferSystem=this.renderer.buffer;var buffers=geometry.buffers;var attributes=geometry.attributes;if(geometry.indexBuffer){// first update the index buffer if we have one..\nbufferSystem.bind(geometry.indexBuffer);}var lastBuffer=null;// add a new one!\nfor(var j in attributes){var attribute=attributes[j];var buffer=buffers[attribute.buffer];var glBuffer=buffer._glBuffers[CONTEXT_UID];if(program.attributeData[j]){if(lastBuffer!==glBuffer){bufferSystem.bind(buffer);lastBuffer=glBuffer;}var location=program.attributeData[j].location;// TODO introduce state again\n// we can optimise this for older devices that have no VAOs\ngl.enableVertexAttribArray(location);gl.vertexAttribPointer(location,attribute.size,attribute.type||gl.FLOAT,attribute.normalized,attribute.stride,attribute.start);if(attribute.instance){// TODO calculate instance count based of this...\nif(this.hasInstance){gl.vertexAttribDivisor(location,1);}else{throw new Error('geometry error, GPU Instancing is not supported on this device');}}}}};/**\n     * Draws the currently bound geometry.\n     *\n     * @param type - The type primitive to render.\n     * @param size - The number of elements to be rendered. If not specified, all vertices after the\n     *  starting vertex will be drawn.\n     * @param start - The starting vertex in the geometry to start drawing from. If not specified,\n     *  drawing will start from the first vertex.\n     * @param instanceCount - The number of instances of the set of elements to execute. If not specified,\n     *  all instances will be drawn.\n     */GeometrySystem.prototype.draw=function(type,size,start,instanceCount){var gl=this.gl;var geometry=this._activeGeometry;// TODO.. this should not change so maybe cache the function?\nif(geometry.indexBuffer){var byteSize=geometry.indexBuffer.data.BYTES_PER_ELEMENT;var glType=byteSize===2?gl.UNSIGNED_SHORT:gl.UNSIGNED_INT;if(byteSize===2||byteSize===4&&this.canUseUInt32ElementIndex){if(geometry.instanced){/* eslint-disable max-len */gl.drawElementsInstanced(type,size||geometry.indexBuffer.data.length,glType,(start||0)*byteSize,instanceCount||1);/* eslint-enable max-len */}else{/* eslint-disable max-len */gl.drawElements(type,size||geometry.indexBuffer.data.length,glType,(start||0)*byteSize);/* eslint-enable max-len */}}else{console.warn('unsupported index buffer type: uint32');}}else if(geometry.instanced){// TODO need a better way to calculate size..\ngl.drawArraysInstanced(type,start,size||geometry.getSize(),instanceCount||1);}else{gl.drawArrays(type,start,size||geometry.getSize());}return this;};/** Unbind/reset everything. */GeometrySystem.prototype.unbind=function(){this.gl.bindVertexArray(null);this._activeVao=null;this._activeGeometry=null;};GeometrySystem.prototype.destroy=function(){this.renderer=null;};return GeometrySystem;}();/**\n * Component for masked elements.\n *\n * Holds mask mode and temporary data about current mask.\n *\n * @memberof PIXI\n */var MaskData=/** @class */function(){/**\n     * Create MaskData\n     *\n     * @param {PIXI.DisplayObject} [maskObject=null] - object that describes the mask\n     */function MaskData(maskObject){if(maskObject===void 0){maskObject=null;}this.type=MASK_TYPES.NONE;this.autoDetect=true;this.maskObject=maskObject||null;this.pooled=false;this.isMaskData=true;this.resolution=null;this.multisample=settings.FILTER_MULTISAMPLE;this.enabled=true;this._filters=null;this._stencilCounter=0;this._scissorCounter=0;this._scissorRect=null;this._scissorRectLocal=null;this._target=null;}Object.defineProperty(MaskData.prototype,\"filter\",{/**\n         * The sprite mask filter.\n         * If set to `null`, the default sprite mask filter is used.\n         * @default null\n         */get:function get(){return this._filters?this._filters[0]:null;},set:function set(value){if(value){if(this._filters){this._filters[0]=value;}else{this._filters=[value];}}else{this._filters=null;}},enumerable:false,configurable:true});/** Resets the mask data after popMask(). */MaskData.prototype.reset=function(){if(this.pooled){this.maskObject=null;this.type=MASK_TYPES.NONE;this.autoDetect=true;}this._target=null;this._scissorRectLocal=null;};/** Copies counters from maskData above, called from pushMask(). */MaskData.prototype.copyCountersOrReset=function(maskAbove){if(maskAbove){this._stencilCounter=maskAbove._stencilCounter;this._scissorCounter=maskAbove._scissorCounter;this._scissorRect=maskAbove._scissorRect;}else{this._stencilCounter=0;this._scissorCounter=0;this._scissorRect=null;}};return MaskData;}();/**\n * @private\n * @param {WebGLRenderingContext} gl - The current WebGL context {WebGLProgram}\n * @param {Number} type - the type, can be either VERTEX_SHADER or FRAGMENT_SHADER\n * @param {string} src - The vertex shader source as an array of strings.\n * @return {WebGLShader} the shader\n */function compileShader(gl,type,src){var shader=gl.createShader(type);gl.shaderSource(shader,src);gl.compileShader(shader);return shader;}/**\n * will log a shader error highlighting the lines with the error\n * also will add numbers along the side.\n *\n * @param gl - the WebGLContext\n * @param shader - the shader to log errors for\n */function logPrettyShaderError(gl,shader){var shaderSrc=gl.getShaderSource(shader).split('\\n').map(function(line,index){return index+\": \"+line;});var shaderLog=gl.getShaderInfoLog(shader);var splitShader=shaderLog.split('\\n');var dedupe={};var lineNumbers=splitShader.map(function(line){return parseFloat(line.replace(/^ERROR\\: 0\\:([\\d]+)\\:.*$/,'$1'));}).filter(function(n){if(n&&!dedupe[n]){dedupe[n]=true;return true;}return false;});var logArgs=[''];lineNumbers.forEach(function(number){shaderSrc[number-1]=\"%c\"+shaderSrc[number-1]+\"%c\";logArgs.push('background: #FF0000; color:#FFFFFF; font-size: 10px','font-size: 10px');});var fragmentSourceToLog=shaderSrc.join('\\n');logArgs[0]=fragmentSourceToLog;console.error(shaderLog);// eslint-disable-next-line no-console\nconsole.groupCollapsed('click to view full shader code');console.warn.apply(console,logArgs);// eslint-disable-next-line no-console\nconsole.groupEnd();}/**\n *\n * logs out any program errors\n *\n * @param gl - The current WebGL context\n * @param program - the WebGL program to display errors for\n * @param vertexShader  - the fragment WebGL shader program\n * @param fragmentShader - the vertex WebGL shader program\n */function logProgramError(gl,program,vertexShader,fragmentShader){// if linking fails, then log and cleanup\nif(!gl.getProgramParameter(program,gl.LINK_STATUS)){if(!gl.getShaderParameter(vertexShader,gl.COMPILE_STATUS)){logPrettyShaderError(gl,vertexShader);}if(!gl.getShaderParameter(fragmentShader,gl.COMPILE_STATUS)){logPrettyShaderError(gl,fragmentShader);}console.error('PixiJS Error: Could not initialize shader.');// if there is a program info log, log it\nif(gl.getProgramInfoLog(program)!==''){console.warn('PixiJS Warning: gl.getProgramInfoLog()',gl.getProgramInfoLog(program));}}}function booleanArray(size){var array=new Array(size);for(var i=0;i<array.length;i++){array[i]=false;}return array;}/**\n * @method defaultValue\n * @memberof PIXI.glCore.shader\n * @param {string} type - Type of value\n * @param {number} size\n * @private\n */function defaultValue(type,size){switch(type){case'float':return 0;case'vec2':return new Float32Array(2*size);case'vec3':return new Float32Array(3*size);case'vec4':return new Float32Array(4*size);case'int':case'uint':case'sampler2D':case'sampler2DArray':return 0;case'ivec2':return new Int32Array(2*size);case'ivec3':return new Int32Array(3*size);case'ivec4':return new Int32Array(4*size);case'uvec2':return new Uint32Array(2*size);case'uvec3':return new Uint32Array(3*size);case'uvec4':return new Uint32Array(4*size);case'bool':return false;case'bvec2':return booleanArray(2*size);case'bvec3':return booleanArray(3*size);case'bvec4':return booleanArray(4*size);case'mat2':return new Float32Array([1,0,0,1]);case'mat3':return new Float32Array([1,0,0,0,1,0,0,0,1]);case'mat4':return new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);}return null;}var unknownContext={};var context=unknownContext;/**\n * returns a little WebGL context to use for program inspection.\n *\n * @static\n * @private\n * @returns {WebGLRenderingContext} a gl context to test with\n */function getTestContext(){if(context===unknownContext||context&&context.isContextLost()){var canvas=document.createElement('canvas');var gl=void 0;if(settings.PREFER_ENV>=ENV.WEBGL2){gl=canvas.getContext('webgl2',{});}if(!gl){gl=canvas.getContext('webgl',{})||canvas.getContext('experimental-webgl',{});if(!gl){// fail, not able to get a context\ngl=null;}else{// for shader testing..\ngl.getExtension('WEBGL_draw_buffers');}}context=gl;}return context;}var maxFragmentPrecision;function getMaxFragmentPrecision(){if(!maxFragmentPrecision){maxFragmentPrecision=PRECISION.MEDIUM;var gl=getTestContext();if(gl){if(gl.getShaderPrecisionFormat){var shaderFragment=gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER,gl.HIGH_FLOAT);maxFragmentPrecision=shaderFragment.precision?PRECISION.HIGH:PRECISION.MEDIUM;}}}return maxFragmentPrecision;}/**\n * Sets the float precision on the shader, ensuring the device supports the request precision.\n * If the precision is already present, it just ensures that the device is able to handle it.\n *\n * @private\n * @param {string} src - The shader source\n * @param {PIXI.PRECISION} requestedPrecision - The request float precision of the shader.\n * @param {PIXI.PRECISION} maxSupportedPrecision - The maximum precision the shader supports.\n *\n * @return {string} modified shader source\n */function setPrecision(src,requestedPrecision,maxSupportedPrecision){if(src.substring(0,9)!=='precision'){// no precision supplied, so PixiJS will add the requested level.\nvar precision=requestedPrecision;// If highp is requested but not supported, downgrade precision to a level all devices support.\nif(requestedPrecision===PRECISION.HIGH&&maxSupportedPrecision!==PRECISION.HIGH){precision=PRECISION.MEDIUM;}return\"precision \"+precision+\" float;\\n\"+src;}else if(maxSupportedPrecision!==PRECISION.HIGH&&src.substring(0,15)==='precision highp'){// precision was supplied, but at a level this device does not support, so downgrading to mediump.\nreturn src.replace('precision highp','precision mediump');}return src;}var GLSL_TO_SIZE={float:1,vec2:2,vec3:3,vec4:4,int:1,ivec2:2,ivec3:3,ivec4:4,uint:1,uvec2:2,uvec3:3,uvec4:4,bool:1,bvec2:2,bvec3:3,bvec4:4,mat2:4,mat3:9,mat4:16,sampler2D:1};/**\n * @private\n * @method mapSize\n * @memberof PIXI.glCore.shader\n * @param {String} type\n * @return {Number}\n */function mapSize(type){return GLSL_TO_SIZE[type];}var GL_TABLE=null;var GL_TO_GLSL_TYPES={FLOAT:'float',FLOAT_VEC2:'vec2',FLOAT_VEC3:'vec3',FLOAT_VEC4:'vec4',INT:'int',INT_VEC2:'ivec2',INT_VEC3:'ivec3',INT_VEC4:'ivec4',UNSIGNED_INT:'uint',UNSIGNED_INT_VEC2:'uvec2',UNSIGNED_INT_VEC3:'uvec3',UNSIGNED_INT_VEC4:'uvec4',BOOL:'bool',BOOL_VEC2:'bvec2',BOOL_VEC3:'bvec3',BOOL_VEC4:'bvec4',FLOAT_MAT2:'mat2',FLOAT_MAT3:'mat3',FLOAT_MAT4:'mat4',SAMPLER_2D:'sampler2D',INT_SAMPLER_2D:'sampler2D',UNSIGNED_INT_SAMPLER_2D:'sampler2D',SAMPLER_CUBE:'samplerCube',INT_SAMPLER_CUBE:'samplerCube',UNSIGNED_INT_SAMPLER_CUBE:'samplerCube',SAMPLER_2D_ARRAY:'sampler2DArray',INT_SAMPLER_2D_ARRAY:'sampler2DArray',UNSIGNED_INT_SAMPLER_2D_ARRAY:'sampler2DArray'};// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction mapType(gl,type){if(!GL_TABLE){var typeNames=Object.keys(GL_TO_GLSL_TYPES);GL_TABLE={};for(var i=0;i<typeNames.length;++i){var tn=typeNames[i];GL_TABLE[gl[tn]]=GL_TO_GLSL_TYPES[tn];}}return GL_TABLE[type];}/* eslint-disable @typescript-eslint/explicit-module-boundary-types */ // Parsers, each one of these will take a look at the type of shader property and uniform.\n// if they pass the test function then the code function is called that returns a the shader upload code for that uniform.\n// Shader upload code is automagically generated with these parsers.\n// If no parser is valid then the default upload functions are used.\n// exposing Parsers means that custom upload logic can be added to pixi's shaders.\n// A good example would be a pixi rectangle can be directly set on a uniform.\n// If the shader sees it it knows how to upload the rectangle structure as a vec4\n// format is as follows:\n//\n// {\n//     test: (data, uniform) => {} <--- test is this code should be used for this uniform\n//     code: (name, uniform) => {} <--- returns the string of the piece of code that uploads the uniform\n//     codeUbo: (name, uniform) => {} <--- returns the string of the piece of code that uploads the\n//                                         uniform to a uniform buffer\n// }\nvar uniformParsers=[// a float cache layer\n{test:function test(data){return data.type==='float'&&data.size===1;},code:function code(name){return\"\\n            if(uv[\\\"\"+name+\"\\\"] !== ud[\\\"\"+name+\"\\\"].value)\\n            {\\n                ud[\\\"\"+name+\"\\\"].value = uv[\\\"\"+name+\"\\\"]\\n                gl.uniform1f(ud[\\\"\"+name+\"\\\"].location, uv[\\\"\"+name+\"\\\"])\\n            }\\n            \";}},// handling samplers\n{test:function test(data){// eslint-disable-next-line max-len\nreturn(data.type==='sampler2D'||data.type==='samplerCube'||data.type==='sampler2DArray')&&data.size===1&&!data.isArray;},code:function code(name){return\"t = syncData.textureCount++;\\n\\n            renderer.texture.bind(uv[\\\"\"+name+\"\\\"], t);\\n\\n            if(ud[\\\"\"+name+\"\\\"].value !== t)\\n            {\\n                ud[\\\"\"+name+\"\\\"].value = t;\\n                gl.uniform1i(ud[\\\"\"+name+\"\\\"].location, t);\\n; // eslint-disable-line max-len\\n            }\";}},// uploading pixi matrix object to mat3\n{test:function test(data,uniform){return data.type==='mat3'&&data.size===1&&uniform.a!==undefined;},code:function code(name){// TODO and some smart caching dirty ids here!\nreturn\"\\n            gl.uniformMatrix3fv(ud[\\\"\"+name+\"\\\"].location, false, uv[\\\"\"+name+\"\\\"].toArray(true));\\n            \";},codeUbo:function codeUbo(name){return\"\\n                var \"+name+\"_matrix = uv.\"+name+\".toArray(true);\\n\\n                data[offset] = \"+name+\"_matrix[0];\\n                data[offset+1] = \"+name+\"_matrix[1];\\n                data[offset+2] = \"+name+\"_matrix[2];\\n        \\n                data[offset + 4] = \"+name+\"_matrix[3];\\n                data[offset + 5] = \"+name+\"_matrix[4];\\n                data[offset + 6] = \"+name+\"_matrix[5];\\n        \\n                data[offset + 8] = \"+name+\"_matrix[6];\\n                data[offset + 9] = \"+name+\"_matrix[7];\\n                data[offset + 10] = \"+name+\"_matrix[8];\\n            \";}},// uploading a pixi point as a vec2 with caching layer\n{test:function test(data,uniform){return data.type==='vec2'&&data.size===1&&uniform.x!==undefined;},code:function code(name){return\"\\n                cv = ud[\\\"\"+name+\"\\\"].value;\\n                v = uv[\\\"\"+name+\"\\\"];\\n\\n                if(cv[0] !== v.x || cv[1] !== v.y)\\n                {\\n                    cv[0] = v.x;\\n                    cv[1] = v.y;\\n                    gl.uniform2f(ud[\\\"\"+name+\"\\\"].location, v.x, v.y);\\n                }\";},codeUbo:function codeUbo(name){return\"\\n                v = uv.\"+name+\";\\n\\n                data[offset] = v.x;\\n                data[offset+1] = v.y;\\n            \";}},// caching layer for a vec2\n{test:function test(data){return data.type==='vec2'&&data.size===1;},code:function code(name){return\"\\n                cv = ud[\\\"\"+name+\"\\\"].value;\\n                v = uv[\\\"\"+name+\"\\\"];\\n\\n                if(cv[0] !== v[0] || cv[1] !== v[1])\\n                {\\n                    cv[0] = v[0];\\n                    cv[1] = v[1];\\n                    gl.uniform2f(ud[\\\"\"+name+\"\\\"].location, v[0], v[1]);\\n                }\\n            \";}},// upload a pixi rectangle as a vec4 with caching layer\n{test:function test(data,uniform){return data.type==='vec4'&&data.size===1&&uniform.width!==undefined;},code:function code(name){return\"\\n                cv = ud[\\\"\"+name+\"\\\"].value;\\n                v = uv[\\\"\"+name+\"\\\"];\\n\\n                if(cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height)\\n                {\\n                    cv[0] = v.x;\\n                    cv[1] = v.y;\\n                    cv[2] = v.width;\\n                    cv[3] = v.height;\\n                    gl.uniform4f(ud[\\\"\"+name+\"\\\"].location, v.x, v.y, v.width, v.height)\\n                }\";},codeUbo:function codeUbo(name){return\"\\n                    v = uv.\"+name+\";\\n\\n                    data[offset] = v.x;\\n                    data[offset+1] = v.y;\\n                    data[offset+2] = v.width;\\n                    data[offset+3] = v.height;\\n                \";}},// a caching layer for vec4 uploading\n{test:function test(data){return data.type==='vec4'&&data.size===1;},code:function code(name){return\"\\n                cv = ud[\\\"\"+name+\"\\\"].value;\\n                v = uv[\\\"\"+name+\"\\\"];\\n\\n                if(cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\\n                {\\n                    cv[0] = v[0];\\n                    cv[1] = v[1];\\n                    cv[2] = v[2];\\n                    cv[3] = v[3];\\n\\n                    gl.uniform4f(ud[\\\"\"+name+\"\\\"].location, v[0], v[1], v[2], v[3])\\n                }\";}}];// cu = Cached value's uniform data field\n// cv = Cached value\n// v = value to upload\n// ud = uniformData\n// uv = uniformValue\n// l = location\nvar GLSL_TO_SINGLE_SETTERS_CACHED={float:\"\\n    if (cv !== v)\\n    {\\n        cu.value = v;\\n        gl.uniform1f(location, v);\\n    }\",vec2:\"\\n    if (cv[0] !== v[0] || cv[1] !== v[1])\\n    {\\n        cv[0] = v[0];\\n        cv[1] = v[1];\\n\\n        gl.uniform2f(location, v[0], v[1])\\n    }\",vec3:\"\\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\\n    {\\n        cv[0] = v[0];\\n        cv[1] = v[1];\\n        cv[2] = v[2];\\n\\n        gl.uniform3f(location, v[0], v[1], v[2])\\n    }\",vec4:\"\\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\\n    {\\n        cv[0] = v[0];\\n        cv[1] = v[1];\\n        cv[2] = v[2];\\n        cv[3] = v[3];\\n\\n        gl.uniform4f(location, v[0], v[1], v[2], v[3]);\\n    }\",int:\"\\n    if (cv !== v)\\n    {\\n        cu.value = v;\\n\\n        gl.uniform1i(location, v);\\n    }\",ivec2:\"\\n    if (cv[0] !== v[0] || cv[1] !== v[1])\\n    {\\n        cv[0] = v[0];\\n        cv[1] = v[1];\\n\\n        gl.uniform2i(location, v[0], v[1]);\\n    }\",ivec3:\"\\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\\n    {\\n        cv[0] = v[0];\\n        cv[1] = v[1];\\n        cv[2] = v[2];\\n\\n        gl.uniform3i(location, v[0], v[1], v[2]);\\n    }\",ivec4:\"\\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\\n    {\\n        cv[0] = v[0];\\n        cv[1] = v[1];\\n        cv[2] = v[2];\\n        cv[3] = v[3];\\n\\n        gl.uniform4i(location, v[0], v[1], v[2], v[3]);\\n    }\",uint:\"\\n    if (cv !== v)\\n    {\\n        cu.value = v;\\n\\n        gl.uniform1ui(location, v);\\n    }\",uvec2:\"\\n    if (cv[0] !== v[0] || cv[1] !== v[1])\\n    {\\n        cv[0] = v[0];\\n        cv[1] = v[1];\\n\\n        gl.uniform2ui(location, v[0], v[1]);\\n    }\",uvec3:\"\\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\\n    {\\n        cv[0] = v[0];\\n        cv[1] = v[1];\\n        cv[2] = v[2];\\n\\n        gl.uniform3ui(location, v[0], v[1], v[2]);\\n    }\",uvec4:\"\\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\\n    {\\n        cv[0] = v[0];\\n        cv[1] = v[1];\\n        cv[2] = v[2];\\n        cv[3] = v[3];\\n\\n        gl.uniform4ui(location, v[0], v[1], v[2], v[3]);\\n    }\",bool:\"\\n    if (cv !== v)\\n    {\\n        cu.value = v;\\n        gl.uniform1i(location, v);\\n    }\",bvec2:\"\\n    if (cv[0] != v[0] || cv[1] != v[1])\\n    {\\n        cv[0] = v[0];\\n        cv[1] = v[1];\\n\\n        gl.uniform2i(location, v[0], v[1]);\\n    }\",bvec3:\"\\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\\n    {\\n        cv[0] = v[0];\\n        cv[1] = v[1];\\n        cv[2] = v[2];\\n\\n        gl.uniform3i(location, v[0], v[1], v[2]);\\n    }\",bvec4:\"\\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\\n    {\\n        cv[0] = v[0];\\n        cv[1] = v[1];\\n        cv[2] = v[2];\\n        cv[3] = v[3];\\n\\n        gl.uniform4i(location, v[0], v[1], v[2], v[3]);\\n    }\",mat2:'gl.uniformMatrix2fv(location, false, v)',mat3:'gl.uniformMatrix3fv(location, false, v)',mat4:'gl.uniformMatrix4fv(location, false, v)',sampler2D:'gl.uniform1i(location, v)',samplerCube:'gl.uniform1i(location, v)',sampler2DArray:'gl.uniform1i(location, v)'};var GLSL_TO_ARRAY_SETTERS={float:\"gl.uniform1fv(location, v)\",vec2:\"gl.uniform2fv(location, v)\",vec3:\"gl.uniform3fv(location, v)\",vec4:'gl.uniform4fv(location, v)',mat4:'gl.uniformMatrix4fv(location, false, v)',mat3:'gl.uniformMatrix3fv(location, false, v)',mat2:'gl.uniformMatrix2fv(location, false, v)',int:'gl.uniform1iv(location, v)',ivec2:'gl.uniform2iv(location, v)',ivec3:'gl.uniform3iv(location, v)',ivec4:'gl.uniform4iv(location, v)',uint:'gl.uniform1uiv(location, v)',uvec2:'gl.uniform2uiv(location, v)',uvec3:'gl.uniform3uiv(location, v)',uvec4:'gl.uniform4uiv(location, v)',bool:'gl.uniform1iv(location, v)',bvec2:'gl.uniform2iv(location, v)',bvec3:'gl.uniform3iv(location, v)',bvec4:'gl.uniform4iv(location, v)',sampler2D:'gl.uniform1iv(location, v)',samplerCube:'gl.uniform1iv(location, v)',sampler2DArray:'gl.uniform1iv(location, v)'};function generateUniformsSync(group,uniformData){var _a;var funcFragments=[\"\\n        var v = null;\\n        var cv = null;\\n        var cu = null;\\n        var t = 0;\\n        var gl = renderer.gl;\\n    \"];for(var i in group.uniforms){var data=uniformData[i];if(!data){if((_a=group.uniforms[i])===null||_a===void 0?void 0:_a.group){if(group.uniforms[i].ubo){funcFragments.push(\"\\n                        renderer.shader.syncUniformBufferGroup(uv.\"+i+\", '\"+i+\"');\\n                    \");}else{funcFragments.push(\"\\n                        renderer.shader.syncUniformGroup(uv.\"+i+\", syncData);\\n                    \");}}continue;}var uniform=group.uniforms[i];var parsed=false;for(var j=0;j<uniformParsers.length;j++){if(uniformParsers[j].test(data,uniform)){funcFragments.push(uniformParsers[j].code(i,uniform));parsed=true;break;}}if(!parsed){var templateType=data.size===1?GLSL_TO_SINGLE_SETTERS_CACHED:GLSL_TO_ARRAY_SETTERS;var template=templateType[data.type].replace('location',\"ud[\\\"\"+i+\"\\\"].location\");funcFragments.push(\"\\n            cu = ud[\\\"\"+i+\"\\\"];\\n            cv = cu.value;\\n            v = uv[\\\"\"+i+\"\\\"];\\n            \"+template+\";\");}}/*\n     * the introduction of syncData is to solve an issue where textures in uniform groups are not set correctly\n     * the texture count was always starting from 0 in each group. This needs to increment each time a texture is used\n     * no matter which group is being used\n     *\n     */ // eslint-disable-next-line no-new-func\nreturn new Function('ud','uv','renderer','syncData',funcFragments.join('\\n'));}var fragTemplate=['precision mediump float;','void main(void){','float test = 0.1;','%forloop%','gl_FragColor = vec4(0.0);','}'].join('\\n');function generateIfTestSrc(maxIfs){var src='';for(var i=0;i<maxIfs;++i){if(i>0){src+='\\nelse ';}if(i<maxIfs-1){src+=\"if(test == \"+i+\".0){}\";}}return src;}function checkMaxIfStatementsInShader(maxIfs,gl){if(maxIfs===0){throw new Error('Invalid value of `0` passed to `checkMaxIfStatementsInShader`');}var shader=gl.createShader(gl.FRAGMENT_SHADER);while(true)// eslint-disable-line no-constant-condition\n{var fragmentSrc=fragTemplate.replace(/%forloop%/gi,generateIfTestSrc(maxIfs));gl.shaderSource(shader,fragmentSrc);gl.compileShader(shader);if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)){maxIfs=maxIfs/2|0;}else{// valid!\nbreak;}}return maxIfs;}// Cache the result to prevent running this over and over\nvar unsafeEval;/**\n * Not all platforms allow to generate function code (e.g., `new Function`).\n * this provides the platform-level detection.\n *\n * @private\n * @returns {boolean}\n */function unsafeEvalSupported(){if(typeof unsafeEval==='boolean'){return unsafeEval;}try{/* eslint-disable no-new-func */var func=new Function('param1','param2','param3','return param1[param2] === param3;');/* eslint-enable no-new-func */unsafeEval=func({a:'b'},'a','b')===true;}catch(e){unsafeEval=false;}return unsafeEval;}var defaultFragment=\"varying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\n\\nvoid main(void){\\n   gl_FragColor *= texture2D(uSampler, vTextureCoord);\\n}\";var defaultVertex=\"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void){\\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n   vTextureCoord = aTextureCoord;\\n}\\n\";var UID$3=0;var nameCache={};/**\n * Helper class to create a shader program.\n *\n * @memberof PIXI\n */var Program=/** @class */function(){/**\n     * @param vertexSrc - The source of the vertex shader.\n     * @param fragmentSrc - The source of the fragment shader.\n     * @param name - Name for shader\n     */function Program(vertexSrc,fragmentSrc,name){if(name===void 0){name='pixi-shader';}this.id=UID$3++;this.vertexSrc=vertexSrc||Program.defaultVertexSrc;this.fragmentSrc=fragmentSrc||Program.defaultFragmentSrc;this.vertexSrc=this.vertexSrc.trim();this.fragmentSrc=this.fragmentSrc.trim();if(this.vertexSrc.substring(0,8)!=='#version'){name=name.replace(/\\s+/g,'-');if(nameCache[name]){nameCache[name]++;name+=\"-\"+nameCache[name];}else{nameCache[name]=1;}this.vertexSrc=\"#define SHADER_NAME \"+name+\"\\n\"+this.vertexSrc;this.fragmentSrc=\"#define SHADER_NAME \"+name+\"\\n\"+this.fragmentSrc;this.vertexSrc=setPrecision(this.vertexSrc,settings.PRECISION_VERTEX,PRECISION.HIGH);this.fragmentSrc=setPrecision(this.fragmentSrc,settings.PRECISION_FRAGMENT,getMaxFragmentPrecision());}// currently this does not extract structs only default types\n// this is where we store shader references..\nthis.glPrograms={};this.syncUniforms=null;}Object.defineProperty(Program,\"defaultVertexSrc\",{/**\n         * The default vertex shader source.\n         *\n         * @constant\n         */get:function get(){return defaultVertex;},enumerable:false,configurable:true});Object.defineProperty(Program,\"defaultFragmentSrc\",{/**\n         * The default fragment shader source.\n         *\n         * @constant\n         */get:function get(){return defaultFragment;},enumerable:false,configurable:true});/**\n     * A short hand function to create a program based of a vertex and fragment shader.\n     *\n     * This method will also check to see if there is a cached program.\n     *\n     * @param vertexSrc - The source of the vertex shader.\n     * @param fragmentSrc - The source of the fragment shader.\n     * @param name - Name for shader\n     * @returns A shiny new PixiJS shader program!\n     */Program.from=function(vertexSrc,fragmentSrc,name){var key=vertexSrc+fragmentSrc;var program=ProgramCache[key];if(!program){ProgramCache[key]=program=new Program(vertexSrc,fragmentSrc,name);}return program;};return Program;}();/**\n * A helper class for shaders.\n *\n * @memberof PIXI\n */var Shader=/** @class */function(){/**\n     * @param program - The program the shader will use.\n     * @param uniforms - Custom uniforms to use to augment the built-in ones.\n     */function Shader(program,uniforms){/**\n         * Used internally to bind uniform buffer objects.\n         * @ignore\n         */this.uniformBindCount=0;this.program=program;// lets see whats been passed in\n// uniforms should be converted to a uniform group\nif(uniforms){if(uniforms instanceof UniformGroup){this.uniformGroup=uniforms;}else{this.uniformGroup=new UniformGroup(uniforms);}}else{this.uniformGroup=new UniformGroup({});}}// TODO move to shader system..\nShader.prototype.checkUniformExists=function(name,group){if(group.uniforms[name]){return true;}for(var i in group.uniforms){var uniform=group.uniforms[i];if(uniform.group){if(this.checkUniformExists(name,uniform)){return true;}}}return false;};Shader.prototype.destroy=function(){// usage count on programs?\n// remove if not used!\nthis.uniformGroup=null;};Object.defineProperty(Shader.prototype,\"uniforms\",{/**\n         * Shader uniform values, shortcut for `uniformGroup.uniforms`.\n         *\n         * @readonly\n         */get:function get(){return this.uniformGroup.uniforms;},enumerable:false,configurable:true});/**\n     * A short hand function to create a shader based of a vertex and fragment shader.\n     *\n     * @param vertexSrc - The source of the vertex shader.\n     * @param fragmentSrc - The source of the fragment shader.\n     * @param uniforms - Custom uniforms to use to augment the built-in ones.\n     * @returns A shiny new PixiJS shader!\n     */Shader.from=function(vertexSrc,fragmentSrc,uniforms){var program=Program.from(vertexSrc,fragmentSrc);return new Shader(program,uniforms);};return Shader;}();/* eslint-disable max-len */var BLEND=0;var OFFSET=1;var CULLING=2;var DEPTH_TEST=3;var WINDING=4;var DEPTH_MASK=5;/**\n * This is a WebGL state, and is is passed to {@link PIXI.StateSystem}.\n *\n * Each mesh rendered may require WebGL to be in a different state.\n * For example you may want different blend mode or to enable polygon offsets\n *\n * @memberof PIXI\n */var State=/** @class */function(){function State(){this.data=0;this.blendMode=BLEND_MODES.NORMAL;this.polygonOffset=0;this.blend=true;this.depthMask=true;//  this.depthTest = true;\n}Object.defineProperty(State.prototype,\"blend\",{/**\n         * Activates blending of the computed fragment color values.\n         *\n         * @default true\n         */get:function get(){return!!(this.data&1<<BLEND);},set:function set(value){if(!!(this.data&1<<BLEND)!==value){this.data^=1<<BLEND;}},enumerable:false,configurable:true});Object.defineProperty(State.prototype,\"offsets\",{/**\n         * Activates adding an offset to depth values of polygon's fragments\n         *\n         * @default false\n         */get:function get(){return!!(this.data&1<<OFFSET);},set:function set(value){if(!!(this.data&1<<OFFSET)!==value){this.data^=1<<OFFSET;}},enumerable:false,configurable:true});Object.defineProperty(State.prototype,\"culling\",{/**\n         * Activates culling of polygons.\n         *\n         * @default false\n         */get:function get(){return!!(this.data&1<<CULLING);},set:function set(value){if(!!(this.data&1<<CULLING)!==value){this.data^=1<<CULLING;}},enumerable:false,configurable:true});Object.defineProperty(State.prototype,\"depthTest\",{/**\n         * Activates depth comparisons and updates to the depth buffer.\n         *\n         * @default false\n         */get:function get(){return!!(this.data&1<<DEPTH_TEST);},set:function set(value){if(!!(this.data&1<<DEPTH_TEST)!==value){this.data^=1<<DEPTH_TEST;}},enumerable:false,configurable:true});Object.defineProperty(State.prototype,\"depthMask\",{/**\n         * Enables or disables writing to the depth buffer.\n         *\n         * @default true\n         */get:function get(){return!!(this.data&1<<DEPTH_MASK);},set:function set(value){if(!!(this.data&1<<DEPTH_MASK)!==value){this.data^=1<<DEPTH_MASK;}},enumerable:false,configurable:true});Object.defineProperty(State.prototype,\"clockwiseFrontFace\",{/**\n         * Specifies whether or not front or back-facing polygons can be culled.\n         *\n         * @default false\n         */get:function get(){return!!(this.data&1<<WINDING);},set:function set(value){if(!!(this.data&1<<WINDING)!==value){this.data^=1<<WINDING;}},enumerable:false,configurable:true});Object.defineProperty(State.prototype,\"blendMode\",{/**\n         * The blend mode to be applied when this state is set. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n         *\n         * @default PIXI.BLEND_MODES.NORMAL\n         */get:function get(){return this._blendMode;},set:function set(value){this.blend=value!==BLEND_MODES.NONE;this._blendMode=value;},enumerable:false,configurable:true});Object.defineProperty(State.prototype,\"polygonOffset\",{/**\n         * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n         *\n         * @default 0\n         */get:function get(){return this._polygonOffset;},set:function set(value){this.offsets=!!value;this._polygonOffset=value;},enumerable:false,configurable:true});State.prototype.toString=function(){return\"[@pixi/core:State \"+(\"blendMode=\"+this.blendMode+\" \")+(\"clockwiseFrontFace=\"+this.clockwiseFrontFace+\" \")+(\"culling=\"+this.culling+\" \")+(\"depthMask=\"+this.depthMask+\" \")+(\"polygonOffset=\"+this.polygonOffset)+\"]\";};State.for2d=function(){var state=new State();state.depthTest=false;state.blend=true;return state;};return State;}();var defaultVertex$1=\"attribute vec2 aVertexPosition;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nuniform vec4 inputSize;\\nuniform vec4 outputFrame;\\n\\nvec4 filterVertexPosition( void )\\n{\\n    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\\n\\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\\n}\\n\\nvec2 filterTextureCoord( void )\\n{\\n    return aVertexPosition * (outputFrame.zw * inputSize.zw);\\n}\\n\\nvoid main(void)\\n{\\n    gl_Position = filterVertexPosition();\\n    vTextureCoord = filterTextureCoord();\\n}\\n\";var defaultFragment$1=\"varying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\n\\nvoid main(void){\\n   gl_FragColor = texture2D(uSampler, vTextureCoord);\\n}\\n\";/**\n * A filter is a special shader that applies post-processing effects to an input texture and writes into an output\n * render-target.\n *\n * {@link http://pixijs.io/examples/#/filters/blur-filter.js Example} of the\n * {@link PIXI.filters.BlurFilter BlurFilter}.\n *\n * ### Usage\n * Filters can be applied to any DisplayObject or Container.\n * PixiJS' `FilterSystem` renders the container into temporary Framebuffer,\n * then filter renders it to the screen.\n * Multiple filters can be added to the `filters` array property and stacked on each other.\n *\n * ```\n * const filter = new PIXI.Filter(myShaderVert, myShaderFrag, { myUniform: 0.5 });\n * const container = new PIXI.Container();\n * container.filters = [filter];\n * ```\n *\n * ### Previous Version Differences\n *\n * In PixiJS **v3**, a filter was always applied to _whole screen_.\n *\n * In PixiJS **v4**, a filter can be applied _only part of the screen_.\n * Developers had to create a set of uniforms to deal with coordinates.\n *\n * In PixiJS **v5** combines _both approaches_.\n * Developers can use normal coordinates of v3 and then allow filter to use partial Framebuffers,\n * bringing those extra uniforms into account.\n *\n * Also be aware that we have changed default vertex shader, please consult\n * {@link https://github.com/pixijs/pixi.js/wiki/v5-Creating-filters Wiki}.\n *\n * ### Frames\n *\n * The following table summarizes the coordinate spaces used in the filtering pipeline:\n *\n * <table>\n * <thead>\n *   <tr>\n *     <th>Coordinate Space</th>\n *     <th>Description</th>\n *   </tr>\n * </thead>\n * <tbody>\n *   <tr>\n *     <td>Texture Coordinates</td>\n *     <td>\n *         The texture (or UV) coordinates in the input base-texture's space. These are normalized into the (0,1) range along\n *         both axes.\n *     </td>\n *   </tr>\n *   <tr>\n *     <td>World Space</td>\n *     <td>\n *         A point in the same space as the world bounds of any display-object (i.e. in the scene graph's space).\n *     </td>\n *   </tr>\n *   <tr>\n *     <td>Physical Pixels</td>\n *     <td>\n *         This is base-texture's space with the origin on the top-left. You can calculate these by multiplying the texture\n *         coordinates by the dimensions of the texture.\n *     </td>\n *   </tr>\n * </tbody>\n * </table>\n *\n * ### Built-in Uniforms\n *\n * PixiJS viewport uses screen (CSS) coordinates, `(0, 0, renderer.screen.width, renderer.screen.height)`,\n * and `projectionMatrix` uniform maps it to the gl viewport.\n *\n * **uSampler**\n *\n * The most important uniform is the input texture that container was rendered into.\n * _Important note: as with all Framebuffers in PixiJS, both input and output are\n * premultiplied by alpha._\n *\n * By default, input normalized coordinates are passed to fragment shader with `vTextureCoord`.\n * Use it to sample the input.\n *\n * ```\n * const fragment = `\n * varying vec2 vTextureCoord;\n * uniform sampler2D uSampler;\n * void main(void)\n * {\n *    gl_FragColor = texture2D(uSampler, vTextureCoord);\n * }\n * `;\n *\n * const myFilter = new PIXI.Filter(null, fragment);\n * ```\n *\n * This filter is just one uniform less than {@link PIXI.filters.AlphaFilter AlphaFilter}.\n *\n * **outputFrame**\n *\n * The `outputFrame` holds the rectangle where filter is applied in screen (CSS) coordinates.\n * It's the same as `renderer.screen` for a fullscreen filter.\n * Only a part of  `outputFrame.zw` size of temporary Framebuffer is used,\n * `(0, 0, outputFrame.width, outputFrame.height)`,\n *\n * Filters uses this quad to normalized (0-1) space, its passed into `aVertexPosition` attribute.\n * To calculate vertex position in screen space using normalized (0-1) space:\n *\n * ```\n * vec4 filterVertexPosition( void )\n * {\n *     vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n *     return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n * }\n * ```\n *\n * **inputSize**\n *\n * Temporary framebuffer is different, it can be either the size of screen, either power-of-two.\n * The `inputSize.xy` are size of temporary framebuffer that holds input.\n * The `inputSize.zw` is inverted, it's a shortcut to evade division inside the shader.\n *\n * Set `inputSize.xy = outputFrame.zw` for a fullscreen filter.\n *\n * To calculate input normalized coordinate, you have to map it to filter normalized space.\n * Multiply by `outputFrame.zw` to get input coordinate.\n * Divide by `inputSize.xy` to get input normalized coordinate.\n *\n * ```\n * vec2 filterTextureCoord( void )\n * {\n *     return aVertexPosition * (outputFrame.zw * inputSize.zw); // same as /inputSize.xy\n * }\n * ```\n * **resolution**\n *\n * The `resolution` is the ratio of screen (CSS) pixels to real pixels.\n *\n * **inputPixel**\n *\n * `inputPixel.xy` is the size of framebuffer in real pixels, same as `inputSize.xy * resolution`\n * `inputPixel.zw` is inverted `inputPixel.xy`.\n *\n * It's handy for filters that use neighbour pixels, like {@link PIXI.filters.FXAAFilter FXAAFilter}.\n *\n * **inputClamp**\n *\n * If you try to get info from outside of used part of Framebuffer - you'll get undefined behaviour.\n * For displacements, coordinates has to be clamped.\n *\n * The `inputClamp.xy` is left-top pixel center, you may ignore it, because we use left-top part of Framebuffer\n * `inputClamp.zw` is bottom-right pixel center.\n *\n * ```\n * vec4 color = texture2D(uSampler, clamp(modifiedTextureCoord, inputClamp.xy, inputClamp.zw))\n * ```\n * OR\n * ```\n * vec4 color = texture2D(uSampler, min(modifigedTextureCoord, inputClamp.zw))\n * ```\n *\n * ### Additional Information\n *\n * Complete documentation on Filter usage is located in the\n * {@link https://github.com/pixijs/pixi.js/wiki/v5-Creating-filters Wiki}.\n *\n * Since PixiJS only had a handful of built-in filters, additional filters can be downloaded\n * {@link https://github.com/pixijs/pixi-filters here} from the PixiJS Filters repository.\n *\n * @memberof PIXI\n */var Filter=/** @class */function(_super){__extends(Filter,_super);/**\n     * @param vertexSrc - The source of the vertex shader.\n     * @param fragmentSrc - The source of the fragment shader.\n     * @param uniforms - Custom uniforms to use to augment the built-in ones.\n     */function Filter(vertexSrc,fragmentSrc,uniforms){var _this=this;var program=Program.from(vertexSrc||Filter.defaultVertexSrc,fragmentSrc||Filter.defaultFragmentSrc);_this=_super.call(this,program,uniforms)||this;_this.padding=0;_this.resolution=settings.FILTER_RESOLUTION;_this.multisample=settings.FILTER_MULTISAMPLE;_this.enabled=true;_this.autoFit=true;_this.state=new State();return _this;}/**\n     * Applies the filter\n     *\n     * @param {PIXI.FilterSystem} filterManager - The renderer to retrieve the filter from\n     * @param {PIXI.RenderTexture} input - The input render target.\n     * @param {PIXI.RenderTexture} output - The target to output to.\n     * @param {PIXI.CLEAR_MODES} [clearMode] - Should the output be cleared before rendering to it.\n     * @param {object} [currentState] - It's current state of filter.\n     *        There are some useful properties in the currentState :\n     *        target, filters, sourceFrame, destinationFrame, renderTarget, resolution\n     */Filter.prototype.apply=function(filterManager,input,output,clearMode,_currentState){// do as you please!\nfilterManager.applyFilter(this,input,output,clearMode);// or just do a regular render..\n};Object.defineProperty(Filter.prototype,\"blendMode\",{/**\n         * Sets the blend mode of the filter.\n         *\n         * @default PIXI.BLEND_MODES.NORMAL\n         */get:function get(){return this.state.blendMode;},set:function set(value){this.state.blendMode=value;},enumerable:false,configurable:true});Object.defineProperty(Filter.prototype,\"resolution\",{/**\n         * The resolution of the filter. Setting this to be lower will lower the quality but\n         * increase the performance of the filter.\n         */get:function get(){return this._resolution;},set:function set(value){this._resolution=value;},enumerable:false,configurable:true});Object.defineProperty(Filter,\"defaultVertexSrc\",{/**\n         * The default vertex shader source\n         *\n         * @constant\n         */get:function get(){return defaultVertex$1;},enumerable:false,configurable:true});Object.defineProperty(Filter,\"defaultFragmentSrc\",{/**\n         * The default fragment shader source\n         *\n         * @constant\n         */get:function get(){return defaultFragment$1;},enumerable:false,configurable:true});return Filter;}(Shader);var vertex=\"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 otherMatrix;\\n\\nvarying vec2 vMaskCoord;\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = aTextureCoord;\\n    vMaskCoord = ( otherMatrix * vec3( aTextureCoord, 1.0)  ).xy;\\n}\\n\";var fragment=\"varying vec2 vMaskCoord;\\nvarying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform sampler2D mask;\\nuniform float alpha;\\nuniform float npmAlpha;\\nuniform vec4 maskClamp;\\n\\nvoid main(void)\\n{\\n    float clip = step(3.5,\\n        step(maskClamp.x, vMaskCoord.x) +\\n        step(maskClamp.y, vMaskCoord.y) +\\n        step(vMaskCoord.x, maskClamp.z) +\\n        step(vMaskCoord.y, maskClamp.w));\\n\\n    vec4 original = texture2D(uSampler, vTextureCoord);\\n    vec4 masky = texture2D(mask, vMaskCoord);\\n    float alphaMul = 1.0 - npmAlpha * (1.0 - masky.a);\\n\\n    original *= (alphaMul * masky.r * alpha * clip);\\n\\n    gl_FragColor = original;\\n}\\n\";var tempMat=new Matrix();/**\n * Class controls uv mapping from Texture normal space to BaseTexture normal space.\n *\n * Takes `trim` and `rotate` into account. May contain clamp settings for Meshes and TilingSprite.\n *\n * Can be used in Texture `uvMatrix` field, or separately, you can use different clamp settings on the same texture.\n * If you want to add support for texture region of certain feature or filter, that's what you're looking for.\n *\n * Takes track of Texture changes through `_lastTextureID` private field.\n * Use `update()` method call to track it from outside.\n *\n * @see PIXI.Texture\n * @see PIXI.Mesh\n * @see PIXI.TilingSprite\n * @memberof PIXI\n */var TextureMatrix=/** @class */function(){/**\n     * @param texture - observed texture\n     * @param clampMargin - Changes frame clamping, 0.5 by default. Use -0.5 for extra border.\n     */function TextureMatrix(texture,clampMargin){this._texture=texture;this.mapCoord=new Matrix();this.uClampFrame=new Float32Array(4);this.uClampOffset=new Float32Array(2);this._textureID=-1;this._updateID=0;this.clampOffset=0;this.clampMargin=typeof clampMargin==='undefined'?0.5:clampMargin;this.isSimple=false;}Object.defineProperty(TextureMatrix.prototype,\"texture\",{/** Texture property. */get:function get(){return this._texture;},set:function set(value){this._texture=value;this._textureID=-1;},enumerable:false,configurable:true});/**\n     * Multiplies uvs array to transform\n     *\n     * @param uvs - mesh uvs\n     * @param [out=uvs] - output\n     * @returns - output\n     */TextureMatrix.prototype.multiplyUvs=function(uvs,out){if(out===undefined){out=uvs;}var mat=this.mapCoord;for(var i=0;i<uvs.length;i+=2){var x=uvs[i];var y=uvs[i+1];out[i]=x*mat.a+y*mat.c+mat.tx;out[i+1]=x*mat.b+y*mat.d+mat.ty;}return out;};/**\n     * Updates matrices if texture was changed.\n     *\n     * @param [forceUpdate=false] - if true, matrices will be updated any case\n     * @returns - Whether or not it was updated\n     */TextureMatrix.prototype.update=function(forceUpdate){var tex=this._texture;if(!tex||!tex.valid){return false;}if(!forceUpdate&&this._textureID===tex._updateID){return false;}this._textureID=tex._updateID;this._updateID++;var uvs=tex._uvs;this.mapCoord.set(uvs.x1-uvs.x0,uvs.y1-uvs.y0,uvs.x3-uvs.x0,uvs.y3-uvs.y0,uvs.x0,uvs.y0);var orig=tex.orig;var trim=tex.trim;if(trim){tempMat.set(orig.width/trim.width,0,0,orig.height/trim.height,-trim.x/trim.width,-trim.y/trim.height);this.mapCoord.append(tempMat);}var texBase=tex.baseTexture;var frame=this.uClampFrame;var margin=this.clampMargin/texBase.resolution;var offset=this.clampOffset;frame[0]=(tex._frame.x+margin+offset)/texBase.width;frame[1]=(tex._frame.y+margin+offset)/texBase.height;frame[2]=(tex._frame.x+tex._frame.width-margin+offset)/texBase.width;frame[3]=(tex._frame.y+tex._frame.height-margin+offset)/texBase.height;this.uClampOffset[0]=offset/texBase.realWidth;this.uClampOffset[1]=offset/texBase.realHeight;this.isSimple=tex._frame.width===texBase.width&&tex._frame.height===texBase.height&&tex.rotate===0;return true;};return TextureMatrix;}();/**\n * This handles a Sprite acting as a mask, as opposed to a Graphic.\n *\n * WebGL only.\n *\n * @memberof PIXI\n */var SpriteMaskFilter=/** @class */function(_super){__extends(SpriteMaskFilter,_super);/** @ignore */function SpriteMaskFilter(vertexSrc,fragmentSrc,uniforms){var _this=this;var sprite=null;if(typeof vertexSrc!=='string'&&fragmentSrc===undefined&&uniforms===undefined){sprite=vertexSrc;vertexSrc=undefined;fragmentSrc=undefined;uniforms=undefined;}_this=_super.call(this,vertexSrc||vertex,fragmentSrc||fragment,uniforms)||this;_this.maskSprite=sprite;_this.maskMatrix=new Matrix();return _this;}Object.defineProperty(SpriteMaskFilter.prototype,\"maskSprite\",{/**\n         * Sprite mask\n         *\n         * @type {PIXI.DisplayObject}\n         */get:function get(){return this._maskSprite;},set:function set(value){this._maskSprite=value;if(this._maskSprite){this._maskSprite.renderable=false;}},enumerable:false,configurable:true});/**\n     * Applies the filter\n     *\n     * @param filterManager - The renderer to retrieve the filter from\n     * @param input - The input render target.\n     * @param output - The target to output to.\n     * @param clearMode - Should the output be cleared before rendering to it.\n     */SpriteMaskFilter.prototype.apply=function(filterManager,input,output,clearMode){var maskSprite=this._maskSprite;var tex=maskSprite._texture;if(!tex.valid){return;}if(!tex.uvMatrix){// margin = 0.0, let it bleed a bit, shader code becomes easier\n// assuming that atlas textures were made with 1-pixel padding\ntex.uvMatrix=new TextureMatrix(tex,0.0);}tex.uvMatrix.update();this.uniforms.npmAlpha=tex.baseTexture.alphaMode?0.0:1.0;this.uniforms.mask=tex;// get _normalized sprite texture coords_ and convert them to _normalized atlas texture coords_ with `prepend`\nthis.uniforms.otherMatrix=filterManager.calculateSpriteMatrix(this.maskMatrix,maskSprite).prepend(tex.uvMatrix.mapCoord);this.uniforms.alpha=maskSprite.worldAlpha;this.uniforms.maskClamp=tex.uvMatrix.uClampFrame;filterManager.applyFilter(this,input,output,clearMode);};return SpriteMaskFilter;}(Filter);/**\n * System plugin to the renderer to manage masks.\n *\n * There are three built-in types of masking:\n * * **Scissor Masking**: Scissor masking discards pixels that are outside of a rectangle called the scissor box. It is\n *  the most performant as the scissor test is inexpensive. However, it can only be used when the mask is rectangular.\n * * **Stencil Masking**: Stencil masking discards pixels that don't overlap with the pixels rendered into the stencil\n *  buffer. It is the next fastest option as it does not require rendering into a separate framebuffer. However, it does\n *  cause the mask to be rendered **twice** for each masking operation; hence, minimize the rendering cost of your masks.\n * * **Sprite Mask Filtering**: Sprite mask filtering discards pixels based on the red channel of the sprite-mask's\n *  texture. (Generally, the masking texture is grayscale). Using advanced techniques, you might be able to embed this\n *  type of masking in a custom shader - and hence, bypassing the masking system fully for performance wins.\n *\n * The best type of masking is auto-detected when you `push` one. To use scissor masking, you must pass in a `Graphics`\n * object with just a rectangle drawn.\n *\n * ## Mask Stacks\n *\n * In the scene graph, masks can be applied recursively, i.e. a mask can be applied during a masking operation. The mask\n * stack stores the currently applied masks in order. Each {@link PIXI.BaseRenderTexture} holds its own mask stack, i.e.\n * when you switch render-textures, the old masks only applied when you switch back to rendering to the old render-target.\n *\n * @memberof PIXI\n */var MaskSystem=/** @class */function(){/**\n     * @param renderer - The renderer this System works for.\n     */function MaskSystem(renderer){this.renderer=renderer;this.enableScissor=true;this.alphaMaskPool=[];this.maskDataPool=[];this.maskStack=[];this.alphaMaskIndex=0;}/**\n     * Changes the mask stack that is used by this System.\n     *\n     * @param maskStack - The mask stack\n     */MaskSystem.prototype.setMaskStack=function(maskStack){this.maskStack=maskStack;this.renderer.scissor.setMaskStack(maskStack);this.renderer.stencil.setMaskStack(maskStack);};/**\n     * Enables the mask and appends it to the current mask stack.\n     *\n     * NOTE: The batch renderer should be flushed beforehand to prevent pending renders from being masked.\n     *\n     * @param {PIXI.DisplayObject} target - Display Object to push the mask to\n     * @param {PIXI.MaskData|PIXI.Sprite|PIXI.Graphics|PIXI.DisplayObject} maskData - The masking data.\n     */MaskSystem.prototype.push=function(target,maskDataOrTarget){var maskData=maskDataOrTarget;if(!maskData.isMaskData){var d=this.maskDataPool.pop()||new MaskData();d.pooled=true;d.maskObject=maskDataOrTarget;maskData=d;}var maskAbove=this.maskStack.length!==0?this.maskStack[this.maskStack.length-1]:null;maskData.copyCountersOrReset(maskAbove);if(maskData.autoDetect){this.detect(maskData);}maskData._target=target;if(maskData.type!==MASK_TYPES.SPRITE){this.maskStack.push(maskData);}if(maskData.enabled){switch(maskData.type){case MASK_TYPES.SCISSOR:this.renderer.scissor.push(maskData);break;case MASK_TYPES.STENCIL:this.renderer.stencil.push(maskData);break;case MASK_TYPES.SPRITE:maskData.copyCountersOrReset(null);this.pushSpriteMask(maskData);break;}}if(maskData.type===MASK_TYPES.SPRITE){this.maskStack.push(maskData);}};/**\n     * Removes the last mask from the mask stack and doesn't return it.\n     *\n     * NOTE: The batch renderer should be flushed beforehand to render the masked contents before the mask is removed.\n     *\n     * @param {PIXI.DisplayObject} target - Display Object to pop the mask from\n     */MaskSystem.prototype.pop=function(target){var maskData=this.maskStack.pop();if(!maskData||maskData._target!==target){// TODO: add an assert when we have it\nreturn;}if(maskData.enabled){switch(maskData.type){case MASK_TYPES.SCISSOR:this.renderer.scissor.pop();break;case MASK_TYPES.STENCIL:this.renderer.stencil.pop(maskData.maskObject);break;case MASK_TYPES.SPRITE:this.popSpriteMask(maskData);break;}}maskData.reset();if(maskData.pooled){this.maskDataPool.push(maskData);}if(this.maskStack.length!==0){var maskCurrent=this.maskStack[this.maskStack.length-1];if(maskCurrent.type===MASK_TYPES.SPRITE&&maskCurrent._filters){maskCurrent._filters[0].maskSprite=maskCurrent.maskObject;}}};/** Sets type of MaskData based on its maskObject. */MaskSystem.prototype.detect=function(maskData){var maskObject=maskData.maskObject;if(maskObject.isSprite){maskData.type=MASK_TYPES.SPRITE;}else if(this.enableScissor&&this.renderer.scissor.testScissor(maskData)){maskData.type=MASK_TYPES.SCISSOR;}else{maskData.type=MASK_TYPES.STENCIL;}};/**\n     * Applies the Mask and adds it to the current filter stack.\n     *\n     * @param maskData - Sprite to be used as the mask.\n     */MaskSystem.prototype.pushSpriteMask=function(maskData){var _a,_b;var maskObject=maskData.maskObject;var target=maskData._target;var alphaMaskFilter=maskData._filters;if(!alphaMaskFilter){alphaMaskFilter=this.alphaMaskPool[this.alphaMaskIndex];if(!alphaMaskFilter){alphaMaskFilter=this.alphaMaskPool[this.alphaMaskIndex]=[new SpriteMaskFilter()];}}var renderer=this.renderer;var renderTextureSystem=renderer.renderTexture;var resolution;var multisample;if(renderTextureSystem.current){var renderTexture=renderTextureSystem.current;resolution=maskData.resolution||renderTexture.resolution;multisample=(_a=maskData.multisample)!==null&&_a!==void 0?_a:renderTexture.multisample;}else{resolution=maskData.resolution||renderer.resolution;multisample=(_b=maskData.multisample)!==null&&_b!==void 0?_b:renderer.multisample;}alphaMaskFilter[0].resolution=resolution;alphaMaskFilter[0].multisample=multisample;alphaMaskFilter[0].maskSprite=maskObject;var stashFilterArea=target.filterArea;target.filterArea=maskObject.getBounds(true);renderer.filter.push(target,alphaMaskFilter);target.filterArea=stashFilterArea;if(!maskData._filters){this.alphaMaskIndex++;}};/**\n     * Removes the last filter from the filter stack and doesn't return it.\n     *\n     * @param maskData - Sprite to be used as the mask.\n     */MaskSystem.prototype.popSpriteMask=function(maskData){this.renderer.filter.pop();if(maskData._filters){maskData._filters[0].maskSprite=null;}else{this.alphaMaskIndex--;this.alphaMaskPool[this.alphaMaskIndex][0].maskSprite=null;}};MaskSystem.prototype.destroy=function(){this.renderer=null;};return MaskSystem;}();/**\n * System plugin to the renderer to manage specific types of masking operations.\n *\n * @memberof PIXI\n */var AbstractMaskSystem=/** @class */function(){/**\n     * @param renderer - The renderer this System works for.\n     */function AbstractMaskSystem(renderer){this.renderer=renderer;this.maskStack=[];this.glConst=0;}/** Gets count of masks of certain type. */AbstractMaskSystem.prototype.getStackLength=function(){return this.maskStack.length;};/**\n     * Changes the mask stack that is used by this System.\n     *\n     * @param {PIXI.MaskData[]} maskStack - The mask stack\n     */AbstractMaskSystem.prototype.setMaskStack=function(maskStack){var gl=this.renderer.gl;var curStackLen=this.getStackLength();this.maskStack=maskStack;var newStackLen=this.getStackLength();if(newStackLen!==curStackLen){if(newStackLen===0){gl.disable(this.glConst);}else{gl.enable(this.glConst);this._useCurrent();}}};/**\n     * Setup renderer to use the current mask data.\n     * @private\n     */AbstractMaskSystem.prototype._useCurrent=function(){// OVERWRITE;\n};/** Destroys the mask stack. */AbstractMaskSystem.prototype.destroy=function(){this.renderer=null;this.maskStack=null;};return AbstractMaskSystem;}();var tempMatrix$1=new Matrix();/**\n * System plugin to the renderer to manage scissor masking.\n *\n * Scissor masking discards pixels outside of a rectangle called the scissor box. The scissor box is in the framebuffer\n * viewport's space; however, the mask's rectangle is projected from world-space to viewport space automatically\n * by this system.\n *\n * @memberof PIXI\n */var ScissorSystem=/** @class */function(_super){__extends(ScissorSystem,_super);/**\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\n     */function ScissorSystem(renderer){var _this=_super.call(this,renderer)||this;_this.glConst=WebGLRenderingContext.SCISSOR_TEST;return _this;}ScissorSystem.prototype.getStackLength=function(){var maskData=this.maskStack[this.maskStack.length-1];if(maskData){return maskData._scissorCounter;}return 0;};/**\n     * evaluates _boundsTransformed, _scissorRect for MaskData\n     * @param maskData\n     */ScissorSystem.prototype.calcScissorRect=function(maskData){if(maskData._scissorRectLocal){return;}var prevData=maskData._scissorRect;var maskObject=maskData.maskObject;var renderer=this.renderer;var renderTextureSystem=renderer.renderTexture;maskObject.renderable=true;var rect=maskObject.getBounds();this.roundFrameToPixels(rect,renderTextureSystem.current?renderTextureSystem.current.resolution:renderer.resolution,renderTextureSystem.sourceFrame,renderTextureSystem.destinationFrame,renderer.projection.transform);maskObject.renderable=false;if(prevData){rect.fit(prevData);}maskData._scissorRectLocal=rect;};ScissorSystem.isMatrixRotated=function(matrix){if(!matrix){return false;}var a=matrix.a,b=matrix.b,c=matrix.c,d=matrix.d;// Skip if skew/rotation present in matrix, except for multiple of 90° rotation. If rotation\n// is a multiple of 90°, then either pair of (b,c) or (a,d) will be (0,0).\nreturn(Math.abs(b)>1e-4||Math.abs(c)>1e-4)&&(Math.abs(a)>1e-4||Math.abs(d)>1e-4);};/**\n     * Test, whether the object can be scissor mask with current renderer projection.\n     * Calls \"calcScissorRect()\" if its true.\n     * @param maskData mask data\n     * @returns whether Whether the object can be scissor mask\n     */ScissorSystem.prototype.testScissor=function(maskData){var maskObject=maskData.maskObject;if(!maskObject.isFastRect||!maskObject.isFastRect()){return false;}if(ScissorSystem.isMatrixRotated(maskObject.worldTransform)){return false;}if(ScissorSystem.isMatrixRotated(this.renderer.projection.transform)){return false;}this.calcScissorRect(maskData);var rect=maskData._scissorRectLocal;return rect.width>0&&rect.height>0;};ScissorSystem.prototype.roundFrameToPixels=function(frame,resolution,bindingSourceFrame,bindingDestinationFrame,transform){if(ScissorSystem.isMatrixRotated(transform)){return;}transform=transform?tempMatrix$1.copyFrom(transform):tempMatrix$1.identity();// Get forward transform from world space to screen space\ntransform.translate(-bindingSourceFrame.x,-bindingSourceFrame.y).scale(bindingDestinationFrame.width/bindingSourceFrame.width,bindingDestinationFrame.height/bindingSourceFrame.height).translate(bindingDestinationFrame.x,bindingDestinationFrame.y);// Convert frame to screen space\nthis.renderer.filter.transformAABB(transform,frame);frame.fit(bindingDestinationFrame);frame.x=Math.round(frame.x*resolution);frame.y=Math.round(frame.y*resolution);frame.width=Math.round(frame.width*resolution);frame.height=Math.round(frame.height*resolution);};/**\n     * Applies the Mask and adds it to the current stencil stack.\n     *\n     * @author alvin\n     * @param maskData - The mask data.\n     */ScissorSystem.prototype.push=function(maskData){if(!maskData._scissorRectLocal){this.calcScissorRect(maskData);}var gl=this.renderer.gl;if(!maskData._scissorRect){gl.enable(gl.SCISSOR_TEST);}maskData._scissorCounter++;maskData._scissorRect=maskData._scissorRectLocal;this._useCurrent();};/**\n     * This should be called after a mask is popped off the mask stack. It will rebind the scissor box to be latest with the\n     * last mask in the stack.\n     *\n     * This can also be called when you directly modify the scissor box and want to restore PixiJS state.\n     */ScissorSystem.prototype.pop=function(){var gl=this.renderer.gl;if(this.getStackLength()>0){this._useCurrent();}else{gl.disable(gl.SCISSOR_TEST);}};/**\n     * Setup renderer to use the current scissor data.\n     * @private\n     */ScissorSystem.prototype._useCurrent=function(){var rect=this.maskStack[this.maskStack.length-1]._scissorRect;var y;if(this.renderer.renderTexture.current){y=rect.y;}else{// flipY. In future we'll have it over renderTextures as an option\ny=this.renderer.height-rect.height-rect.y;}this.renderer.gl.scissor(rect.x,y,rect.width,rect.height);};return ScissorSystem;}(AbstractMaskSystem);/**\n * System plugin to the renderer to manage stencils (used for masks).\n *\n * @memberof PIXI\n */var StencilSystem=/** @class */function(_super){__extends(StencilSystem,_super);/**\n     * @param renderer - The renderer this System works for.\n     */function StencilSystem(renderer){var _this=_super.call(this,renderer)||this;_this.glConst=WebGLRenderingContext.STENCIL_TEST;return _this;}StencilSystem.prototype.getStackLength=function(){var maskData=this.maskStack[this.maskStack.length-1];if(maskData){return maskData._stencilCounter;}return 0;};/**\n     * Applies the Mask and adds it to the current stencil stack.\n     *\n     * @param maskData - The mask data\n     */StencilSystem.prototype.push=function(maskData){var maskObject=maskData.maskObject;var gl=this.renderer.gl;var prevMaskCount=maskData._stencilCounter;if(prevMaskCount===0){// force use stencil texture in current framebuffer\nthis.renderer.framebuffer.forceStencil();gl.clearStencil(0);gl.clear(gl.STENCIL_BUFFER_BIT);gl.enable(gl.STENCIL_TEST);}maskData._stencilCounter++;// Increment the reference stencil value where the new mask overlaps with the old ones.\ngl.colorMask(false,false,false,false);gl.stencilFunc(gl.EQUAL,prevMaskCount,0xFFFFFFFF);gl.stencilOp(gl.KEEP,gl.KEEP,gl.INCR);maskObject.renderable=true;maskObject.render(this.renderer);this.renderer.batch.flush();maskObject.renderable=false;this._useCurrent();};/**\n     * Pops stencil mask. MaskData is already removed from stack\n     *\n     * @param {PIXI.DisplayObject} maskObject - object of popped mask data\n     */StencilSystem.prototype.pop=function(maskObject){var gl=this.renderer.gl;if(this.getStackLength()===0){// the stack is empty!\ngl.disable(gl.STENCIL_TEST);}else{// Decrement the reference stencil value where the popped mask overlaps with the other ones\ngl.colorMask(false,false,false,false);gl.stencilOp(gl.KEEP,gl.KEEP,gl.DECR);maskObject.renderable=true;maskObject.render(this.renderer);this.renderer.batch.flush();maskObject.renderable=false;this._useCurrent();}};/**\n     * Setup renderer to use the current stencil data.\n     * @private\n     */StencilSystem.prototype._useCurrent=function(){var gl=this.renderer.gl;gl.colorMask(true,true,true,true);gl.stencilFunc(gl.EQUAL,this.getStackLength(),0xFFFFFFFF);gl.stencilOp(gl.KEEP,gl.KEEP,gl.KEEP);};return StencilSystem;}(AbstractMaskSystem);/**\n * System plugin to the renderer to manage the projection matrix.\n *\n * The `projectionMatrix` is a global uniform provided to all shaders. It is used to transform points in world space to\n * normalized device coordinates.\n *\n * @memberof PIXI\n */var ProjectionSystem=/** @class */function(){/** @param renderer - The renderer this System works for. */function ProjectionSystem(renderer){this.renderer=renderer;this.destinationFrame=null;this.sourceFrame=null;this.defaultFrame=null;this.projectionMatrix=new Matrix();this.transform=null;}/**\n     * Updates the projection-matrix based on the sourceFrame → destinationFrame mapping provided.\n     *\n     * NOTE: It is expected you call `renderer.framebuffer.setViewport(destinationFrame)` after this. This is because\n     * the framebuffer viewport converts shader vertex output in normalized device coordinates to window coordinates.\n     *\n     * NOTE-2: {@link RenderTextureSystem#bind} updates the projection-matrix when you bind a render-texture. It is expected\n     * that you dirty the current bindings when calling this manually.\n     *\n     * @param destinationFrame - The rectangle in the render-target to render the contents into. If rendering to the canvas,\n     *  the origin is on the top-left; if rendering to a render-texture, the origin is on the bottom-left.\n     * @param sourceFrame - The rectangle in world space that contains the contents being rendered.\n     * @param resolution - The resolution of the render-target, which is the ratio of\n     *  world-space (or CSS) pixels to physical pixels.\n     * @param root - Whether the render-target is the screen. This is required because rendering to textures\n     *  is y-flipped (i.e. upside down relative to the screen).\n     */ProjectionSystem.prototype.update=function(destinationFrame,sourceFrame,resolution,root){this.destinationFrame=destinationFrame||this.destinationFrame||this.defaultFrame;this.sourceFrame=sourceFrame||this.sourceFrame||destinationFrame;// Calculate object-space to clip-space projection\nthis.calculateProjection(this.destinationFrame,this.sourceFrame,resolution,root);if(this.transform){this.projectionMatrix.append(this.transform);}var renderer=this.renderer;renderer.globalUniforms.uniforms.projectionMatrix=this.projectionMatrix;renderer.globalUniforms.update();// this will work for now\n// but would be sweet to stick and even on the global uniforms..\nif(renderer.shader.shader){renderer.shader.syncUniformGroup(renderer.shader.shader.uniforms.globals);}};/**\n     * Calculates the `projectionMatrix` to map points inside `sourceFrame` to inside `destinationFrame`.\n     *\n     * @param destinationFrame - The destination frame in the render-target.\n     * @param sourceFrame - The source frame in world space.\n     * @param resolution - The render-target's resolution, i.e. ratio of CSS to physical pixels.\n     * @param root - Whether rendering into the screen. Otherwise, if rendering to a framebuffer, the projection\n     *  is y-flipped.\n     */ProjectionSystem.prototype.calculateProjection=function(_destinationFrame,sourceFrame,_resolution,root){var pm=this.projectionMatrix;var sign=!root?1:-1;pm.identity();pm.a=1/sourceFrame.width*2;pm.d=sign*(1/sourceFrame.height*2);pm.tx=-1-sourceFrame.x*pm.a;pm.ty=-sign-sourceFrame.y*pm.d;};/**\n     * Sets the transform of the active render target to the given matrix.\n     *\n     * @param matrix - The transformation matrix\n     */ProjectionSystem.prototype.setTransform=function(_matrix){// this._activeRenderTarget.transform = matrix;\n};ProjectionSystem.prototype.destroy=function(){this.renderer=null;};return ProjectionSystem;}();// Temporary rectangle for assigned sourceFrame or destinationFrame\nvar tempRect=new Rectangle();// Temporary rectangle for renderTexture destinationFrame\nvar tempRect2=new Rectangle();/* eslint-disable max-len */ /**\n * System plugin to the renderer to manage render textures.\n *\n * Should be added after FramebufferSystem\n *\n * ### Frames\n *\n * The `RenderTextureSystem` holds a sourceFrame → destinationFrame projection. The following table explains the different\n * coordinate spaces used:\n *\n * | Frame                  | Description                                                      | Coordinate System                                       |\n * | ---------------------- | ---------------------------------------------------------------- | ------------------------------------------------------- |\n * | sourceFrame            | The rectangle inside of which display-objects are being rendered | **World Space**: The origin on the top-left             |\n * | destinationFrame       | The rectangle in the render-target (canvas or texture) into which contents should be rendered | If rendering to the canvas, this is in screen space and the origin is on the top-left. If rendering to a render-texture, this is in its base-texture's space with the origin on the bottom-left.  |\n * | viewportFrame          | The framebuffer viewport corresponding to the destination-frame  | **Window Coordinates**: The origin is always on the bottom-left. |\n *\n * @memberof PIXI\n */var RenderTextureSystem=/** @class */function(){/**\n     * @param renderer - The renderer this System works for.\n     */function RenderTextureSystem(renderer){this.renderer=renderer;this.clearColor=renderer._backgroundColorRgba;this.defaultMaskStack=[];this.current=null;this.sourceFrame=new Rectangle();this.destinationFrame=new Rectangle();this.viewportFrame=new Rectangle();}/**\n     * Bind the current render texture.\n     *\n     * @param renderTexture - RenderTexture to bind, by default its `null` - the screen.\n     * @param sourceFrame - Part of world that is mapped to the renderTexture.\n     * @param destinationFrame - Part of renderTexture, by default it has the same size as sourceFrame.\n     */RenderTextureSystem.prototype.bind=function(renderTexture,sourceFrame,destinationFrame){if(renderTexture===void 0){renderTexture=null;}var renderer=this.renderer;this.current=renderTexture;var baseTexture;var framebuffer;var resolution;if(renderTexture){baseTexture=renderTexture.baseTexture;resolution=baseTexture.resolution;if(!sourceFrame){tempRect.width=renderTexture.frame.width;tempRect.height=renderTexture.frame.height;sourceFrame=tempRect;}if(!destinationFrame){tempRect2.x=renderTexture.frame.x;tempRect2.y=renderTexture.frame.y;tempRect2.width=sourceFrame.width;tempRect2.height=sourceFrame.height;destinationFrame=tempRect2;}framebuffer=baseTexture.framebuffer;}else{resolution=renderer.resolution;if(!sourceFrame){tempRect.width=renderer.screen.width;tempRect.height=renderer.screen.height;sourceFrame=tempRect;}if(!destinationFrame){destinationFrame=tempRect;destinationFrame.width=sourceFrame.width;destinationFrame.height=sourceFrame.height;}}var viewportFrame=this.viewportFrame;viewportFrame.x=destinationFrame.x*resolution;viewportFrame.y=destinationFrame.y*resolution;viewportFrame.width=destinationFrame.width*resolution;viewportFrame.height=destinationFrame.height*resolution;if(!renderTexture){viewportFrame.y=renderer.view.height-(viewportFrame.y+viewportFrame.height);}viewportFrame.ceil();this.renderer.framebuffer.bind(framebuffer,viewportFrame);this.renderer.projection.update(destinationFrame,sourceFrame,resolution,!framebuffer);if(renderTexture){this.renderer.mask.setMaskStack(baseTexture.maskStack);}else{this.renderer.mask.setMaskStack(this.defaultMaskStack);}this.sourceFrame.copyFrom(sourceFrame);this.destinationFrame.copyFrom(destinationFrame);};/**\n     * Erases the render texture and fills the drawing area with a colour.\n     *\n     * @param clearColor - The color as rgba, default to use the renderer backgroundColor\n     * @param [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks\n     *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.\n     */RenderTextureSystem.prototype.clear=function(clearColor,mask){if(this.current){clearColor=clearColor||this.current.baseTexture.clearColor;}else{clearColor=clearColor||this.clearColor;}var destinationFrame=this.destinationFrame;var baseFrame=this.current?this.current.baseTexture:this.renderer.screen;var clearMask=destinationFrame.width!==baseFrame.width||destinationFrame.height!==baseFrame.height;if(clearMask){var _a=this.viewportFrame,x=_a.x,y=_a.y,width=_a.width,height=_a.height;x=Math.round(x);y=Math.round(y);width=Math.round(width);height=Math.round(height);// TODO: ScissorSystem should cache whether the scissor test is enabled or not.\nthis.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);this.renderer.gl.scissor(x,y,width,height);}this.renderer.framebuffer.clear(clearColor[0],clearColor[1],clearColor[2],clearColor[3],mask);if(clearMask){// Restore the scissor box\nthis.renderer.scissor.pop();}};RenderTextureSystem.prototype.resize=function(){// resize the root only!\nthis.bind(null);};/** Resets render-texture state. */RenderTextureSystem.prototype.reset=function(){this.bind(null);};RenderTextureSystem.prototype.destroy=function(){this.renderer=null;};return RenderTextureSystem;}();function uboUpdate(_ud,_uv,_renderer,_syncData,buffer){_renderer.buffer.update(buffer);}// cv = CachedValue\n// v = value\n// ud = uniformData\n// uv = uniformValue\n// l = location\nvar UBO_TO_SINGLE_SETTERS={float:\"\\n        data[offset] = v;\\n    \",vec2:\"\\n        data[offset] = v[0];\\n        data[offset+1] = v[1];\\n    \",vec3:\"\\n        data[offset] = v[0];\\n        data[offset+1] = v[1];\\n        data[offset+2] = v[2];\\n\\n    \",vec4:\"\\n        data[offset] = v[0];\\n        data[offset+1] = v[1];\\n        data[offset+2] = v[2];\\n        data[offset+3] = v[3];\\n    \",mat2:\"\\n        data[offset] = v[0];\\n        data[offset+1] = v[1];\\n\\n        data[offset+4] = v[2];\\n        data[offset+5] = v[3];\\n    \",mat3:\"\\n        data[offset] = v[0];\\n        data[offset+1] = v[1];\\n        data[offset+2] = v[2];\\n\\n        data[offset + 4] = v[3];\\n        data[offset + 5] = v[4];\\n        data[offset + 6] = v[5];\\n\\n        data[offset + 8] = v[6];\\n        data[offset + 9] = v[7];\\n        data[offset + 10] = v[8];\\n    \",mat4:\"\\n        for(var i = 0; i < 16; i++)\\n        {\\n            data[offset + i] = v[i];\\n        }\\n    \"};var GLSL_TO_STD40_SIZE={float:4,vec2:8,vec3:12,vec4:16,int:4,ivec2:8,ivec3:12,ivec4:16,uint:4,uvec2:8,uvec3:12,uvec4:16,bool:4,bvec2:8,bvec3:12,bvec4:16,mat2:16*2,mat3:16*3,mat4:16*4};/**\n * @ignore\n *\n * logic originally from here: https://github.com/sketchpunk/FunWithWebGL2/blob/master/lesson_022/Shaders.js\n * rewrote it, but this was a great starting point to get a solid understanding of whats going on :)\n *\n * @param uniformData\n */function createUBOElements(uniformData){var uboElements=uniformData.map(function(data){return{data:data,offset:0,dataLen:0,dirty:0};});var size=0;var chunkSize=0;var offset=0;for(var i=0;i<uboElements.length;i++){var uboElement=uboElements[i];size=GLSL_TO_STD40_SIZE[uboElement.data.type];if(uboElement.data.size>1){size=Math.max(size,16)*uboElement.data.size;}uboElement.dataLen=size;// add some size offset..\n// must align to the nearest 16 bytes or internally nearest round size\nif(chunkSize%size!==0&&chunkSize<16){// diff required to line up..\nvar lineUpValue=chunkSize%size%16;chunkSize+=lineUpValue;offset+=lineUpValue;}if(chunkSize+size>16){offset=Math.ceil(offset/16)*16;uboElement.offset=offset;offset+=size;chunkSize=size;}else{uboElement.offset=offset;chunkSize+=size;offset+=size;}}offset=Math.ceil(offset/16)*16;return{uboElements:uboElements,size:offset};}function getUBOData(uniforms,uniformData){var usedUniformDatas=[];// build..\nfor(var i in uniforms){if(uniformData[i]){usedUniformDatas.push(uniformData[i]);}}// sort them out by index!\nusedUniformDatas.sort(function(a,b){return a.index-b.index;});return usedUniformDatas;}function generateUniformBufferSync(group,uniformData){if(!group.autoManage){// if the group is nott automatically managed, we don't need to generate a special function for it...\nreturn{size:0,syncFunc:uboUpdate};}var usedUniformDatas=getUBOData(group.uniforms,uniformData);var _a=createUBOElements(usedUniformDatas),uboElements=_a.uboElements,size=_a.size;var funcFragments=[\"\\n    var v = null;\\n    var v2 = null;\\n    var cv = null;\\n    var t = 0;\\n    var gl = renderer.gl\\n    var index = 0;\\n    var data = buffer.data;\\n    \"];for(var i=0;i<uboElements.length;i++){var uboElement=uboElements[i];var uniform=group.uniforms[uboElement.data.name];var name=uboElement.data.name;var parsed=false;for(var j=0;j<uniformParsers.length;j++){var uniformParser=uniformParsers[j];if(uniformParser.codeUbo&&uniformParser.test(uboElement.data,uniform)){funcFragments.push(\"offset = \"+uboElement.offset/4+\";\",uniformParsers[j].codeUbo(uboElement.data.name,uniform));parsed=true;break;}}if(!parsed){if(uboElement.data.size>1){var size_1=mapSize(uboElement.data.type);var rowSize=Math.max(GLSL_TO_STD40_SIZE[uboElement.data.type]/16,1);var elementSize=size_1/rowSize;var remainder=(4-elementSize%4)%4;funcFragments.push(\"\\n                cv = ud.\"+name+\".value;\\n                v = uv.\"+name+\";\\n                offset = \"+uboElement.offset/4+\";\\n\\n                t = 0;\\n\\n                for(var i=0; i < \"+uboElement.data.size*rowSize+\"; i++)\\n                {\\n                    for(var j = 0; j < \"+elementSize+\"; j++)\\n                    {\\n                        data[offset++] = v[t++];\\n                    }\\n                    offset += \"+remainder+\";\\n                }\\n\\n                \");}else{var template=UBO_TO_SINGLE_SETTERS[uboElement.data.type];funcFragments.push(\"\\n                cv = ud.\"+name+\".value;\\n                v = uv.\"+name+\";\\n                offset = \"+uboElement.offset/4+\";\\n                \"+template+\";\\n                \");}}}funcFragments.push(\"\\n       renderer.buffer.update(buffer);\\n    \");return{size:size,// eslint-disable-next-line no-new-func\nsyncFunc:new Function('ud','uv','renderer','syncData','buffer',funcFragments.join('\\n'))};}/**\n * @private\n */var IGLUniformData=/** @class */function(){function IGLUniformData(){}return IGLUniformData;}();/**\n * Helper class to create a WebGL Program\n *\n * @memberof PIXI\n */var GLProgram=/** @class */function(){/**\n     * Makes a new Pixi program.\n     *\n     * @param program - webgl program\n     * @param uniformData - uniforms\n     */function GLProgram(program,uniformData){this.program=program;this.uniformData=uniformData;this.uniformGroups={};this.uniformDirtyGroups={};this.uniformBufferBindings={};}/** Destroys this program. */GLProgram.prototype.destroy=function(){this.uniformData=null;this.uniformGroups=null;this.uniformDirtyGroups=null;this.uniformBufferBindings=null;this.program=null;};return GLProgram;}();/**\n * returns the attribute data from the program\n * @private\n *\n * @param {WebGLProgram} [program] - the WebGL program\n * @param {WebGLRenderingContext} [gl] - the WebGL context\n *\n * @returns {object} the attribute data for this program\n */function getAttributeData(program,gl){var attributes={};var totalAttributes=gl.getProgramParameter(program,gl.ACTIVE_ATTRIBUTES);for(var i=0;i<totalAttributes;i++){var attribData=gl.getActiveAttrib(program,i);if(attribData.name.indexOf('gl_')===0){continue;}var type=mapType(gl,attribData.type);var data={type:type,name:attribData.name,size:mapSize(type),location:gl.getAttribLocation(program,attribData.name)};attributes[attribData.name]=data;}return attributes;}/**\n * returns the uniform data from the program\n * @private\n *\n * @param program - the webgl program\n * @param gl - the WebGL context\n *\n * @returns {object} the uniform data for this program\n */function getUniformData(program,gl){var uniforms={};var totalUniforms=gl.getProgramParameter(program,gl.ACTIVE_UNIFORMS);for(var i=0;i<totalUniforms;i++){var uniformData=gl.getActiveUniform(program,i);var name=uniformData.name.replace(/\\[.*?\\]$/,'');var isArray=!!uniformData.name.match(/\\[.*?\\]$/);var type=mapType(gl,uniformData.type);uniforms[name]={name:name,index:i,type:type,size:uniformData.size,isArray:isArray,value:defaultValue(type,uniformData.size)};}return uniforms;}/**\n * generates a WebGL Program object from a high level Pixi Program.\n *\n * @param gl - a rendering context on which to generate the program\n * @param program - the high level Pixi Program.\n */function generateProgram(gl,program){var glVertShader=compileShader(gl,gl.VERTEX_SHADER,program.vertexSrc);var glFragShader=compileShader(gl,gl.FRAGMENT_SHADER,program.fragmentSrc);var webGLProgram=gl.createProgram();gl.attachShader(webGLProgram,glVertShader);gl.attachShader(webGLProgram,glFragShader);gl.linkProgram(webGLProgram);if(!gl.getProgramParameter(webGLProgram,gl.LINK_STATUS)){logProgramError(gl,webGLProgram,glVertShader,glFragShader);}program.attributeData=getAttributeData(webGLProgram,gl);program.uniformData=getUniformData(webGLProgram,gl);// GLSL 1.00: bind attributes sorted by name in ascending order\n// GLSL 3.00: don't change the attribute locations that where chosen by the compiler\n//            or assigned by the layout specifier in the shader source code\nif(!/^[ \\t]*#[ \\t]*version[ \\t]+300[ \\t]+es[ \\t]*$/m.test(program.vertexSrc)){var keys=Object.keys(program.attributeData);keys.sort(function(a,b){return a>b?1:-1;});// eslint-disable-line no-confusing-arrow\nfor(var i=0;i<keys.length;i++){program.attributeData[keys[i]].location=i;gl.bindAttribLocation(webGLProgram,i,keys[i]);}gl.linkProgram(webGLProgram);}gl.deleteShader(glVertShader);gl.deleteShader(glFragShader);var uniformData={};for(var i in program.uniformData){var data=program.uniformData[i];uniformData[i]={location:gl.getUniformLocation(webGLProgram,i),value:defaultValue(data.type,data.size)};}var glProgram=new GLProgram(webGLProgram,uniformData);return glProgram;}var UID$4=0;// default sync data so we don't create a new one each time!\nvar defaultSyncData={textureCount:0,uboCount:0};/**\n * System plugin to the renderer to manage shaders.\n *\n * @memberof PIXI\n */var ShaderSystem=/** @class */function(){/** @param renderer - The renderer this System works for. */function ShaderSystem(renderer){this.destroyed=false;this.renderer=renderer;// Validation check that this environment support `new Function`\nthis.systemCheck();this.gl=null;this.shader=null;this.program=null;this.cache={};this._uboCache={};this.id=UID$4++;}/**\n     * Overrideable function by `@pixi/unsafe-eval` to silence\n     * throwing an error if platform doesn't support unsafe-evals.\n     *\n     * @private\n     */ShaderSystem.prototype.systemCheck=function(){if(!unsafeEvalSupported()){throw new Error('Current environment does not allow unsafe-eval, '+'please use @pixi/unsafe-eval module to enable support.');}};ShaderSystem.prototype.contextChange=function(gl){this.gl=gl;this.reset();};/**\n     * Changes the current shader to the one given in parameter.\n     *\n     * @param shader - the new shader\n     * @param dontSync - false if the shader should automatically sync its uniforms.\n     * @returns the glProgram that belongs to the shader.\n     */ShaderSystem.prototype.bind=function(shader,dontSync){shader.uniforms.globals=this.renderer.globalUniforms;var program=shader.program;var glProgram=program.glPrograms[this.renderer.CONTEXT_UID]||this.generateProgram(shader);this.shader=shader;// TODO - some current Pixi plugins bypass this.. so it not safe to use yet..\nif(this.program!==program){this.program=program;this.gl.useProgram(glProgram.program);}if(!dontSync){defaultSyncData.textureCount=0;defaultSyncData.uboCount=0;this.syncUniformGroup(shader.uniformGroup,defaultSyncData);}return glProgram;};/**\n     * Uploads the uniforms values to the currently bound shader.\n     *\n     * @param uniforms - the uniforms values that be applied to the current shader\n     */ShaderSystem.prototype.setUniforms=function(uniforms){var shader=this.shader.program;var glProgram=shader.glPrograms[this.renderer.CONTEXT_UID];shader.syncUniforms(glProgram.uniformData,uniforms,this.renderer);};/* eslint-disable @typescript-eslint/explicit-module-boundary-types */ /**\n     * Syncs uniforms on the group\n     *\n     * @param group - the uniform group to sync\n     * @param syncData - this is data that is passed to the sync function and any nested sync functions\n     */ShaderSystem.prototype.syncUniformGroup=function(group,syncData){var glProgram=this.getGlProgram();if(!group.static||group.dirtyId!==glProgram.uniformDirtyGroups[group.id]){glProgram.uniformDirtyGroups[group.id]=group.dirtyId;this.syncUniforms(group,glProgram,syncData);}};/**\n     * Overrideable by the @pixi/unsafe-eval package to use static syncUniforms instead.\n     */ShaderSystem.prototype.syncUniforms=function(group,glProgram,syncData){var syncFunc=group.syncUniforms[this.shader.program.id]||this.createSyncGroups(group);syncFunc(glProgram.uniformData,group.uniforms,this.renderer,syncData);};ShaderSystem.prototype.createSyncGroups=function(group){var id=this.getSignature(group,this.shader.program.uniformData,'u');if(!this.cache[id]){this.cache[id]=generateUniformsSync(group,this.shader.program.uniformData);}group.syncUniforms[this.shader.program.id]=this.cache[id];return group.syncUniforms[this.shader.program.id];};/**\n     * Syncs uniform buffers\n     *\n     * @param group - the uniform buffer group to sync\n     * @param name - the name of the uniform buffer\n     */ShaderSystem.prototype.syncUniformBufferGroup=function(group,name){var glProgram=this.getGlProgram();if(!group.static||group.dirtyId!==0||!glProgram.uniformGroups[group.id]){group.dirtyId=0;var syncFunc=glProgram.uniformGroups[group.id]||this.createSyncBufferGroup(group,glProgram,name);// TODO wrap update in a cache??\ngroup.buffer.update();syncFunc(glProgram.uniformData,group.uniforms,this.renderer,defaultSyncData,group.buffer);}this.renderer.buffer.bindBufferBase(group.buffer,glProgram.uniformBufferBindings[name]);};/**\n     * Will create a function that uploads a uniform buffer using the STD140 standard.\n     * The upload function will then be cached for future calls\n     * If a group is manually managed, then a simple upload function is generated\n     *\n     * @param group - the uniform buffer group to sync\n     * @param glProgram - the gl program to attach the uniform bindings to\n     * @param name - the name of the uniform buffer (must exist on the shader)\n     */ShaderSystem.prototype.createSyncBufferGroup=function(group,glProgram,name){var gl=this.renderer.gl;this.renderer.buffer.bind(group.buffer);// bind them...\nvar uniformBlockIndex=this.gl.getUniformBlockIndex(glProgram.program,name);glProgram.uniformBufferBindings[name]=this.shader.uniformBindCount;gl.uniformBlockBinding(glProgram.program,uniformBlockIndex,this.shader.uniformBindCount);this.shader.uniformBindCount++;var id=this.getSignature(group,this.shader.program.uniformData,'ubo');var uboData=this._uboCache[id];if(!uboData){uboData=this._uboCache[id]=generateUniformBufferSync(group,this.shader.program.uniformData);}if(group.autoManage){var data=new Float32Array(uboData.size/4);group.buffer.update(data);}glProgram.uniformGroups[group.id]=uboData.syncFunc;return glProgram.uniformGroups[group.id];};/**\n     * Takes a uniform group and data and generates a unique signature for them.\n     *\n     * @param group - The uniform group to get signature of\n     * @param uniformData - Uniform information generated by the shader\n     * @returns Unique signature of the uniform group\n     */ShaderSystem.prototype.getSignature=function(group,uniformData,preFix){var uniforms=group.uniforms;var strings=[preFix+\"-\"];for(var i in uniforms){strings.push(i);if(uniformData[i]){strings.push(uniformData[i].type);}}return strings.join('-');};/**\n     * Returns the underlying GLShade rof the currently bound shader.\n     *\n     * This can be handy for when you to have a little more control over the setting of your uniforms.\n     *\n     * @return The glProgram for the currently bound Shader for this context\n     */ShaderSystem.prototype.getGlProgram=function(){if(this.shader){return this.shader.program.glPrograms[this.renderer.CONTEXT_UID];}return null;};/**\n     * Generates a glProgram version of the Shader provided.\n     *\n     * @param shader - The shader that the glProgram will be based on.\n     * @return A shiny new glProgram!\n     */ShaderSystem.prototype.generateProgram=function(shader){var gl=this.gl;var program=shader.program;var glProgram=generateProgram(gl,program);program.glPrograms[this.renderer.CONTEXT_UID]=glProgram;return glProgram;};/** Resets ShaderSystem state, does not affect WebGL state. */ShaderSystem.prototype.reset=function(){this.program=null;this.shader=null;};/** Destroys this System and removes all its textures. */ShaderSystem.prototype.destroy=function(){this.renderer=null;// TODO implement destroy method for ShaderSystem\nthis.destroyed=true;};return ShaderSystem;}();/**\n * Maps gl blend combinations to WebGL.\n *\n * @memberof PIXI\n * @function mapWebGLBlendModesToPixi\n * @private\n * @param {WebGLRenderingContext} gl - The rendering context.\n * @param {number[][]} [array=[]] - The array to output into.\n * @return {number[][]} Mapped modes.\n */function mapWebGLBlendModesToPixi(gl,array){if(array===void 0){array=[];}// TODO - premultiply alpha would be different.\n// add a boolean for that!\narray[BLEND_MODES.NORMAL]=[gl.ONE,gl.ONE_MINUS_SRC_ALPHA];array[BLEND_MODES.ADD]=[gl.ONE,gl.ONE];array[BLEND_MODES.MULTIPLY]=[gl.DST_COLOR,gl.ONE_MINUS_SRC_ALPHA,gl.ONE,gl.ONE_MINUS_SRC_ALPHA];array[BLEND_MODES.SCREEN]=[gl.ONE,gl.ONE_MINUS_SRC_COLOR,gl.ONE,gl.ONE_MINUS_SRC_ALPHA];array[BLEND_MODES.OVERLAY]=[gl.ONE,gl.ONE_MINUS_SRC_ALPHA];array[BLEND_MODES.DARKEN]=[gl.ONE,gl.ONE_MINUS_SRC_ALPHA];array[BLEND_MODES.LIGHTEN]=[gl.ONE,gl.ONE_MINUS_SRC_ALPHA];array[BLEND_MODES.COLOR_DODGE]=[gl.ONE,gl.ONE_MINUS_SRC_ALPHA];array[BLEND_MODES.COLOR_BURN]=[gl.ONE,gl.ONE_MINUS_SRC_ALPHA];array[BLEND_MODES.HARD_LIGHT]=[gl.ONE,gl.ONE_MINUS_SRC_ALPHA];array[BLEND_MODES.SOFT_LIGHT]=[gl.ONE,gl.ONE_MINUS_SRC_ALPHA];array[BLEND_MODES.DIFFERENCE]=[gl.ONE,gl.ONE_MINUS_SRC_ALPHA];array[BLEND_MODES.EXCLUSION]=[gl.ONE,gl.ONE_MINUS_SRC_ALPHA];array[BLEND_MODES.HUE]=[gl.ONE,gl.ONE_MINUS_SRC_ALPHA];array[BLEND_MODES.SATURATION]=[gl.ONE,gl.ONE_MINUS_SRC_ALPHA];array[BLEND_MODES.COLOR]=[gl.ONE,gl.ONE_MINUS_SRC_ALPHA];array[BLEND_MODES.LUMINOSITY]=[gl.ONE,gl.ONE_MINUS_SRC_ALPHA];array[BLEND_MODES.NONE]=[0,0];// not-premultiplied blend modes\narray[BLEND_MODES.NORMAL_NPM]=[gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA,gl.ONE,gl.ONE_MINUS_SRC_ALPHA];array[BLEND_MODES.ADD_NPM]=[gl.SRC_ALPHA,gl.ONE,gl.ONE,gl.ONE];array[BLEND_MODES.SCREEN_NPM]=[gl.SRC_ALPHA,gl.ONE_MINUS_SRC_COLOR,gl.ONE,gl.ONE_MINUS_SRC_ALPHA];// composite operations\narray[BLEND_MODES.SRC_IN]=[gl.DST_ALPHA,gl.ZERO];array[BLEND_MODES.SRC_OUT]=[gl.ONE_MINUS_DST_ALPHA,gl.ZERO];array[BLEND_MODES.SRC_ATOP]=[gl.DST_ALPHA,gl.ONE_MINUS_SRC_ALPHA];array[BLEND_MODES.DST_OVER]=[gl.ONE_MINUS_DST_ALPHA,gl.ONE];array[BLEND_MODES.DST_IN]=[gl.ZERO,gl.SRC_ALPHA];array[BLEND_MODES.DST_OUT]=[gl.ZERO,gl.ONE_MINUS_SRC_ALPHA];array[BLEND_MODES.DST_ATOP]=[gl.ONE_MINUS_DST_ALPHA,gl.SRC_ALPHA];array[BLEND_MODES.XOR]=[gl.ONE_MINUS_DST_ALPHA,gl.ONE_MINUS_SRC_ALPHA];// SUBTRACT from flash\narray[BLEND_MODES.SUBTRACT]=[gl.ONE,gl.ONE,gl.ONE,gl.ONE,gl.FUNC_REVERSE_SUBTRACT,gl.FUNC_ADD];return array;}var BLEND$1=0;var OFFSET$1=1;var CULLING$1=2;var DEPTH_TEST$1=3;var WINDING$1=4;var DEPTH_MASK$1=5;/**\n * System plugin to the renderer to manage WebGL state machines.\n *\n * @memberof PIXI\n */var StateSystem=/** @class */function(){function StateSystem(){this.gl=null;this.stateId=0;this.polygonOffset=0;this.blendMode=BLEND_MODES.NONE;this._blendEq=false;// map functions for when we set state..\nthis.map=[];this.map[BLEND$1]=this.setBlend;this.map[OFFSET$1]=this.setOffset;this.map[CULLING$1]=this.setCullFace;this.map[DEPTH_TEST$1]=this.setDepthTest;this.map[WINDING$1]=this.setFrontFace;this.map[DEPTH_MASK$1]=this.setDepthMask;this.checks=[];this.defaultState=new State();this.defaultState.blend=true;}StateSystem.prototype.contextChange=function(gl){this.gl=gl;this.blendModes=mapWebGLBlendModesToPixi(gl);this.set(this.defaultState);this.reset();};/**\n     * Sets the current state\n     *\n     * @param {*} state - The state to set.\n     */StateSystem.prototype.set=function(state){state=state||this.defaultState;// TODO maybe to an object check? ( this.state === state )?\nif(this.stateId!==state.data){var diff=this.stateId^state.data;var i=0;// order from least to most common\nwhile(diff){if(diff&1){// state change!\nthis.map[i].call(this,!!(state.data&1<<i));}diff=diff>>1;i++;}this.stateId=state.data;}// based on the above settings we check for specific modes..\n// for example if blend is active we check and set the blend modes\n// or of polygon offset is active we check the poly depth.\nfor(var i=0;i<this.checks.length;i++){this.checks[i](this,state);}};/**\n     * Sets the state, when previous state is unknown.\n     *\n     * @param {*} state - The state to set\n     */StateSystem.prototype.forceState=function(state){state=state||this.defaultState;for(var i=0;i<this.map.length;i++){this.map[i].call(this,!!(state.data&1<<i));}for(var i=0;i<this.checks.length;i++){this.checks[i](this,state);}this.stateId=state.data;};/**\n     * Sets whether to enable or disable blending.\n     *\n     * @param value - Turn on or off WebGl blending.\n     */StateSystem.prototype.setBlend=function(value){this.updateCheck(StateSystem.checkBlendMode,value);this.gl[value?'enable':'disable'](this.gl.BLEND);};/**\n     * Sets whether to enable or disable polygon offset fill.\n     *\n     * @param value - Turn on or off webgl polygon offset testing.\n     */StateSystem.prototype.setOffset=function(value){this.updateCheck(StateSystem.checkPolygonOffset,value);this.gl[value?'enable':'disable'](this.gl.POLYGON_OFFSET_FILL);};/**\n     * Sets whether to enable or disable depth test.\n     *\n     * @param value - Turn on or off webgl depth testing.\n     */StateSystem.prototype.setDepthTest=function(value){this.gl[value?'enable':'disable'](this.gl.DEPTH_TEST);};/**\n     * Sets whether to enable or disable depth mask.\n     *\n     * @param value - Turn on or off webgl depth mask.\n     */StateSystem.prototype.setDepthMask=function(value){this.gl.depthMask(value);};/**\n     * Sets whether to enable or disable cull face.\n     *\n     * @param {boolean} value - Turn on or off webgl cull face.\n     */StateSystem.prototype.setCullFace=function(value){this.gl[value?'enable':'disable'](this.gl.CULL_FACE);};/**\n     * Sets the gl front face.\n     *\n     * @param {boolean} value - true is clockwise and false is counter-clockwise\n     */StateSystem.prototype.setFrontFace=function(value){this.gl.frontFace(this.gl[value?'CW':'CCW']);};/**\n     * Sets the blend mode.\n     *\n     * @param {number} value - The blend mode to set to.\n     */StateSystem.prototype.setBlendMode=function(value){if(value===this.blendMode){return;}this.blendMode=value;var mode=this.blendModes[value];var gl=this.gl;if(mode.length===2){gl.blendFunc(mode[0],mode[1]);}else{gl.blendFuncSeparate(mode[0],mode[1],mode[2],mode[3]);}if(mode.length===6){this._blendEq=true;gl.blendEquationSeparate(mode[4],mode[5]);}else if(this._blendEq){this._blendEq=false;gl.blendEquationSeparate(gl.FUNC_ADD,gl.FUNC_ADD);}};/**\n     * Sets the polygon offset.\n     *\n     * @param {number} value - the polygon offset\n     * @param {number} scale - the polygon offset scale\n     */StateSystem.prototype.setPolygonOffset=function(value,scale){this.gl.polygonOffset(value,scale);};// used\n/** Resets all the logic and disables the VAOs. */StateSystem.prototype.reset=function(){this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,false);this.forceState(this.defaultState);this._blendEq=true;this.blendMode=-1;this.setBlendMode(0);};/**\n     * Checks to see which updates should be checked based on which settings have been activated.\n     *\n     * For example, if blend is enabled then we should check the blend modes each time the state is changed\n     * or if polygon fill is activated then we need to check if the polygon offset changes.\n     * The idea is that we only check what we have too.\n     *\n     * @param func - the checking function to add or remove\n     * @param value - should the check function be added or removed.\n     */StateSystem.prototype.updateCheck=function(func,value){var index=this.checks.indexOf(func);if(value&&index===-1){this.checks.push(func);}else if(!value&&index!==-1){this.checks.splice(index,1);}};/**\n     * A private little wrapper function that we call to check the blend mode.\n     *\n     * @param System - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */StateSystem.checkBlendMode=function(system,state){system.setBlendMode(state.blendMode);};/**\n     * A private little wrapper function that we call to check the polygon offset.\n     *\n     * @param System - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */StateSystem.checkPolygonOffset=function(system,state){system.setPolygonOffset(1,state.polygonOffset);};/**\n     * @ignore\n     */StateSystem.prototype.destroy=function(){this.gl=null;};return StateSystem;}();/**\n * System plugin to the renderer to manage texture garbage collection on the GPU,\n * ensuring that it does not get clogged up with textures that are no longer being used.\n *\n * @memberof PIXI\n */var TextureGCSystem=/** @class */function(){/** @param renderer - The renderer this System works for. */function TextureGCSystem(renderer){this.renderer=renderer;this.count=0;this.checkCount=0;this.maxIdle=settings.GC_MAX_IDLE;this.checkCountMax=settings.GC_MAX_CHECK_COUNT;this.mode=settings.GC_MODE;}/**\n     * Checks to see when the last time a texture was used\n     * if the texture has not been used for a specified amount of time it will be removed from the GPU\n     */TextureGCSystem.prototype.postrender=function(){if(!this.renderer.renderingToScreen){return;}this.count++;if(this.mode===GC_MODES.MANUAL){return;}this.checkCount++;if(this.checkCount>this.checkCountMax){this.checkCount=0;this.run();}};/**\n     * Checks to see when the last time a texture was used\n     * if the texture has not been used for a specified amount of time it will be removed from the GPU\n     */TextureGCSystem.prototype.run=function(){var tm=this.renderer.texture;var managedTextures=tm.managedTextures;var wasRemoved=false;for(var i=0;i<managedTextures.length;i++){var texture=managedTextures[i];// only supports non generated textures at the moment!\nif(!texture.framebuffer&&this.count-texture.touched>this.maxIdle){tm.destroyTexture(texture,true);managedTextures[i]=null;wasRemoved=true;}}if(wasRemoved){var j=0;for(var i=0;i<managedTextures.length;i++){if(managedTextures[i]!==null){managedTextures[j++]=managedTextures[i];}}managedTextures.length=j;}};/**\n     * Removes all the textures within the specified displayObject and its children from the GPU\n     *\n     * @param {PIXI.DisplayObject} displayObject - the displayObject to remove the textures from.\n     */TextureGCSystem.prototype.unload=function(displayObject){var tm=this.renderer.texture;var texture=displayObject._texture;// only destroy non generated textures\nif(texture&&!texture.framebuffer){tm.destroyTexture(texture);}for(var i=displayObject.children.length-1;i>=0;i--){this.unload(displayObject.children[i]);}};TextureGCSystem.prototype.destroy=function(){this.renderer=null;};return TextureGCSystem;}();/**\n * Returns a lookup table that maps each type-format pair to a compatible internal format.\n *\n * @memberof PIXI\n * @function mapTypeAndFormatToInternalFormat\n * @private\n * @param {WebGLRenderingContext} gl - The rendering context.\n * @return {{ [type: number]: { [format: number]: number } }} Lookup table.\n */function mapTypeAndFormatToInternalFormat(gl){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o,_p,_q,_r,_s,_t,_u,_v,_w,_x;var table;if('WebGL2RenderingContext'in globalThis&&gl instanceof globalThis.WebGL2RenderingContext){table=(_a={},_a[TYPES.UNSIGNED_BYTE]=(_b={},_b[FORMATS.RGBA]=gl.RGBA8,_b[FORMATS.RGB]=gl.RGB8,_b[FORMATS.RG]=gl.RG8,_b[FORMATS.RED]=gl.R8,_b[FORMATS.RGBA_INTEGER]=gl.RGBA8UI,_b[FORMATS.RGB_INTEGER]=gl.RGB8UI,_b[FORMATS.RG_INTEGER]=gl.RG8UI,_b[FORMATS.RED_INTEGER]=gl.R8UI,_b[FORMATS.ALPHA]=gl.ALPHA,_b[FORMATS.LUMINANCE]=gl.LUMINANCE,_b[FORMATS.LUMINANCE_ALPHA]=gl.LUMINANCE_ALPHA,_b),_a[TYPES.BYTE]=(_c={},_c[FORMATS.RGBA]=gl.RGBA8_SNORM,_c[FORMATS.RGB]=gl.RGB8_SNORM,_c[FORMATS.RG]=gl.RG8_SNORM,_c[FORMATS.RED]=gl.R8_SNORM,_c[FORMATS.RGBA_INTEGER]=gl.RGBA8I,_c[FORMATS.RGB_INTEGER]=gl.RGB8I,_c[FORMATS.RG_INTEGER]=gl.RG8I,_c[FORMATS.RED_INTEGER]=gl.R8I,_c),_a[TYPES.UNSIGNED_SHORT]=(_d={},_d[FORMATS.RGBA_INTEGER]=gl.RGBA16UI,_d[FORMATS.RGB_INTEGER]=gl.RGB16UI,_d[FORMATS.RG_INTEGER]=gl.RG16UI,_d[FORMATS.RED_INTEGER]=gl.R16UI,_d[FORMATS.DEPTH_COMPONENT]=gl.DEPTH_COMPONENT16,_d),_a[TYPES.SHORT]=(_e={},_e[FORMATS.RGBA_INTEGER]=gl.RGBA16I,_e[FORMATS.RGB_INTEGER]=gl.RGB16I,_e[FORMATS.RG_INTEGER]=gl.RG16I,_e[FORMATS.RED_INTEGER]=gl.R16I,_e),_a[TYPES.UNSIGNED_INT]=(_f={},_f[FORMATS.RGBA_INTEGER]=gl.RGBA32UI,_f[FORMATS.RGB_INTEGER]=gl.RGB32UI,_f[FORMATS.RG_INTEGER]=gl.RG32UI,_f[FORMATS.RED_INTEGER]=gl.R32UI,_f[FORMATS.DEPTH_COMPONENT]=gl.DEPTH_COMPONENT24,_f),_a[TYPES.INT]=(_g={},_g[FORMATS.RGBA_INTEGER]=gl.RGBA32I,_g[FORMATS.RGB_INTEGER]=gl.RGB32I,_g[FORMATS.RG_INTEGER]=gl.RG32I,_g[FORMATS.RED_INTEGER]=gl.R32I,_g),_a[TYPES.FLOAT]=(_h={},_h[FORMATS.RGBA]=gl.RGBA32F,_h[FORMATS.RGB]=gl.RGB32F,_h[FORMATS.RG]=gl.RG32F,_h[FORMATS.RED]=gl.R32F,_h[FORMATS.DEPTH_COMPONENT]=gl.DEPTH_COMPONENT32F,_h),_a[TYPES.HALF_FLOAT]=(_j={},_j[FORMATS.RGBA]=gl.RGBA16F,_j[FORMATS.RGB]=gl.RGB16F,_j[FORMATS.RG]=gl.RG16F,_j[FORMATS.RED]=gl.R16F,_j),_a[TYPES.UNSIGNED_SHORT_5_6_5]=(_k={},_k[FORMATS.RGB]=gl.RGB565,_k),_a[TYPES.UNSIGNED_SHORT_4_4_4_4]=(_l={},_l[FORMATS.RGBA]=gl.RGBA4,_l),_a[TYPES.UNSIGNED_SHORT_5_5_5_1]=(_m={},_m[FORMATS.RGBA]=gl.RGB5_A1,_m),_a[TYPES.UNSIGNED_INT_2_10_10_10_REV]=(_o={},_o[FORMATS.RGBA]=gl.RGB10_A2,_o[FORMATS.RGBA_INTEGER]=gl.RGB10_A2UI,_o),_a[TYPES.UNSIGNED_INT_10F_11F_11F_REV]=(_p={},_p[FORMATS.RGB]=gl.R11F_G11F_B10F,_p),_a[TYPES.UNSIGNED_INT_5_9_9_9_REV]=(_q={},_q[FORMATS.RGB]=gl.RGB9_E5,_q),_a[TYPES.UNSIGNED_INT_24_8]=(_r={},_r[FORMATS.DEPTH_STENCIL]=gl.DEPTH24_STENCIL8,_r),_a[TYPES.FLOAT_32_UNSIGNED_INT_24_8_REV]=(_s={},_s[FORMATS.DEPTH_STENCIL]=gl.DEPTH32F_STENCIL8,_s),_a);}else{table=(_t={},_t[TYPES.UNSIGNED_BYTE]=(_u={},_u[FORMATS.RGBA]=gl.RGBA,_u[FORMATS.RGB]=gl.RGB,_u[FORMATS.ALPHA]=gl.ALPHA,_u[FORMATS.LUMINANCE]=gl.LUMINANCE,_u[FORMATS.LUMINANCE_ALPHA]=gl.LUMINANCE_ALPHA,_u),_t[TYPES.UNSIGNED_SHORT_5_6_5]=(_v={},_v[FORMATS.RGB]=gl.RGB,_v),_t[TYPES.UNSIGNED_SHORT_4_4_4_4]=(_w={},_w[FORMATS.RGBA]=gl.RGBA,_w),_t[TYPES.UNSIGNED_SHORT_5_5_5_1]=(_x={},_x[FORMATS.RGBA]=gl.RGBA,_x),_t);}return table;}/**\n * Internal texture for WebGL context.\n *\n * @memberof PIXI\n */var GLTexture=/** @class */function(){function GLTexture(texture){this.texture=texture;this.width=-1;this.height=-1;this.dirtyId=-1;this.dirtyStyleId=-1;this.mipmap=false;this.wrapMode=33071;this.type=TYPES.UNSIGNED_BYTE;this.internalFormat=FORMATS.RGBA;this.samplerType=0;}return GLTexture;}();/**\n * System plugin to the renderer to manage textures.\n *\n * @memberof PIXI\n */var TextureSystem=/** @class */function(){/**\n     * @param renderer - The renderer this system works for.\n     */function TextureSystem(renderer){this.renderer=renderer;// TODO set to max textures...\nthis.boundTextures=[];this.currentLocation=-1;this.managedTextures=[];this._unknownBoundTextures=false;this.unknownTexture=new BaseTexture();this.hasIntegerTextures=false;}/** Sets up the renderer context and necessary buffers. */TextureSystem.prototype.contextChange=function(){var gl=this.gl=this.renderer.gl;this.CONTEXT_UID=this.renderer.CONTEXT_UID;this.webGLVersion=this.renderer.context.webGLVersion;this.internalFormats=mapTypeAndFormatToInternalFormat(gl);var maxTextures=gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);this.boundTextures.length=maxTextures;for(var i=0;i<maxTextures;i++){this.boundTextures[i]=null;}// TODO move this.. to a nice make empty textures class..\nthis.emptyTextures={};var emptyTexture2D=new GLTexture(gl.createTexture());gl.bindTexture(gl.TEXTURE_2D,emptyTexture2D.texture);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,1,1,0,gl.RGBA,gl.UNSIGNED_BYTE,new Uint8Array(4));this.emptyTextures[gl.TEXTURE_2D]=emptyTexture2D;this.emptyTextures[gl.TEXTURE_CUBE_MAP]=new GLTexture(gl.createTexture());gl.bindTexture(gl.TEXTURE_CUBE_MAP,this.emptyTextures[gl.TEXTURE_CUBE_MAP].texture);for(var i=0;i<6;i++){gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X+i,0,gl.RGBA,1,1,0,gl.RGBA,gl.UNSIGNED_BYTE,null);}gl.texParameteri(gl.TEXTURE_CUBE_MAP,gl.TEXTURE_MAG_FILTER,gl.LINEAR);gl.texParameteri(gl.TEXTURE_CUBE_MAP,gl.TEXTURE_MIN_FILTER,gl.LINEAR);for(var i=0;i<this.boundTextures.length;i++){this.bind(null,i);}};/**\n     * Bind a texture to a specific location\n     *\n     * If you want to unbind something, please use `unbind(texture)` instead of `bind(null, textureLocation)`\n     *\n     * @param texture_ - Texture to bind\n     * @param [location=0] - Location to bind at\n     */TextureSystem.prototype.bind=function(texture,location){if(location===void 0){location=0;}var gl=this.gl;texture=texture===null||texture===void 0?void 0:texture.castToBaseTexture();// cannot bind partial texture\n// TODO: report a warning\nif(texture&&texture.valid&&!texture.parentTextureArray){texture.touched=this.renderer.textureGC.count;var glTexture=texture._glTextures[this.CONTEXT_UID]||this.initTexture(texture);if(this.boundTextures[location]!==texture){if(this.currentLocation!==location){this.currentLocation=location;gl.activeTexture(gl.TEXTURE0+location);}gl.bindTexture(texture.target,glTexture.texture);}if(glTexture.dirtyId!==texture.dirtyId){if(this.currentLocation!==location){this.currentLocation=location;gl.activeTexture(gl.TEXTURE0+location);}this.updateTexture(texture);}this.boundTextures[location]=texture;}else{if(this.currentLocation!==location){this.currentLocation=location;gl.activeTexture(gl.TEXTURE0+location);}gl.bindTexture(gl.TEXTURE_2D,this.emptyTextures[gl.TEXTURE_2D].texture);this.boundTextures[location]=null;}};/**\n     * Resets texture location and bound textures\n     *\n     * Actual `bind(null, i)` calls will be performed at next `unbind()` call\n     */TextureSystem.prototype.reset=function(){this._unknownBoundTextures=true;this.hasIntegerTextures=false;this.currentLocation=-1;for(var i=0;i<this.boundTextures.length;i++){this.boundTextures[i]=this.unknownTexture;}};/**\n     * Unbind a texture.\n     *\n     * @param texture - Texture to bind\n     */TextureSystem.prototype.unbind=function(texture){var _a=this,gl=_a.gl,boundTextures=_a.boundTextures;if(this._unknownBoundTextures){this._unknownBoundTextures=false;// someone changed webGL state,\n// we have to be sure that our texture does not appear in multi-texture renderer samplers\nfor(var i=0;i<boundTextures.length;i++){if(boundTextures[i]===this.unknownTexture){this.bind(null,i);}}}for(var i=0;i<boundTextures.length;i++){if(boundTextures[i]===texture){if(this.currentLocation!==i){gl.activeTexture(gl.TEXTURE0+i);this.currentLocation=i;}gl.bindTexture(texture.target,this.emptyTextures[texture.target].texture);boundTextures[i]=null;}}};/**\n     * Ensures that current boundTextures all have FLOAT sampler type,\n     * see {@link PIXI.SAMPLER_TYPES} for explanation.\n     *\n     * @param maxTextures - number of locations to check\n     */TextureSystem.prototype.ensureSamplerType=function(maxTextures){var _a=this,boundTextures=_a.boundTextures,hasIntegerTextures=_a.hasIntegerTextures,CONTEXT_UID=_a.CONTEXT_UID;if(!hasIntegerTextures){return;}for(var i=maxTextures-1;i>=0;--i){var tex=boundTextures[i];if(tex){var glTexture=tex._glTextures[CONTEXT_UID];if(glTexture.samplerType!==SAMPLER_TYPES.FLOAT){this.renderer.texture.unbind(tex);}}}};/**\n     * Initialize a texture\n     *\n     * @private\n     * @param texture - Texture to initialize\n     */TextureSystem.prototype.initTexture=function(texture){var glTexture=new GLTexture(this.gl.createTexture());// guarantee an update..\nglTexture.dirtyId=-1;texture._glTextures[this.CONTEXT_UID]=glTexture;this.managedTextures.push(texture);texture.on('dispose',this.destroyTexture,this);return glTexture;};TextureSystem.prototype.initTextureType=function(texture,glTexture){var _a,_b;glTexture.internalFormat=(_b=(_a=this.internalFormats[texture.type])===null||_a===void 0?void 0:_a[texture.format])!==null&&_b!==void 0?_b:texture.format;if(this.webGLVersion===2&&texture.type===TYPES.HALF_FLOAT){// TYPES.HALF_FLOAT is WebGL1 HALF_FLOAT_OES\n// we have to convert it to WebGL HALF_FLOAT\nglTexture.type=this.gl.HALF_FLOAT;}else{glTexture.type=texture.type;}};/**\n     * Update a texture\n     *\n     * @private\n     * @param {PIXI.BaseTexture} texture - Texture to initialize\n     */TextureSystem.prototype.updateTexture=function(texture){var glTexture=texture._glTextures[this.CONTEXT_UID];if(!glTexture){return;}var renderer=this.renderer;this.initTextureType(texture,glTexture);if(texture.resource&&texture.resource.upload(renderer,texture,glTexture)){// texture is uploaded, dont do anything!\nif(glTexture.samplerType!==SAMPLER_TYPES.FLOAT){this.hasIntegerTextures=true;}}else{// default, renderTexture-like logic\nvar width=texture.realWidth;var height=texture.realHeight;var gl=renderer.gl;if(glTexture.width!==width||glTexture.height!==height||glTexture.dirtyId<0){glTexture.width=width;glTexture.height=height;gl.texImage2D(texture.target,0,glTexture.internalFormat,width,height,0,texture.format,glTexture.type,null);}}// lets only update what changes..\nif(texture.dirtyStyleId!==glTexture.dirtyStyleId){this.updateTextureStyle(texture);}glTexture.dirtyId=texture.dirtyId;};/**\n     * Deletes the texture from WebGL\n     *\n     * @private\n     * @param texture_ - the texture to destroy\n     * @param [skipRemove=false] - Whether to skip removing the texture from the TextureManager.\n     */TextureSystem.prototype.destroyTexture=function(texture,skipRemove){var gl=this.gl;texture=texture.castToBaseTexture();if(texture._glTextures[this.CONTEXT_UID]){this.unbind(texture);gl.deleteTexture(texture._glTextures[this.CONTEXT_UID].texture);texture.off('dispose',this.destroyTexture,this);delete texture._glTextures[this.CONTEXT_UID];if(!skipRemove){var i=this.managedTextures.indexOf(texture);if(i!==-1){removeItems(this.managedTextures,i,1);}}}};/**\n     * Update texture style such as mipmap flag\n     *\n     * @private\n     * @param {PIXI.BaseTexture} texture - Texture to update\n     */TextureSystem.prototype.updateTextureStyle=function(texture){var glTexture=texture._glTextures[this.CONTEXT_UID];if(!glTexture){return;}if((texture.mipmap===MIPMAP_MODES.POW2||this.webGLVersion!==2)&&!texture.isPowerOfTwo){glTexture.mipmap=false;}else{glTexture.mipmap=texture.mipmap>=1;}if(this.webGLVersion!==2&&!texture.isPowerOfTwo){glTexture.wrapMode=WRAP_MODES.CLAMP;}else{glTexture.wrapMode=texture.wrapMode;}if(texture.resource&&texture.resource.style(this.renderer,texture,glTexture));else{this.setStyle(texture,glTexture);}glTexture.dirtyStyleId=texture.dirtyStyleId;};/**\n     * Set style for texture\n     *\n     * @private\n     * @param texture - Texture to update\n     * @param glTexture\n     */TextureSystem.prototype.setStyle=function(texture,glTexture){var gl=this.gl;if(glTexture.mipmap&&texture.mipmap!==MIPMAP_MODES.ON_MANUAL){gl.generateMipmap(texture.target);}gl.texParameteri(texture.target,gl.TEXTURE_WRAP_S,glTexture.wrapMode);gl.texParameteri(texture.target,gl.TEXTURE_WRAP_T,glTexture.wrapMode);if(glTexture.mipmap){/* eslint-disable max-len */gl.texParameteri(texture.target,gl.TEXTURE_MIN_FILTER,texture.scaleMode===SCALE_MODES.LINEAR?gl.LINEAR_MIPMAP_LINEAR:gl.NEAREST_MIPMAP_NEAREST);/* eslint-disable max-len */var anisotropicExt=this.renderer.context.extensions.anisotropicFiltering;if(anisotropicExt&&texture.anisotropicLevel>0&&texture.scaleMode===SCALE_MODES.LINEAR){var level=Math.min(texture.anisotropicLevel,gl.getParameter(anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT));gl.texParameterf(texture.target,anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT,level);}}else{gl.texParameteri(texture.target,gl.TEXTURE_MIN_FILTER,texture.scaleMode===SCALE_MODES.LINEAR?gl.LINEAR:gl.NEAREST);}gl.texParameteri(texture.target,gl.TEXTURE_MAG_FILTER,texture.scaleMode===SCALE_MODES.LINEAR?gl.LINEAR:gl.NEAREST);};TextureSystem.prototype.destroy=function(){this.renderer=null;};return TextureSystem;}();var _systems={__proto__:null,FilterSystem:FilterSystem,BatchSystem:BatchSystem,ContextSystem:ContextSystem,FramebufferSystem:FramebufferSystem,GeometrySystem:GeometrySystem,MaskSystem:MaskSystem,ScissorSystem:ScissorSystem,StencilSystem:StencilSystem,ProjectionSystem:ProjectionSystem,RenderTextureSystem:RenderTextureSystem,ShaderSystem:ShaderSystem,StateSystem:StateSystem,TextureGCSystem:TextureGCSystem,TextureSystem:TextureSystem};var tempMatrix$2=new Matrix();/**\n * The AbstractRenderer is the base for a PixiJS Renderer. It is extended by the {@link PIXI.CanvasRenderer}\n * and {@link PIXI.Renderer} which can be used for rendering a PixiJS scene.\n *\n * @abstract\n * @class\n * @extends PIXI.utils.EventEmitter\n * @memberof PIXI\n */var AbstractRenderer=/** @class */function(_super){__extends(AbstractRenderer,_super);/**\n     * @param system - The name of the system this renderer is for.\n     * @param [options] - The optional renderer parameters.\n     * @param {number} [options.width=800] - The width of the screen.\n     * @param {number} [options.height=600] - The height of the screen.\n     * @param {HTMLCanvasElement} [options.view] - The canvas to use as a view, optional.\n     * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.\n     *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the\n     *   canvas needs to be opaque, possibly for performance reasons on some older devices.\n     * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n     *   resolutions other than 1.\n     * @param {boolean} [options.antialias=false] - Sets antialias\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.\n     * @param {boolean} [options.preserveDrawingBuffer=false] - Enables drawing buffer preservation,\n     *  enable this if you need to call toDataUrl on the WebGL context.\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n     *      not before the new render pass.\n     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n     *  (shown if not transparent).\n     * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).\n     */function AbstractRenderer(type,options){if(type===void 0){type=RENDERER_TYPE.UNKNOWN;}var _this=_super.call(this)||this;// Add the default render options\noptions=Object.assign({},settings.RENDER_OPTIONS,options);/**\n         * The supplied constructor options.\n         *\n         * @member {Object}\n         * @readOnly\n         */_this.options=options;/**\n         * The type of the renderer.\n         *\n         * @member {number}\n         * @default PIXI.RENDERER_TYPE.UNKNOWN\n         * @see PIXI.RENDERER_TYPE\n         */_this.type=type;/**\n         * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n         *\n         * Its safe to use as filterArea or hitArea for the whole stage.\n         *\n         * @member {PIXI.Rectangle}\n         */_this.screen=new Rectangle(0,0,options.width,options.height);/**\n         * The canvas element that everything is drawn to.\n         *\n         * @member {HTMLCanvasElement}\n         */_this.view=options.view||document.createElement('canvas');/**\n         * The resolution / device pixel ratio of the renderer.\n         *\n         * @member {number}\n         * @default PIXI.settings.RESOLUTION\n         */_this.resolution=options.resolution||settings.RESOLUTION;/**\n         * Pass-thru setting for the canvas' context `alpha` property. This is typically\n         * not something you need to fiddle with. If you want transparency, use `backgroundAlpha`.\n         *\n         * @member {boolean}\n         */_this.useContextAlpha=options.useContextAlpha;/**\n         * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n         *\n         * @member {boolean}\n         */_this.autoDensity=!!options.autoDensity;/**\n         * The value of the preserveDrawingBuffer flag affects whether or not the contents of\n         * the stencil buffer is retained after rendering.\n         *\n         * @member {boolean}\n         */_this.preserveDrawingBuffer=options.preserveDrawingBuffer;/**\n         * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n         * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\n         * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect\n         * to clear the canvas every frame. Disable this by setting this to false. For example, if\n         * your game has a canvas filling background image you often don't need this set.\n         *\n         * @member {boolean}\n         * @default\n         */_this.clearBeforeRender=options.clearBeforeRender;/**\n         * The background color as a number.\n         *\n         * @member {number}\n         * @protected\n         */_this._backgroundColor=0x000000;/**\n         * The background color as an [R, G, B, A] array.\n         *\n         * @member {number[]}\n         * @protected\n         */_this._backgroundColorRgba=[0,0,0,1];/**\n         * The background color as a string.\n         *\n         * @member {string}\n         * @protected\n         */_this._backgroundColorString='#000000';_this.backgroundColor=options.backgroundColor||_this._backgroundColor;// run bg color setter\n_this.backgroundAlpha=options.backgroundAlpha;// @deprecated\nif(options.transparent!==undefined){deprecation('6.0.0','Option transparent is deprecated, please use backgroundAlpha instead.');_this.useContextAlpha=options.transparent;_this.backgroundAlpha=options.transparent?0:1;}/**\n         * The last root object that the renderer tried to render.\n         *\n         * @member {PIXI.DisplayObject}\n         * @protected\n         */_this._lastObjectRendered=null;/**\n         * Collection of plugins.\n         * @readonly\n         * @member {object}\n         */_this.plugins={};return _this;}/**\n     * Initialize the plugins.\n     *\n     * @protected\n     * @param {object} staticMap - The dictionary of statically saved plugins.\n     */AbstractRenderer.prototype.initPlugins=function(staticMap){for(var o in staticMap){this.plugins[o]=new staticMap[o](this);}};Object.defineProperty(AbstractRenderer.prototype,\"width\",{/**\n         * Same as view.width, actual number of pixels in the canvas by horizontal.\n         *\n         * @member {number}\n         * @readonly\n         * @default 800\n         */get:function get(){return this.view.width;},enumerable:false,configurable:true});Object.defineProperty(AbstractRenderer.prototype,\"height\",{/**\n         * Same as view.height, actual number of pixels in the canvas by vertical.\n         *\n         * @member {number}\n         * @readonly\n         * @default 600\n         */get:function get(){return this.view.height;},enumerable:false,configurable:true});/**\n     * Resizes the screen and canvas as close as possible to the specified width and height.\n     * Canvas dimensions are multiplied by resolution and rounded to the nearest integers.\n     * The new canvas dimensions divided by the resolution become the new screen dimensions.\n     *\n     * @param desiredScreenWidth - The desired width of the screen.\n     * @param desiredScreenHeight - The desired height of the screen.\n     */AbstractRenderer.prototype.resize=function(desiredScreenWidth,desiredScreenHeight){this.view.width=Math.round(desiredScreenWidth*this.resolution);this.view.height=Math.round(desiredScreenHeight*this.resolution);var screenWidth=this.view.width/this.resolution;var screenHeight=this.view.height/this.resolution;this.screen.width=screenWidth;this.screen.height=screenHeight;if(this.autoDensity){this.view.style.width=screenWidth+\"px\";this.view.style.height=screenHeight+\"px\";}/**\n         * Fired after view has been resized.\n         *\n         * @event PIXI.Renderer#resize\n         * @param {number} screenWidth - The new width of the screen.\n         * @param {number} screenHeight - The new height of the screen.\n         */this.emit('resize',screenWidth,screenHeight);};/**\n     * @ignore\n     */AbstractRenderer.prototype.generateTexture=function(displayObject,options,resolution,region){if(options===void 0){options={};}// @deprecated parameters spread, use options instead\nif(typeof options==='number'){deprecation('6.1.0','generateTexture options (scaleMode, resolution, region) are now object options.');options={scaleMode:options,resolution:resolution,region:region};}var manualRegion=options.region,textureOptions=__rest(options,[\"region\"]);region=manualRegion||displayObject.getLocalBounds(null,true);// minimum texture size is 1x1, 0x0 will throw an error\nif(region.width===0){region.width=1;}if(region.height===0){region.height=1;}var renderTexture=RenderTexture.create(_assign({width:region.width,height:region.height},textureOptions));tempMatrix$2.tx=-region.x;tempMatrix$2.ty=-region.y;this.render(displayObject,{renderTexture:renderTexture,clear:false,transform:tempMatrix$2,skipUpdateTransform:!!displayObject.parent});return renderTexture;};/**\n     * Removes everything from the renderer and optionally removes the Canvas DOM element.\n     *\n     * @param [removeView=false] - Removes the Canvas element from the DOM.\n     */AbstractRenderer.prototype.destroy=function(removeView){for(var o in this.plugins){this.plugins[o].destroy();this.plugins[o]=null;}if(removeView&&this.view.parentNode){this.view.parentNode.removeChild(this.view);}var thisAny=this;// null-ing all objects, that's a tradition!\nthisAny.plugins=null;thisAny.type=RENDERER_TYPE.UNKNOWN;thisAny.view=null;thisAny.screen=null;thisAny._tempDisplayObjectParent=null;thisAny.options=null;this._backgroundColorRgba=null;this._backgroundColorString=null;this._lastObjectRendered=null;};Object.defineProperty(AbstractRenderer.prototype,\"backgroundColor\",{/**\n         * The background color to fill if not transparent\n         *\n         * @member {number}\n         */get:function get(){return this._backgroundColor;},set:function set(value){this._backgroundColor=value;this._backgroundColorString=hex2string(value);hex2rgb(value,this._backgroundColorRgba);},enumerable:false,configurable:true});Object.defineProperty(AbstractRenderer.prototype,\"backgroundAlpha\",{/**\n         * The background color alpha. Setting this to 0 will make the canvas transparent.\n         *\n         * @member {number}\n         */get:function get(){return this._backgroundColorRgba[3];},set:function set(value){this._backgroundColorRgba[3]=value;},enumerable:false,configurable:true});return AbstractRenderer;}(EventEmitter);var GLBuffer=/** @class */function(){function GLBuffer(buffer){this.buffer=buffer||null;this.updateID=-1;this.byteLength=-1;this.refCount=0;}return GLBuffer;}();/**\n * System plugin to the renderer to manage buffers.\n *\n * WebGL uses Buffers as a way to store objects to the GPU.\n * This system makes working with them a lot easier.\n *\n * Buffers are used in three main places in WebGL\n * - geometry information\n * - Uniform information (via uniform buffer objects - a WebGL 2 only feature)\n * - Transform feedback information. (WebGL 2 only feature)\n *\n * This system will handle the binding of buffers to the GPU as well as uploading\n * them. With this system, you never need to work directly with GPU buffers, but instead work with\n * the PIXI.Buffer class.\n *\n *\n * @class\n * @memberof PIXI\n */var BufferSystem=/** @class */function(){/**\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\n     */function BufferSystem(renderer){this.renderer=renderer;this.managedBuffers={};this.boundBufferBases={};}/**\n     * @ignore\n     */BufferSystem.prototype.destroy=function(){this.renderer=null;};/**\n     * Sets up the renderer context and necessary buffers.\n     */BufferSystem.prototype.contextChange=function(){this.disposeAll(true);this.gl=this.renderer.gl;// TODO fill out...\nthis.CONTEXT_UID=this.renderer.CONTEXT_UID;};/**\n     * This binds specified buffer. On first run, it will create the webGL buffers for the context too\n     *\n     * @param buffer - the buffer to bind to the renderer\n     */BufferSystem.prototype.bind=function(buffer){var _a=this,gl=_a.gl,CONTEXT_UID=_a.CONTEXT_UID;var glBuffer=buffer._glBuffers[CONTEXT_UID]||this.createGLBuffer(buffer);gl.bindBuffer(buffer.type,glBuffer.buffer);};/**\n     * Binds an uniform buffer to at the given index.\n     *\n     * A cache is used so a buffer will not be bound again if already bound.\n     *\n     * @param buffer - the buffer to bind\n     * @param index - the base index to bind it to.\n     */BufferSystem.prototype.bindBufferBase=function(buffer,index){var _a=this,gl=_a.gl,CONTEXT_UID=_a.CONTEXT_UID;if(this.boundBufferBases[index]!==buffer){var glBuffer=buffer._glBuffers[CONTEXT_UID]||this.createGLBuffer(buffer);this.boundBufferBases[index]=buffer;gl.bindBufferBase(gl.UNIFORM_BUFFER,index,glBuffer.buffer);}};/**\n     * Binds a buffer whilst also binding its range.\n     * This will make the buffer start from the offset supplied rather than 0 when it is read.\n     *\n     * @param buffer - the buffer to bind\n     * @param index - the base index to bind at, defaults to 0\n     * @param offset - the offset to bind at (this is blocks of 256). 0 = 0, 1 = 256, 2 = 512 etc\n     */BufferSystem.prototype.bindBufferRange=function(buffer,index,offset){var _a=this,gl=_a.gl,CONTEXT_UID=_a.CONTEXT_UID;offset=offset||0;var glBuffer=buffer._glBuffers[CONTEXT_UID]||this.createGLBuffer(buffer);gl.bindBufferRange(gl.UNIFORM_BUFFER,index||0,glBuffer.buffer,offset*256,256);};/**\n     * Will ensure the data in the buffer is uploaded to the GPU.\n     *\n     * @param {PIXI.Buffer} buffer - the buffer to update\n     */BufferSystem.prototype.update=function(buffer){var _a=this,gl=_a.gl,CONTEXT_UID=_a.CONTEXT_UID;var glBuffer=buffer._glBuffers[CONTEXT_UID];if(buffer._updateID===glBuffer.updateID){return;}glBuffer.updateID=buffer._updateID;gl.bindBuffer(buffer.type,glBuffer.buffer);if(glBuffer.byteLength>=buffer.data.byteLength){// offset is always zero for now!\ngl.bufferSubData(buffer.type,0,buffer.data);}else{var drawType=buffer.static?gl.STATIC_DRAW:gl.DYNAMIC_DRAW;glBuffer.byteLength=buffer.data.byteLength;gl.bufferData(buffer.type,buffer.data,drawType);}};/**\n     * Disposes buffer\n     * @param {PIXI.Buffer} buffer - buffer with data\n     * @param {boolean} [contextLost=false] - If context was lost, we suppress deleteVertexArray\n     */BufferSystem.prototype.dispose=function(buffer,contextLost){if(!this.managedBuffers[buffer.id]){return;}delete this.managedBuffers[buffer.id];var glBuffer=buffer._glBuffers[this.CONTEXT_UID];var gl=this.gl;buffer.disposeRunner.remove(this);if(!glBuffer){return;}if(!contextLost){gl.deleteBuffer(glBuffer.buffer);}delete buffer._glBuffers[this.CONTEXT_UID];};/**\n     * dispose all WebGL resources of all managed buffers\n     * @param {boolean} [contextLost=false] - If context was lost, we suppress `gl.delete` calls\n     */BufferSystem.prototype.disposeAll=function(contextLost){var all=Object.keys(this.managedBuffers);for(var i=0;i<all.length;i++){this.dispose(this.managedBuffers[all[i]],contextLost);}};/**\n     * creates and attaches a GLBuffer object tied to the current context.\n     * @protected\n     */BufferSystem.prototype.createGLBuffer=function(buffer){var _a=this,CONTEXT_UID=_a.CONTEXT_UID,gl=_a.gl;buffer._glBuffers[CONTEXT_UID]=new GLBuffer(gl.createBuffer());this.managedBuffers[buffer.id]=buffer;buffer.disposeRunner.add(this);return buffer._glBuffers[CONTEXT_UID];};return BufferSystem;}();/**\n * The Renderer draws the scene and all its content onto a WebGL enabled canvas.\n *\n * This renderer should be used for browsers that support WebGL.\n *\n * This renderer works by automatically managing WebGLBatchesm, so no need for Sprite Batches or Sprite Clouds.\n * Don't forget to add the view to your DOM or you will not see anything!\n *\n * Renderer is composed of systems that manage specific tasks. The following systems are added by default\n * whenever you create a renderer:\n *\n * | System                               | Description                                                                   |\n * | ------------------------------------ | ----------------------------------------------------------------------------- |\n * | {@link PIXI.BatchSystem}             | This manages object renderers that defer rendering until a flush.             |\n * | {@link PIXI.ContextSystem}           | This manages the WebGL context and extensions.                                |\n * | {@link PIXI.EventSystem}             | This manages UI events.                                                       |\n * | {@link PIXI.FilterSystem}            | This manages the filtering pipeline for post-processing effects.              |\n * | {@link PIXI.FramebufferSystem}       | This manages framebuffers, which are used for offscreen rendering.            |\n * | {@link PIXI.GeometrySystem}          | This manages geometries & buffers, which are used to draw object meshes.      |\n * | {@link PIXI.MaskSystem}              | This manages masking operations.                                              |\n * | {@link PIXI.ProjectionSystem}        | This manages the `projectionMatrix`, used by shaders to get NDC coordinates.  |\n * | {@link PIXI.RenderTextureSystem}     | This manages render-textures, which are an abstraction over framebuffers.     |\n * | {@link PIXI.ScissorSystem}           | This handles scissor masking, and is used internally by {@link MaskSystem}    |\n * | {@link PIXI.ShaderSystem}            | This manages shaders, programs that run on the GPU to calculate 'em pixels.   |\n * | {@link PIXI.StateSystem}             | This manages the WebGL state variables like blend mode, depth testing, etc.   |\n * | {@link PIXI.StencilSystem}           | This handles stencil masking, and is used internally by {@link MaskSystem}    |\n * | {@link PIXI.TextureSystem}           | This manages textures and their resources on the GPU.                         |\n * | {@link PIXI.TextureGCSystem}         | This will automatically remove textures from the GPU if they are not used.    |\n *\n * The breadth of the API surface provided by the renderer is contained within these systems.\n *\n * @memberof PIXI\n */var Renderer=/** @class */function(_super){__extends(Renderer,_super);/**\n     * @param [options] - The optional renderer parameters.\n     * @param {number} [options.width=800] - The width of the screen.\n     * @param {number} [options.height=600] - The height of the screen.\n     * @param {HTMLCanvasElement} [options.view] - The canvas to use as a view, optional.\n     * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.\n     *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the\n     *   canvas needs to be opaque, possibly for performance reasons on some older devices.\n     * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n     *   resolutions other than 1.\n     * @param {boolean} [options.antialias=false] - Sets antialias. If not available natively then FXAA\n     *  antialiasing is used.\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear\n     *  the canvas or not before the new render pass. If you wish to set this to false, you *must* set\n     *  preserveDrawingBuffer to `true`.\n     * @param {boolean} [options.preserveDrawingBuffer=false] - Enables drawing buffer preservation,\n     *  enable this if you need to call toDataUrl on the WebGL context.\n     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n     *  (shown if not transparent).\n     * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).\n     * @param {string} [options.powerPreference] - Parameter passed to WebGL context, set to \"high-performance\"\n     *  for devices with dual graphics card.\n     * @param {object} [options.context] - If WebGL context already exists, all parameters must be taken from it.\n     */function Renderer(options){var _this=_super.call(this,RENDERER_TYPE.WEBGL,options)||this;// the options will have been modified here in the super constructor with pixi's default settings..\noptions=_this.options;_this.gl=null;_this.CONTEXT_UID=0;_this.runners={destroy:new Runner('destroy'),contextChange:new Runner('contextChange'),reset:new Runner('reset'),update:new Runner('update'),postrender:new Runner('postrender'),prerender:new Runner('prerender'),resize:new Runner('resize')};_this.runners.contextChange.add(_this);_this.globalUniforms=new UniformGroup({projectionMatrix:new Matrix()},true);_this.addSystem(MaskSystem,'mask').addSystem(ContextSystem,'context').addSystem(StateSystem,'state').addSystem(ShaderSystem,'shader').addSystem(TextureSystem,'texture').addSystem(BufferSystem,'buffer').addSystem(GeometrySystem,'geometry').addSystem(FramebufferSystem,'framebuffer').addSystem(ScissorSystem,'scissor').addSystem(StencilSystem,'stencil').addSystem(ProjectionSystem,'projection').addSystem(TextureGCSystem,'textureGC').addSystem(FilterSystem,'filter').addSystem(RenderTextureSystem,'renderTexture').addSystem(BatchSystem,'batch');_this.initPlugins(Renderer.__plugins);_this.multisample=undefined;/*\n         * The options passed in to create a new WebGL context.\n         */if(options.context){_this.context.initFromContext(options.context);}else{_this.context.initFromOptions({alpha:!!_this.useContextAlpha,antialias:options.antialias,premultipliedAlpha:_this.useContextAlpha&&_this.useContextAlpha!=='notMultiplied',stencil:true,preserveDrawingBuffer:options.preserveDrawingBuffer,powerPreference:_this.options.powerPreference});}_this.renderingToScreen=true;sayHello(_this.context.webGLVersion===2?'WebGL 2':'WebGL 1');_this.resize(_this.options.width,_this.options.height);return _this;}/**\n     * Create renderer if WebGL is available. Overrideable\n     * by the **@pixi/canvas-renderer** package to allow fallback.\n     * throws error if WebGL is not available.\n     *\n     * @private\n     */Renderer.create=function(options){if(isWebGLSupported()){return new Renderer(options);}throw new Error('WebGL unsupported in this browser, use \"pixi.js-legacy\" for fallback canvas2d support.');};Renderer.prototype.contextChange=function(){var gl=this.gl;var samples;if(this.context.webGLVersion===1){var framebuffer=gl.getParameter(gl.FRAMEBUFFER_BINDING);gl.bindFramebuffer(gl.FRAMEBUFFER,null);samples=gl.getParameter(gl.SAMPLES);gl.bindFramebuffer(gl.FRAMEBUFFER,framebuffer);}else{var framebuffer=gl.getParameter(gl.DRAW_FRAMEBUFFER_BINDING);gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER,null);samples=gl.getParameter(gl.SAMPLES);gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER,framebuffer);}if(samples>=MSAA_QUALITY.HIGH){this.multisample=MSAA_QUALITY.HIGH;}else if(samples>=MSAA_QUALITY.MEDIUM){this.multisample=MSAA_QUALITY.MEDIUM;}else if(samples>=MSAA_QUALITY.LOW){this.multisample=MSAA_QUALITY.LOW;}else{this.multisample=MSAA_QUALITY.NONE;}};/**\n     * Add a new system to the renderer.\n     *\n     * @param ClassRef - Class reference\n     * @param name - Property name for system, if not specified\n     *        will use a static `name` property on the class itself. This\n     *        name will be assigned as s property on the Renderer so make\n     *        sure it doesn't collide with properties on Renderer.\n     * @return Return instance of renderer\n     */Renderer.prototype.addSystem=function(ClassRef,name){var system=new ClassRef(this);if(this[name]){throw new Error(\"Whoops! The name \\\"\"+name+\"\\\" is already in use\");}this[name]=system;for(var i in this.runners){this.runners[i].add(system);}/**\n         * Fired after rendering finishes.\n         *\n         * @event PIXI.Renderer#postrender\n         */ /**\n         * Fired before rendering starts.\n         *\n         * @event PIXI.Renderer#prerender\n         */ /**\n         * Fired when the WebGL context is set.\n         *\n         * @event PIXI.Renderer#context\n         * @param {WebGLRenderingContext} gl - WebGL context.\n         */return this;};/**\n     * @ignore\n     */Renderer.prototype.render=function(displayObject,options){var renderTexture;var clear;var transform;var skipUpdateTransform;if(options){if(options instanceof RenderTexture){deprecation('6.0.0','Renderer#render arguments changed, use options instead.');/* eslint-disable prefer-rest-params */renderTexture=options;clear=arguments[2];transform=arguments[3];skipUpdateTransform=arguments[4];/* eslint-enable prefer-rest-params */}else{renderTexture=options.renderTexture;clear=options.clear;transform=options.transform;skipUpdateTransform=options.skipUpdateTransform;}}// can be handy to know!\nthis.renderingToScreen=!renderTexture;this.runners.prerender.emit();this.emit('prerender');// apply a transform at a GPU level\nthis.projection.transform=transform;// no point rendering if our context has been blown up!\nif(this.context.isLost){return;}if(!renderTexture){this._lastObjectRendered=displayObject;}if(!skipUpdateTransform){// update the scene graph\nvar cacheParent=displayObject.enableTempParent();displayObject.updateTransform();displayObject.disableTempParent(cacheParent);// displayObject.hitArea = //TODO add a temp hit area\n}this.renderTexture.bind(renderTexture);this.batch.currentRenderer.start();if(clear!==undefined?clear:this.clearBeforeRender){this.renderTexture.clear();}displayObject.render(this);// apply transform..\nthis.batch.currentRenderer.flush();if(renderTexture){renderTexture.baseTexture.update();}this.runners.postrender.emit();// reset transform after render\nthis.projection.transform=null;this.emit('postrender');};/**\n     * @override\n     * @ignore\n     */Renderer.prototype.generateTexture=function(displayObject,options,resolution,region){if(options===void 0){options={};}var renderTexture=_super.prototype.generateTexture.call(this,displayObject,options,resolution,region);this.framebuffer.blit();return renderTexture;};/**\n     * Resizes the WebGL view to the specified width and height.\n     *\n     * @param desiredScreenWidth - The desired width of the screen.\n     * @param desiredScreenHeight - The desired height of the screen.\n     */Renderer.prototype.resize=function(desiredScreenWidth,desiredScreenHeight){_super.prototype.resize.call(this,desiredScreenWidth,desiredScreenHeight);this.runners.resize.emit(this.screen.height,this.screen.width);};/**\n     * Resets the WebGL state so you can render things however you fancy!\n     *\n     * @return Returns itself.\n     */Renderer.prototype.reset=function(){this.runners.reset.emit();return this;};/** Clear the frame buffer. */Renderer.prototype.clear=function(){this.renderTexture.bind();this.renderTexture.clear();};/**\n     * Removes everything from the renderer (event listeners, spritebatch, etc...)\n     *\n     * @param [removeView=false] - Removes the Canvas element from the DOM.\n     *  See: https://github.com/pixijs/pixi.js/issues/2233\n     */Renderer.prototype.destroy=function(removeView){this.runners.destroy.emit();for(var r in this.runners){this.runners[r].destroy();}// call base destroy\n_super.prototype.destroy.call(this,removeView);// TODO nullify all the managers..\nthis.gl=null;};Object.defineProperty(Renderer.prototype,\"extract\",{/**\n         * Please use `plugins.extract` instead.\n         * @member {PIXI.Extract} extract\n         * @deprecated since 6.0.0\n         * @readonly\n         */get:function get(){deprecation('6.0.0','Renderer#extract has been deprecated, please use Renderer#plugins.extract instead.');return this.plugins.extract;},enumerable:false,configurable:true});/**\n     * Adds a plugin to the renderer.\n     *\n     * @param pluginName - The name of the plugin.\n     * @param ctor - The constructor function or class for the plugin.\n     */Renderer.registerPlugin=function(pluginName,ctor){Renderer.__plugins=Renderer.__plugins||{};Renderer.__plugins[pluginName]=ctor;};return Renderer;}(AbstractRenderer);/**\n * This helper function will automatically detect which renderer you should be using.\n * WebGL is the preferred renderer as it is a lot faster. If WebGL is not supported by\n * the browser then this function will return a canvas renderer\n *\n * @memberof PIXI\n * @function autoDetectRenderer\n * @param {object} [options] - The optional renderer parameters\n * @param {number} [options.width=800] - the width of the renderers view\n * @param {number} [options.height=600] - the height of the renderers view\n * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional\n * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.\n *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the\n *   canvas needs to be opaque, possibly for performance reasons on some older devices.\n * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n *   resolutions other than 1\n * @param {boolean} [options.antialias=false] - sets antialias\n * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation, enable this if you\n *  need to call toDataUrl on the webgl context\n * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n *  (shown if not transparent).\n * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).\n * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n *   not before the new render pass.\n * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.\n * @param {boolean} [options.forceCanvas=false] - prevents selection of WebGL renderer, even if such is present, this\n *   option only is available when using **pixi.js-legacy** or **@pixi/canvas-renderer** modules, otherwise\n *   it is ignored.\n * @param {string} [options.powerPreference] - Parameter passed to webgl context, set to \"high-performance\"\n *  for devices with dual graphics card **webgl only**\n * @return {PIXI.Renderer|PIXI.CanvasRenderer} Returns WebGL renderer if available, otherwise CanvasRenderer\n */function autoDetectRenderer(options){return Renderer.create(options);}var $defaultVertex=\"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";var $defaultFilterVertex=\"attribute vec2 aVertexPosition;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nuniform vec4 inputSize;\\nuniform vec4 outputFrame;\\n\\nvec4 filterVertexPosition( void )\\n{\\n    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\\n\\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\\n}\\n\\nvec2 filterTextureCoord( void )\\n{\\n    return aVertexPosition * (outputFrame.zw * inputSize.zw);\\n}\\n\\nvoid main(void)\\n{\\n    gl_Position = filterVertexPosition();\\n    vTextureCoord = filterTextureCoord();\\n}\\n\";/**\n * Default vertex shader\n * @memberof PIXI\n * @member {string} defaultVertex\n */ /**\n * Default filter vertex shader\n * @memberof PIXI\n * @member {string} defaultFilterVertex\n */ // NOTE: This black magic is so that @microsoft/api-extractor does not complain! This explicitly specifies the types\n// of defaultVertex, defaultFilterVertex.\nvar defaultVertex$2=$defaultVertex;var defaultFilterVertex=$defaultFilterVertex;/**\n * Use the ISystem interface instead.\n * @deprecated since 6.1.0\n * @memberof PIXI\n */var System=/** @class */function(){/**\n     * @param renderer - Reference to Renderer\n     */function System(renderer){deprecation('6.1.0','System class is deprecated, implemement ISystem interface instead.');this.renderer=renderer;}/** Destroy and don't use after this. */System.prototype.destroy=function(){this.renderer=null;};return System;}();/**\n * Used by the batcher to draw batches.\n * Each one of these contains all information required to draw a bound geometry.\n *\n * @memberof PIXI\n */var BatchDrawCall=/** @class */function(){function BatchDrawCall(){this.texArray=null;this.blend=0;this.type=DRAW_MODES.TRIANGLES;this.start=0;this.size=0;this.data=null;}return BatchDrawCall;}();/**\n * Used by the batcher to build texture batches.\n * Holds list of textures and their respective locations.\n *\n * @memberof PIXI\n */var BatchTextureArray=/** @class */function(){function BatchTextureArray(){this.elements=[];this.ids=[];this.count=0;}BatchTextureArray.prototype.clear=function(){for(var i=0;i<this.count;i++){this.elements[i]=null;}this.count=0;};return BatchTextureArray;}();/**\n * Flexible wrapper around `ArrayBuffer` that also provides typed array views on demand.\n *\n * @memberof PIXI\n */var ViewableBuffer=/** @class */function(){function ViewableBuffer(sizeOrBuffer){if(typeof sizeOrBuffer==='number'){this.rawBinaryData=new ArrayBuffer(sizeOrBuffer);}else if(sizeOrBuffer instanceof Uint8Array){this.rawBinaryData=sizeOrBuffer.buffer;}else{this.rawBinaryData=sizeOrBuffer;}this.uint32View=new Uint32Array(this.rawBinaryData);this.float32View=new Float32Array(this.rawBinaryData);}Object.defineProperty(ViewableBuffer.prototype,\"int8View\",{/** View on the raw binary data as a `Int8Array`. */get:function get(){if(!this._int8View){this._int8View=new Int8Array(this.rawBinaryData);}return this._int8View;},enumerable:false,configurable:true});Object.defineProperty(ViewableBuffer.prototype,\"uint8View\",{/** View on the raw binary data as a `Uint8Array`. */get:function get(){if(!this._uint8View){this._uint8View=new Uint8Array(this.rawBinaryData);}return this._uint8View;},enumerable:false,configurable:true});Object.defineProperty(ViewableBuffer.prototype,\"int16View\",{/**  View on the raw binary data as a `Int16Array`. */get:function get(){if(!this._int16View){this._int16View=new Int16Array(this.rawBinaryData);}return this._int16View;},enumerable:false,configurable:true});Object.defineProperty(ViewableBuffer.prototype,\"uint16View\",{/** View on the raw binary data as a `Uint16Array`. */get:function get(){if(!this._uint16View){this._uint16View=new Uint16Array(this.rawBinaryData);}return this._uint16View;},enumerable:false,configurable:true});Object.defineProperty(ViewableBuffer.prototype,\"int32View\",{/** View on the raw binary data as a `Int32Array`. */get:function get(){if(!this._int32View){this._int32View=new Int32Array(this.rawBinaryData);}return this._int32View;},enumerable:false,configurable:true});/**\n     * Returns the view of the given type.\n     *\n     * @param type - One of `int8`, `uint8`, `int16`,\n     *    `uint16`, `int32`, `uint32`, and `float32`.\n     * @return - typed array of given type\n     */ViewableBuffer.prototype.view=function(type){return this[type+\"View\"];};/** Destroys all buffer references. Do not use after calling this. */ViewableBuffer.prototype.destroy=function(){this.rawBinaryData=null;this._int8View=null;this._uint8View=null;this._int16View=null;this._uint16View=null;this._int32View=null;this.uint32View=null;this.float32View=null;};ViewableBuffer.sizeOf=function(type){switch(type){case'int8':case'uint8':return 1;case'int16':case'uint16':return 2;case'int32':case'uint32':case'float32':return 4;default:throw new Error(type+\" isn't a valid view type\");}};return ViewableBuffer;}();/**\n * Renderer dedicated to drawing and batching sprites.\n *\n * This is the default batch renderer. It buffers objects\n * with texture-based geometries and renders them in\n * batches. It uploads multiple textures to the GPU to\n * reduce to the number of draw calls.\n *\n * @memberof PIXI\n */var AbstractBatchRenderer=/** @class */function(_super){__extends(AbstractBatchRenderer,_super);/**\n     * This will hook onto the renderer's `contextChange`\n     * and `prerender` signals.\n     *\n     * @param {PIXI.Renderer} renderer - The renderer this works for.\n     */function AbstractBatchRenderer(renderer){var _this=_super.call(this,renderer)||this;_this.shaderGenerator=null;_this.geometryClass=null;_this.vertexSize=null;_this.state=State.for2d();_this.size=settings.SPRITE_BATCH_SIZE*4;_this._vertexCount=0;_this._indexCount=0;_this._bufferedElements=[];_this._bufferedTextures=[];_this._bufferSize=0;_this._shader=null;_this._packedGeometries=[];_this._packedGeometryPoolSize=2;_this._flushId=0;_this._aBuffers={};_this._iBuffers={};_this.MAX_TEXTURES=1;_this.renderer.on('prerender',_this.onPrerender,_this);renderer.runners.contextChange.add(_this);_this._dcIndex=0;_this._aIndex=0;_this._iIndex=0;_this._attributeBuffer=null;_this._indexBuffer=null;_this._tempBoundTextures=[];return _this;}/**\n     * Handles the `contextChange` signal.\n     *\n     * It calculates `this.MAX_TEXTURES` and allocating the packed-geometry object pool.\n     */AbstractBatchRenderer.prototype.contextChange=function(){var gl=this.renderer.gl;if(settings.PREFER_ENV===ENV.WEBGL_LEGACY){this.MAX_TEXTURES=1;}else{// step 1: first check max textures the GPU can handle.\nthis.MAX_TEXTURES=Math.min(gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS),settings.SPRITE_MAX_TEXTURES);// step 2: check the maximum number of if statements the shader can have too..\nthis.MAX_TEXTURES=checkMaxIfStatementsInShader(this.MAX_TEXTURES,gl);}this._shader=this.shaderGenerator.generateShader(this.MAX_TEXTURES);// we use the second shader as the first one depending on your browser\n// may omit aTextureId as it is not used by the shader so is optimized out.\nfor(var i=0;i<this._packedGeometryPoolSize;i++){/* eslint-disable max-len */this._packedGeometries[i]=new this.geometryClass();}this.initFlushBuffers();};/** Makes sure that static and dynamic flush pooled objects have correct dimensions. */AbstractBatchRenderer.prototype.initFlushBuffers=function(){var _drawCallPool=AbstractBatchRenderer._drawCallPool,_textureArrayPool=AbstractBatchRenderer._textureArrayPool;// max draw calls\nvar MAX_SPRITES=this.size/4;// max texture arrays\nvar MAX_TA=Math.floor(MAX_SPRITES/this.MAX_TEXTURES)+1;while(_drawCallPool.length<MAX_SPRITES){_drawCallPool.push(new BatchDrawCall());}while(_textureArrayPool.length<MAX_TA){_textureArrayPool.push(new BatchTextureArray());}for(var i=0;i<this.MAX_TEXTURES;i++){this._tempBoundTextures[i]=null;}};/**\n     * Handles the `prerender` signal.\n     *\n     * It ensures that flushes start from the first geometry object again.\n     */AbstractBatchRenderer.prototype.onPrerender=function(){this._flushId=0;};/**\n     * Buffers the \"batchable\" object. It need not be rendered immediately.\n     *\n     * @param {PIXI.DisplayObject} element - the element to render when\n     *    using this renderer\n     */AbstractBatchRenderer.prototype.render=function(element){if(!element._texture.valid){return;}if(this._vertexCount+element.vertexData.length/2>this.size){this.flush();}this._vertexCount+=element.vertexData.length/2;this._indexCount+=element.indices.length;this._bufferedTextures[this._bufferSize]=element._texture.baseTexture;this._bufferedElements[this._bufferSize++]=element;};AbstractBatchRenderer.prototype.buildTexturesAndDrawCalls=function(){var _a=this,textures=_a._bufferedTextures,MAX_TEXTURES=_a.MAX_TEXTURES;var textureArrays=AbstractBatchRenderer._textureArrayPool;var batch=this.renderer.batch;var boundTextures=this._tempBoundTextures;var touch=this.renderer.textureGC.count;var TICK=++BaseTexture._globalBatch;var countTexArrays=0;var texArray=textureArrays[0];var start=0;batch.copyBoundTextures(boundTextures,MAX_TEXTURES);for(var i=0;i<this._bufferSize;++i){var tex=textures[i];textures[i]=null;if(tex._batchEnabled===TICK){continue;}if(texArray.count>=MAX_TEXTURES){batch.boundArray(texArray,boundTextures,TICK,MAX_TEXTURES);this.buildDrawCalls(texArray,start,i);start=i;texArray=textureArrays[++countTexArrays];++TICK;}tex._batchEnabled=TICK;tex.touched=touch;texArray.elements[texArray.count++]=tex;}if(texArray.count>0){batch.boundArray(texArray,boundTextures,TICK,MAX_TEXTURES);this.buildDrawCalls(texArray,start,this._bufferSize);++countTexArrays;++TICK;}// Clean-up\nfor(var i=0;i<boundTextures.length;i++){boundTextures[i]=null;}BaseTexture._globalBatch=TICK;};/** Populating drawcalls for rendering */AbstractBatchRenderer.prototype.buildDrawCalls=function(texArray,start,finish){var _a=this,elements=_a._bufferedElements,_attributeBuffer=_a._attributeBuffer,_indexBuffer=_a._indexBuffer,vertexSize=_a.vertexSize;var drawCalls=AbstractBatchRenderer._drawCallPool;var dcIndex=this._dcIndex;var aIndex=this._aIndex;var iIndex=this._iIndex;var drawCall=drawCalls[dcIndex];drawCall.start=this._iIndex;drawCall.texArray=texArray;for(var i=start;i<finish;++i){var sprite=elements[i];var tex=sprite._texture.baseTexture;var spriteBlendMode=premultiplyBlendMode[tex.alphaMode?1:0][sprite.blendMode];elements[i]=null;if(start<i&&drawCall.blend!==spriteBlendMode){drawCall.size=iIndex-drawCall.start;start=i;drawCall=drawCalls[++dcIndex];drawCall.texArray=texArray;drawCall.start=iIndex;}this.packInterleavedGeometry(sprite,_attributeBuffer,_indexBuffer,aIndex,iIndex);aIndex+=sprite.vertexData.length/2*vertexSize;iIndex+=sprite.indices.length;drawCall.blend=spriteBlendMode;}if(start<finish){drawCall.size=iIndex-drawCall.start;++dcIndex;}this._dcIndex=dcIndex;this._aIndex=aIndex;this._iIndex=iIndex;};/** Bind textures for current rendering */AbstractBatchRenderer.prototype.bindAndClearTexArray=function(texArray){var textureSystem=this.renderer.texture;for(var j=0;j<texArray.count;j++){textureSystem.bind(texArray.elements[j],texArray.ids[j]);texArray.elements[j]=null;}texArray.count=0;};AbstractBatchRenderer.prototype.updateGeometry=function(){var _a=this,packedGeometries=_a._packedGeometries,attributeBuffer=_a._attributeBuffer,indexBuffer=_a._indexBuffer;if(!settings.CAN_UPLOAD_SAME_BUFFER){/* Usually on iOS devices, where the browser doesn't\n            like uploads to the same buffer in a single frame. */if(this._packedGeometryPoolSize<=this._flushId){this._packedGeometryPoolSize++;packedGeometries[this._flushId]=new this.geometryClass();}packedGeometries[this._flushId]._buffer.update(attributeBuffer.rawBinaryData);packedGeometries[this._flushId]._indexBuffer.update(indexBuffer);this.renderer.geometry.bind(packedGeometries[this._flushId]);this.renderer.geometry.updateBuffers();this._flushId++;}else{// lets use the faster option, always use buffer number 0\npackedGeometries[this._flushId]._buffer.update(attributeBuffer.rawBinaryData);packedGeometries[this._flushId]._indexBuffer.update(indexBuffer);this.renderer.geometry.updateBuffers();}};AbstractBatchRenderer.prototype.drawBatches=function(){var dcCount=this._dcIndex;var _a=this.renderer,gl=_a.gl,stateSystem=_a.state;var drawCalls=AbstractBatchRenderer._drawCallPool;var curTexArray=null;// Upload textures and do the draw calls\nfor(var i=0;i<dcCount;i++){var _b=drawCalls[i],texArray=_b.texArray,type=_b.type,size=_b.size,start=_b.start,blend=_b.blend;if(curTexArray!==texArray){curTexArray=texArray;this.bindAndClearTexArray(texArray);}this.state.blendMode=blend;stateSystem.set(this.state);gl.drawElements(type,size,gl.UNSIGNED_SHORT,start*2);}};/** Renders the content _now_ and empties the current batch. */AbstractBatchRenderer.prototype.flush=function(){if(this._vertexCount===0){return;}this._attributeBuffer=this.getAttributeBuffer(this._vertexCount);this._indexBuffer=this.getIndexBuffer(this._indexCount);this._aIndex=0;this._iIndex=0;this._dcIndex=0;this.buildTexturesAndDrawCalls();this.updateGeometry();this.drawBatches();// reset elements buffer for the next flush\nthis._bufferSize=0;this._vertexCount=0;this._indexCount=0;};/** Starts a new sprite batch. */AbstractBatchRenderer.prototype.start=function(){this.renderer.state.set(this.state);this.renderer.texture.ensureSamplerType(this.MAX_TEXTURES);this.renderer.shader.bind(this._shader);if(settings.CAN_UPLOAD_SAME_BUFFER){// bind buffer #0, we don't need others\nthis.renderer.geometry.bind(this._packedGeometries[this._flushId]);}};/** Stops and flushes the current batch. */AbstractBatchRenderer.prototype.stop=function(){this.flush();};/** Destroys this `AbstractBatchRenderer`. It cannot be used again. */AbstractBatchRenderer.prototype.destroy=function(){for(var i=0;i<this._packedGeometryPoolSize;i++){if(this._packedGeometries[i]){this._packedGeometries[i].destroy();}}this.renderer.off('prerender',this.onPrerender,this);this._aBuffers=null;this._iBuffers=null;this._packedGeometries=null;this._attributeBuffer=null;this._indexBuffer=null;if(this._shader){this._shader.destroy();this._shader=null;}_super.prototype.destroy.call(this);};/**\n     * Fetches an attribute buffer from `this._aBuffers` that can hold atleast `size` floats.\n     *\n     * @param size - minimum capacity required\n     * @return - buffer than can hold atleast `size` floats\n     */AbstractBatchRenderer.prototype.getAttributeBuffer=function(size){// 8 vertices is enough for 2 quads\nvar roundedP2=nextPow2(Math.ceil(size/8));var roundedSizeIndex=log2(roundedP2);var roundedSize=roundedP2*8;if(this._aBuffers.length<=roundedSizeIndex){this._iBuffers.length=roundedSizeIndex+1;}var buffer=this._aBuffers[roundedSize];if(!buffer){this._aBuffers[roundedSize]=buffer=new ViewableBuffer(roundedSize*this.vertexSize*4);}return buffer;};/**\n     * Fetches an index buffer from `this._iBuffers` that can\n     * have at least `size` capacity.\n     *\n     * @param size - minimum required capacity\n     * @return - buffer that can fit `size` indices.\n     */AbstractBatchRenderer.prototype.getIndexBuffer=function(size){// 12 indices is enough for 2 quads\nvar roundedP2=nextPow2(Math.ceil(size/12));var roundedSizeIndex=log2(roundedP2);var roundedSize=roundedP2*12;if(this._iBuffers.length<=roundedSizeIndex){this._iBuffers.length=roundedSizeIndex+1;}var buffer=this._iBuffers[roundedSizeIndex];if(!buffer){this._iBuffers[roundedSizeIndex]=buffer=new Uint16Array(roundedSize);}return buffer;};/**\n     * Takes the four batching parameters of `element`, interleaves\n     * and pushes them into the batching attribute/index buffers given.\n     *\n     * It uses these properties: `vertexData` `uvs`, `textureId` and\n     * `indicies`. It also uses the \"tint\" of the base-texture, if\n     * present.\n     *\n     * @param {PIXI.DisplayObject} element - element being rendered\n     * @param attributeBuffer - attribute buffer.\n     * @param indexBuffer - index buffer\n     * @param aIndex - number of floats already in the attribute buffer\n     * @param iIndex - number of indices already in `indexBuffer`\n     */AbstractBatchRenderer.prototype.packInterleavedGeometry=function(element,attributeBuffer,indexBuffer,aIndex,iIndex){var uint32View=attributeBuffer.uint32View,float32View=attributeBuffer.float32View;var packedVertices=aIndex/this.vertexSize;var uvs=element.uvs;var indicies=element.indices;var vertexData=element.vertexData;var textureId=element._texture.baseTexture._batchLocation;var alpha=Math.min(element.worldAlpha,1.0);var argb=alpha<1.0&&element._texture.baseTexture.alphaMode?premultiplyTint(element._tintRGB,alpha):element._tintRGB+(alpha*255<<24);// lets not worry about tint! for now..\nfor(var i=0;i<vertexData.length;i+=2){float32View[aIndex++]=vertexData[i];float32View[aIndex++]=vertexData[i+1];float32View[aIndex++]=uvs[i];float32View[aIndex++]=uvs[i+1];uint32View[aIndex++]=argb;float32View[aIndex++]=textureId;}for(var i=0;i<indicies.length;i++){indexBuffer[iIndex++]=packedVertices+indicies[i];}};/**\n     * Pool of `BatchDrawCall` objects that `flush` used\n     * to create \"batches\" of the objects being rendered.\n     *\n     * These are never re-allocated again.\n     * Shared between all batch renderers because it can be only one \"flush\" working at the moment.\n     *\n     * @member {PIXI.BatchDrawCall[]}\n     */AbstractBatchRenderer._drawCallPool=[];/**\n     * Pool of `BatchDrawCall` objects that `flush` used\n     * to create \"batches\" of the objects being rendered.\n     *\n     * These are never re-allocated again.\n     * Shared between all batch renderers because it can be only one \"flush\" working at the moment.\n     *\n     * @member {PIXI.BatchTextureArray[]}\n     */AbstractBatchRenderer._textureArrayPool=[];return AbstractBatchRenderer;}(ObjectRenderer);/**\n * Helper that generates batching multi-texture shader. Use it with your new BatchRenderer\n *\n * @memberof PIXI\n */var BatchShaderGenerator=/** @class */function(){/**\n     * @param vertexSrc - Vertex shader\n     * @param fragTemplate - Fragment shader template\n     */function BatchShaderGenerator(vertexSrc,fragTemplate){this.vertexSrc=vertexSrc;this.fragTemplate=fragTemplate;this.programCache={};this.defaultGroupCache={};if(fragTemplate.indexOf('%count%')<0){throw new Error('Fragment template must contain \"%count%\".');}if(fragTemplate.indexOf('%forloop%')<0){throw new Error('Fragment template must contain \"%forloop%\".');}}BatchShaderGenerator.prototype.generateShader=function(maxTextures){if(!this.programCache[maxTextures]){var sampleValues=new Int32Array(maxTextures);for(var i=0;i<maxTextures;i++){sampleValues[i]=i;}this.defaultGroupCache[maxTextures]=UniformGroup.from({uSamplers:sampleValues},true);var fragmentSrc=this.fragTemplate;fragmentSrc=fragmentSrc.replace(/%count%/gi,\"\"+maxTextures);fragmentSrc=fragmentSrc.replace(/%forloop%/gi,this.generateSampleSrc(maxTextures));this.programCache[maxTextures]=new Program(this.vertexSrc,fragmentSrc);}var uniforms={tint:new Float32Array([1,1,1,1]),translationMatrix:new Matrix(),default:this.defaultGroupCache[maxTextures]};return new Shader(this.programCache[maxTextures],uniforms);};BatchShaderGenerator.prototype.generateSampleSrc=function(maxTextures){var src='';src+='\\n';src+='\\n';for(var i=0;i<maxTextures;i++){if(i>0){src+='\\nelse ';}if(i<maxTextures-1){src+=\"if(vTextureId < \"+i+\".5)\";}src+='\\n{';src+=\"\\n\\tcolor = texture2D(uSamplers[\"+i+\"], vTextureCoord);\";src+='\\n}';}src+='\\n';src+='\\n';return src;};return BatchShaderGenerator;}();/**\n * Geometry used to batch standard PIXI content (e.g. Mesh, Sprite, Graphics objects).\n *\n * @memberof PIXI\n */var BatchGeometry=/** @class */function(_super){__extends(BatchGeometry,_super);/**\n     * @param {boolean} [_static=false] - Optimization flag, where `false`\n     *        is updated every frame, `true` doesn't change frame-to-frame.\n     */function BatchGeometry(_static){if(_static===void 0){_static=false;}var _this=_super.call(this)||this;_this._buffer=new Buffer(null,_static,false);_this._indexBuffer=new Buffer(null,_static,true);_this.addAttribute('aVertexPosition',_this._buffer,2,false,TYPES.FLOAT).addAttribute('aTextureCoord',_this._buffer,2,false,TYPES.FLOAT).addAttribute('aColor',_this._buffer,4,true,TYPES.UNSIGNED_BYTE).addAttribute('aTextureId',_this._buffer,1,true,TYPES.FLOAT).addIndex(_this._indexBuffer);return _this;}return BatchGeometry;}(Geometry);var defaultVertex$3=\"precision highp float;\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec4 aColor;\\nattribute float aTextureId;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 translationMatrix;\\nuniform vec4 tint;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\nvarying float vTextureId;\\n\\nvoid main(void){\\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = aTextureCoord;\\n    vTextureId = aTextureId;\\n    vColor = aColor * tint;\\n}\\n\";var defaultFragment$2=\"varying vec2 vTextureCoord;\\nvarying vec4 vColor;\\nvarying float vTextureId;\\nuniform sampler2D uSamplers[%count%];\\n\\nvoid main(void){\\n    vec4 color;\\n    %forloop%\\n    gl_FragColor = color * vColor;\\n}\\n\";/** @memberof PIXI */var BatchPluginFactory=/** @class */function(){function BatchPluginFactory(){}/**\n     * Create a new BatchRenderer plugin for Renderer. this convenience can provide an easy way\n     * to extend BatchRenderer with all the necessary pieces.\n     * @example\n     * const fragment = `\n     * varying vec2 vTextureCoord;\n     * varying vec4 vColor;\n     * varying float vTextureId;\n     * uniform sampler2D uSamplers[%count%];\n     *\n     * void main(void){\n     *     vec4 color;\n     *     %forloop%\n     *     gl_FragColor = vColor * vec4(color.a - color.rgb, color.a);\n     * }\n     * `;\n     * const InvertBatchRenderer = PIXI.BatchPluginFactory.create({ fragment });\n     * PIXI.Renderer.registerPlugin('invert', InvertBatchRenderer);\n     * const sprite = new PIXI.Sprite();\n     * sprite.pluginName = 'invert';\n     *\n     * @param {object} [options]\n     * @param {string} [options.vertex=PIXI.BatchPluginFactory.defaultVertexSrc] - Vertex shader source\n     * @param {string} [options.fragment=PIXI.BatchPluginFactory.defaultFragmentTemplate] - Fragment shader template\n     * @param {number} [options.vertexSize=6] - Vertex size\n     * @param {object} [options.geometryClass=PIXI.BatchGeometry]\n     * @return {*} New batch renderer plugin\n     */BatchPluginFactory.create=function(options){var _a=Object.assign({vertex:defaultVertex$3,fragment:defaultFragment$2,geometryClass:BatchGeometry,vertexSize:6},options),vertex=_a.vertex,fragment=_a.fragment,vertexSize=_a.vertexSize,geometryClass=_a.geometryClass;return(/** @class */function(_super){__extends(BatchPlugin,_super);function BatchPlugin(renderer){var _this=_super.call(this,renderer)||this;_this.shaderGenerator=new BatchShaderGenerator(vertex,fragment);_this.geometryClass=geometryClass;_this.vertexSize=vertexSize;return _this;}return BatchPlugin;}(AbstractBatchRenderer));};Object.defineProperty(BatchPluginFactory,\"defaultVertexSrc\",{/**\n         * The default vertex shader source\n         *\n         * @readonly\n         */get:function get(){return defaultVertex$3;},enumerable:false,configurable:true});Object.defineProperty(BatchPluginFactory,\"defaultFragmentTemplate\",{/**\n         * The default fragment shader source\n         *\n         * @readonly\n         */get:function get(){return defaultFragment$2;},enumerable:false,configurable:true});return BatchPluginFactory;}();// Setup the default BatchRenderer plugin, this is what\n// we'll actually export at the root level\nvar BatchRenderer=BatchPluginFactory.create();/**\n * @memberof PIXI\n * @namespace resources\n * @see PIXI\n * @deprecated since 6.0.0\n */var resources={};var _loop_1=function _loop_1(name){Object.defineProperty(resources,name,{get:function get(){deprecation('6.0.0',\"PIXI.systems.\"+name+\" has moved to PIXI.\"+name);return _resources[name];}});};for(var name in _resources){_loop_1(name);}/**\n * @memberof PIXI\n * @namespace systems\n * @see PIXI\n * @deprecated since 6.0.0\n */var systems={};var _loop_2=function _loop_2(name){Object.defineProperty(systems,name,{get:function get(){deprecation('6.0.0',\"PIXI.resources.\"+name+\" has moved to PIXI.\"+name);return _systems[name];}});};for(var name in _systems){_loop_2(name);}export{AbstractBatchRenderer,AbstractMultiResource,AbstractRenderer,ArrayResource,Attribute,BaseImageResource,BaseRenderTexture,BaseTexture,BatchDrawCall,BatchGeometry,BatchPluginFactory,BatchRenderer,BatchShaderGenerator,BatchSystem,BatchTextureArray,Buffer,BufferResource,CanvasResource,ContextSystem,CubeResource,Filter,FilterState,FilterSystem,Framebuffer,FramebufferSystem,GLFramebuffer,GLProgram,GLTexture,Geometry,GeometrySystem,IGLUniformData,INSTALLED,ImageBitmapResource,ImageResource,MaskData,MaskSystem,ObjectRenderer,Program,ProjectionSystem,Quad,QuadUv,RenderTexture,RenderTexturePool,RenderTextureSystem,Renderer,Resource,SVGResource,ScissorSystem,Shader,ShaderSystem,SpriteMaskFilter,State,StateSystem,StencilSystem,System,Texture,TextureGCSystem,TextureMatrix,TextureSystem,TextureUvs,UniformGroup,VideoResource,ViewableBuffer,autoDetectRenderer,autoDetectResource,checkMaxIfStatementsInShader,createUBOElements,defaultFilterVertex,defaultVertex$2 as defaultVertex,generateProgram,generateUniformBufferSync,getTestContext,getUBOData,resources,systems,uniformParsers};","map":null,"metadata":{},"sourceType":"module"}