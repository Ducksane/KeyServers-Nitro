{"ast":null,"code":"import{useMemo}from'react';var toFnRef=function toFnRef(ref){return!ref||typeof ref==='function'?ref:function(value){ref.current=value;};};export function mergeRefs(refA,refB){var a=toFnRef(refA);var b=toFnRef(refB);return function(value){if(a)a(value);if(b)b(value);};}/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */function useMergedRefs(refA,refB){return useMemo(function(){return mergeRefs(refA,refB);},[refA,refB]);}export default useMergedRefs;","map":null,"metadata":{},"sourceType":"module"}