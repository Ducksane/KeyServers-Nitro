{"ast":null,"code":"import _inheritsLoose from\"@babel/runtime/helpers/esm/inheritsLoose\";var _leaveRenders,_enterRenders;import React from'react';import{ENTERED,ENTERING,EXITING}from'./Transition';import TransitionGroupContext from'./TransitionGroupContext';function areChildrenDifferent(oldChildren,newChildren){if(oldChildren===newChildren)return false;if(/*#__PURE__*/React.isValidElement(oldChildren)&&/*#__PURE__*/React.isValidElement(newChildren)&&oldChildren.key!=null&&oldChildren.key===newChildren.key){return false;}return true;}/**\n * Enum of modes for SwitchTransition component\n * @enum { string }\n */export var modes={out:'out-in',in:'in-out'};var callHook=function callHook(element,name,cb){return function(){var _element$props;element.props[name]&&(_element$props=element.props)[name].apply(_element$props,arguments);cb();};};var leaveRenders=(_leaveRenders={},_leaveRenders[modes.out]=function(_ref){var current=_ref.current,changeState=_ref.changeState;return/*#__PURE__*/React.cloneElement(current,{in:false,onExited:callHook(current,'onExited',function(){changeState(ENTERING,null);})});},_leaveRenders[modes.in]=function(_ref2){var current=_ref2.current,changeState=_ref2.changeState,children=_ref2.children;return[current,/*#__PURE__*/React.cloneElement(children,{in:true,onEntered:callHook(children,'onEntered',function(){changeState(ENTERING);})})];},_leaveRenders);var enterRenders=(_enterRenders={},_enterRenders[modes.out]=function(_ref3){var children=_ref3.children,changeState=_ref3.changeState;return/*#__PURE__*/React.cloneElement(children,{in:true,onEntered:callHook(children,'onEntered',function(){changeState(ENTERED,/*#__PURE__*/React.cloneElement(children,{in:true}));})});},_enterRenders[modes.in]=function(_ref4){var current=_ref4.current,children=_ref4.children,changeState=_ref4.changeState;return[/*#__PURE__*/React.cloneElement(current,{in:false,onExited:callHook(current,'onExited',function(){changeState(ENTERED,/*#__PURE__*/React.cloneElement(children,{in:true}));})}),/*#__PURE__*/React.cloneElement(children,{in:true})];},_enterRenders);/**\n * A transition component inspired by the [vue transition modes](https://vuejs.org/v2/guide/transitions.html#Transition-Modes).\n * You can use it when you want to control the render between state transitions.\n * Based on the selected mode and the child's key which is the `Transition` or `CSSTransition` component, the `SwitchTransition` makes a consistent transition between them.\n *\n * If the `out-in` mode is selected, the `SwitchTransition` waits until the old child leaves and then inserts a new child.\n * If the `in-out` mode is selected, the `SwitchTransition` inserts a new child first, waits for the new child to enter and then removes the old child.\n *\n * **Note**: If you want the animation to happen simultaneously\n * (that is, to have the old child removed and a new child inserted **at the same time**),\n * you should use\n * [`TransitionGroup`](https://reactcommunity.org/react-transition-group/transition-group)\n * instead.\n *\n * ```jsx\n * function App() {\n *  const [state, setState] = useState(false);\n *  return (\n *    <SwitchTransition>\n *      <CSSTransition\n *        key={state ? \"Goodbye, world!\" : \"Hello, world!\"}\n *        addEndListener={(node, done) => node.addEventListener(\"transitionend\", done, false)}\n *        classNames='fade'\n *      >\n *        <button onClick={() => setState(state => !state)}>\n *          {state ? \"Goodbye, world!\" : \"Hello, world!\"}\n *        </button>\n *      </CSSTransition>\n *    </SwitchTransition>\n *  );\n * }\n * ```\n *\n * ```css\n * .fade-enter{\n *    opacity: 0;\n * }\n * .fade-exit{\n *    opacity: 1;\n * }\n * .fade-enter-active{\n *    opacity: 1;\n * }\n * .fade-exit-active{\n *    opacity: 0;\n * }\n * .fade-enter-active,\n * .fade-exit-active{\n *    transition: opacity 500ms;\n * }\n * ```\n */var SwitchTransition=/*#__PURE__*/function(_React$Component){_inheritsLoose(SwitchTransition,_React$Component);function SwitchTransition(){var _this;for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this;_this.state={status:ENTERED,current:null};_this.appeared=false;_this.changeState=function(status,current){if(current===void 0){current=_this.state.current;}_this.setState({status:status,current:current});};return _this;}var _proto=SwitchTransition.prototype;_proto.componentDidMount=function componentDidMount(){this.appeared=true;};SwitchTransition.getDerivedStateFromProps=function getDerivedStateFromProps(props,state){if(props.children==null){return{current:null};}if(state.status===ENTERING&&props.mode===modes.in){return{status:ENTERING};}if(state.current&&areChildrenDifferent(state.current,props.children)){return{status:EXITING};}return{current:/*#__PURE__*/React.cloneElement(props.children,{in:true})};};_proto.render=function render(){var _this$props=this.props,children=_this$props.children,mode=_this$props.mode,_this$state=this.state,status=_this$state.status,current=_this$state.current;var data={children:children,current:current,changeState:this.changeState,status:status};var component;switch(status){case ENTERING:component=enterRenders[mode](data);break;case EXITING:component=leaveRenders[mode](data);break;case ENTERED:component=current;}return/*#__PURE__*/React.createElement(TransitionGroupContext.Provider,{value:{isMounting:!this.appeared}},component);};return SwitchTransition;}(React.Component);SwitchTransition.defaultProps={mode:modes.out};export default SwitchTransition;","map":null,"metadata":{},"sourceType":"module"}