{"ast":null,"code":"import _toConsumableArray from\"C:/Users/Luis/Downloads/Habboom/Nitro-Edit/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _createForOfIteratorHelper from\"C:/Users/Luis/Downloads/Habboom/Nitro-Edit/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _slicedToArray from\"C:/Users/Luis/Downloads/Habboom/Nitro-Edit/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{AcceptFriendMessageComposer,DeclineFriendMessageComposer,FollowFriendMessageComposer,FriendListFragmentEvent,FriendListUpdateEvent,FriendRequestsEvent,GetFriendRequestsComposer,MessengerInitComposer,MessengerInitEvent,NewFriendRequestEvent,RequestFriendComposer,SetRelationshipStatusComposer}from'@nitrots/nitro-renderer';import{useCallback,useEffect,useMemo,useState}from'react';import{useBetween}from'use-between';import{CloneObject,MessengerFriend,MessengerRequest,MessengerSettings,SendMessageComposer}from'../../api';import{UseMessageEventHook}from'../messages';var useFriendsState=function useFriendsState(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),friends=_useState2[0],setFriends=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),requests=_useState4[0],setRequests=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),sentRequests=_useState6[0],setSentRequests=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),settings=_useState8[0],setSettings=_useState8[1];var onlineFriends=useMemo(function(){var onlineFriends=friends.filter(function(friend){return friend.online;});onlineFriends.sort(function(a,b){if(a.name<b.name)return-1;if(a.name>b.name)return 1;return 0;});return onlineFriends;},[friends]);var offlineFriends=useMemo(function(){var offlineFriends=friends.filter(function(friend){return!friend.online;});offlineFriends.sort(function(a,b){if(a.name<b.name)return-1;if(a.name>b.name)return 1;return 0;});return offlineFriends;},[friends]);var followFriend=useCallback(function(friend){return SendMessageComposer(new FollowFriendMessageComposer(friend.id));},[]);var updateRelationship=useCallback(function(friend,type){return type!==friend.relationshipStatus&&SendMessageComposer(new SetRelationshipStatusComposer(friend.id,type));},[]);var getFriend=useCallback(function(userId){var _iterator=_createForOfIteratorHelper(friends),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var friend=_step.value;if(friend.id===userId)return friend;}}catch(err){_iterator.e(err);}finally{_iterator.f();}return null;},[friends]);var canRequestFriend=useCallback(function(userId){if(getFriend(userId))return false;if(requests.find(function(request){return request.requesterUserId===userId;}))return false;if(sentRequests.indexOf(userId)>=0)return false;return true;},[requests,sentRequests,getFriend]);var requestFriend=useCallback(function(userId,userName){if(!canRequestFriend(userId))return false;setSentRequests(function(prevValue){var newSentRequests=_toConsumableArray(prevValue);newSentRequests.push(userId);return newSentRequests;});SendMessageComposer(new RequestFriendComposer(userName));},[canRequestFriend]);var requestResponse=useCallback(function(requestId,flag){if(requestId===-1&&!flag){SendMessageComposer(new DeclineFriendMessageComposer(true));setRequests([]);}else{setRequests(function(prevValue){var newRequests=_toConsumableArray(prevValue);var index=newRequests.findIndex(function(request){return request.id===requestId;});if(index===-1)return prevValue;if(flag){SendMessageComposer(new AcceptFriendMessageComposer(newRequests[index].id));}else{SendMessageComposer(new DeclineFriendMessageComposer(false,newRequests[index].id));}newRequests.splice(index,1);return newRequests;});}},[]);var onMessengerInitEvent=useCallback(function(event){var parser=event.getParser();setSettings(new MessengerSettings(parser.userFriendLimit,parser.normalFriendLimit,parser.extendedFriendLimit,parser.categories));SendMessageComposer(new GetFriendRequestsComposer());},[]);UseMessageEventHook(MessengerInitEvent,onMessengerInitEvent);var onFriendsFragmentEvent=useCallback(function(event){var parser=event.getParser();setFriends(function(prevValue){var newValue=_toConsumableArray(prevValue);var _iterator2=_createForOfIteratorHelper(parser.fragment),_step2;try{var _loop=function _loop(){var friend=_step2.value;var index=newValue.findIndex(function(existingFriend){return existingFriend.id===friend.id;});var newFriend=new MessengerFriend();newFriend.populate(friend);if(index>-1)newValue[index]=newFriend;else newValue.push(newFriend);};for(_iterator2.s();!(_step2=_iterator2.n()).done;){_loop();}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return newValue;});},[]);UseMessageEventHook(FriendListFragmentEvent,onFriendsFragmentEvent);var onFriendsUpdateEvent=useCallback(function(event){var parser=event.getParser();setFriends(function(prevValue){var newValue=_toConsumableArray(prevValue);var processUpdate=function processUpdate(friend){var index=newValue.findIndex(function(existingFriend){return existingFriend.id===friend.id;});if(index===-1){var newFriend=new MessengerFriend();newFriend.populate(friend);newValue.unshift(newFriend);}else{newValue[index].populate(friend);}};var _iterator3=_createForOfIteratorHelper(parser.addedFriends),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var friend=_step3.value;processUpdate(friend);}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}var _iterator4=_createForOfIteratorHelper(parser.updatedFriends),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var _friend=_step4.value;processUpdate(_friend);}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}var _iterator5=_createForOfIteratorHelper(parser.removedFriendIds),_step5;try{var _loop2=function _loop2(){var removedFriendId=_step5.value;var index=newValue.findIndex(function(existingFriend){return existingFriend.id===removedFriendId;});if(index>-1)newValue.splice(index,1);};for(_iterator5.s();!(_step5=_iterator5.n()).done;){_loop2();}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}return newValue;});},[]);UseMessageEventHook(FriendListUpdateEvent,onFriendsUpdateEvent);var onFriendRequestsEvent=useCallback(function(event){var parser=event.getParser();setRequests(function(prevValue){var newValue=_toConsumableArray(prevValue);var _iterator6=_createForOfIteratorHelper(parser.requests),_step6;try{var _loop3=function _loop3(){var request=_step6.value;var index=newValue.findIndex(function(existing){return existing.requesterUserId===request.requesterUserId;});if(index>0){newValue[index]=CloneObject(newValue[index]);newValue[index].populate(request);}else{var newRequest=new MessengerRequest();newRequest.populate(request);newValue.push(newRequest);}};for(_iterator6.s();!(_step6=_iterator6.n()).done;){_loop3();}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}return newValue;});},[]);UseMessageEventHook(FriendRequestsEvent,onFriendRequestsEvent);var onNewFriendRequestEvent=useCallback(function(event){var parser=event.getParser();var request=parser.request;setRequests(function(prevValue){var newRequests=_toConsumableArray(prevValue);var index=newRequests.findIndex(function(existing){return existing.requesterUserId===request.requesterUserId;});if(index===-1){var newRequest=new MessengerRequest();newRequest.populate(request);newRequests.push(newRequest);}return newRequests;});},[]);UseMessageEventHook(NewFriendRequestEvent,onNewFriendRequestEvent);useEffect(function(){SendMessageComposer(new MessengerInitComposer());},[]);return{friends:friends,requests:requests,sentRequests:sentRequests,settings:settings,onlineFriends:onlineFriends,offlineFriends:offlineFriends,getFriend:getFriend,canRequestFriend:canRequestFriend,requestFriend:requestFriend,requestResponse:requestResponse,followFriend:followFriend,updateRelationship:updateRelationship};};export var useFriends=function useFriends(){return useBetween(useFriendsState);};","map":null,"metadata":{},"sourceType":"module"}