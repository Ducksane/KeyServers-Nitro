{"ast":null,"code":"import _slicedToArray from\"/home/muphy/Documents/habboom/Nitro-Edit-main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import*as React from'react';import ReactDOM from'react-dom';import useCallbackRef from'@restart/hooks/useCallbackRef';import useMergedRefs from'@restart/hooks/useMergedRefs';import{useState}from'react';import usePopper from'./usePopper';import useRootClose from'./useRootClose';import useWaitForDOMRef from'./useWaitForDOMRef';import mergeOptionsWithPopperConfig from'./mergeOptionsWithPopperConfig';import{jsx as _jsx}from\"react/jsx-runtime\";/**\n * Built on top of `Popper.js`, the overlay component is\n * great for custom tooltip overlays.\n */var Overlay=/*#__PURE__*/React.forwardRef(function(props,outerRef){var flip=props.flip,offset=props.offset,placement=props.placement,containerPadding=props.containerPadding,_props$popperConfig=props.popperConfig,popperConfig=_props$popperConfig===void 0?{}:_props$popperConfig,Transition=props.transition;var _useCallbackRef=useCallbackRef(),_useCallbackRef2=_slicedToArray(_useCallbackRef,2),rootElement=_useCallbackRef2[0],attachRef=_useCallbackRef2[1];var _useCallbackRef3=useCallbackRef(),_useCallbackRef4=_slicedToArray(_useCallbackRef3,2),arrowElement=_useCallbackRef4[0],attachArrowRef=_useCallbackRef4[1];var mergedRef=useMergedRefs(attachRef,outerRef);var container=useWaitForDOMRef(props.container);var target=useWaitForDOMRef(props.target);var _useState=useState(!props.show),_useState2=_slicedToArray(_useState,2),exited=_useState2[0],setExited=_useState2[1];var popper=usePopper(target,rootElement,mergeOptionsWithPopperConfig({placement:placement,enableEvents:!!props.show,containerPadding:containerPadding||5,flip:flip,offset:offset,arrowElement:arrowElement,popperConfig:popperConfig}));if(props.show){if(exited)setExited(false);}else if(!props.transition&&!exited){setExited(true);}var handleHidden=function handleHidden(){setExited(true);if(props.onExited){props.onExited.apply(props,arguments);}};// Don't un-render the overlay while it's transitioning out.\nvar mountOverlay=props.show||Transition&&!exited;useRootClose(rootElement,props.onHide,{disabled:!props.rootClose||props.rootCloseDisabled,clickTrigger:props.rootCloseEvent});if(!mountOverlay){// Don't bother showing anything if we don't have to.\nreturn null;}var child=props.children(Object.assign({},popper.attributes.popper,{style:popper.styles.popper,ref:mergedRef}),{popper:popper,placement:placement,show:!!props.show,arrowProps:Object.assign({},popper.attributes.arrow,{style:popper.styles.arrow,ref:attachArrowRef})});if(Transition){var onExit=props.onExit,onExiting=props.onExiting,onEnter=props.onEnter,onEntering=props.onEntering,onEntered=props.onEntered;child=/*#__PURE__*/_jsx(Transition,{in:props.show,appear:true,onExit:onExit,onExiting:onExiting,onExited:handleHidden,onEnter:onEnter,onEntering:onEntering,onEntered:onEntered,children:child});}return container?/*#__PURE__*/ReactDOM.createPortal(child,container):null;});Overlay.displayName='Overlay';export default Overlay;","map":null,"metadata":{},"sourceType":"module"}