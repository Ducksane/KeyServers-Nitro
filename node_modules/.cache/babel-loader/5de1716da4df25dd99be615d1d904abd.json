{"ast":null,"code":"import _slicedToArray from\"/home/muphy/Documents/habboom/Nitro-Edit-main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import qsa from'dom-helpers/querySelectorAll';import addEventListener from'dom-helpers/addEventListener';import{useCallback,useRef,useEffect,useMemo,useContext}from'react';import*as React from'react';import{useUncontrolledProp}from'uncontrollable';import usePrevious from'@restart/hooks/usePrevious';import useForceUpdate from'@restart/hooks/useForceUpdate';import useEventListener from'@restart/hooks/useEventListener';import useEventCallback from'@restart/hooks/useEventCallback';import DropdownContext from'./DropdownContext';import DropdownMenu from'./DropdownMenu';import DropdownToggle,{isRoleMenu}from'./DropdownToggle';import DropdownItem from'./DropdownItem';import SelectableContext from'./SelectableContext';import{dataAttr}from'./DataKey';import useWindow from'./useWindow';import{jsx as _jsx}from\"react/jsx-runtime\";function useRefWithUpdate(){var forceUpdate=useForceUpdate();var ref=useRef(null);var attachRef=useCallback(function(element){ref.current=element;// ensure that a menu set triggers an update for consumers\nforceUpdate();},[forceUpdate]);return[ref,attachRef];}/**\n * @displayName Dropdown\n * @public\n */function Dropdown(_ref){var defaultShow=_ref.defaultShow,rawShow=_ref.show,onSelect=_ref.onSelect,rawOnToggle=_ref.onToggle,_ref$itemSelector=_ref.itemSelector,itemSelector=_ref$itemSelector===void 0?\"* [\".concat(dataAttr('dropdown-item'),\"]\"):_ref$itemSelector,focusFirstItemOnShow=_ref.focusFirstItemOnShow,_ref$placement=_ref.placement,placement=_ref$placement===void 0?'bottom-start':_ref$placement,children=_ref.children;var window=useWindow();var _useUncontrolledProp=useUncontrolledProp(rawShow,defaultShow,rawOnToggle),_useUncontrolledProp2=_slicedToArray(_useUncontrolledProp,2),show=_useUncontrolledProp2[0],onToggle=_useUncontrolledProp2[1];// We use normal refs instead of useCallbackRef in order to populate the\n// the value as quickly as possible, otherwise the effect to focus the element\n// may run before the state value is set\nvar _useRefWithUpdate=useRefWithUpdate(),_useRefWithUpdate2=_slicedToArray(_useRefWithUpdate,2),menuRef=_useRefWithUpdate2[0],setMenu=_useRefWithUpdate2[1];var menuElement=menuRef.current;var _useRefWithUpdate3=useRefWithUpdate(),_useRefWithUpdate4=_slicedToArray(_useRefWithUpdate3,2),toggleRef=_useRefWithUpdate4[0],setToggle=_useRefWithUpdate4[1];var toggleElement=toggleRef.current;var lastShow=usePrevious(show);var lastSourceEvent=useRef(null);var focusInDropdown=useRef(false);var onSelectCtx=useContext(SelectableContext);var toggle=useCallback(function(nextShow,event){var source=arguments.length>2&&arguments[2]!==undefined?arguments[2]:event==null?void 0:event.type;onToggle(nextShow,{originalEvent:event,source:source});},[onToggle]);var handleSelect=useEventCallback(function(key,event){onSelect==null?void 0:onSelect(key,event);toggle(false,event,'select');if(!event.isPropagationStopped()){onSelectCtx==null?void 0:onSelectCtx(key,event);}});var context=useMemo(function(){return{toggle:toggle,placement:placement,show:show,menuElement:menuElement,toggleElement:toggleElement,setMenu:setMenu,setToggle:setToggle};},[toggle,placement,show,menuElement,toggleElement,setMenu,setToggle]);if(menuElement&&lastShow&&!show){focusInDropdown.current=menuElement.contains(menuElement.ownerDocument.activeElement);}var focusToggle=useEventCallback(function(){if(toggleElement&&toggleElement.focus){toggleElement.focus();}});var maybeFocusFirst=useEventCallback(function(){var type=lastSourceEvent.current;var focusType=focusFirstItemOnShow;if(focusType==null){focusType=menuRef.current&&isRoleMenu(menuRef.current)?'keyboard':false;}if(focusType===false||focusType==='keyboard'&&!/^key.+$/.test(type)){return;}var first=qsa(menuRef.current,itemSelector)[0];if(first&&first.focus)first.focus();});useEffect(function(){if(show)maybeFocusFirst();else if(focusInDropdown.current){focusInDropdown.current=false;focusToggle();}// only `show` should be changing\n},[show,focusInDropdown,focusToggle,maybeFocusFirst]);useEffect(function(){lastSourceEvent.current=null;});var getNextFocusedChild=function getNextFocusedChild(current,offset){if(!menuRef.current)return null;var items=qsa(menuRef.current,itemSelector);var index=items.indexOf(current)+offset;index=Math.max(0,Math.min(index,items.length));return items[index];};useEventListener(useCallback(function(){return window.document;},[window]),'keydown',function(event){var _menuRef$current,_toggleRef$current;var key=event.key;var target=event.target;var fromMenu=(_menuRef$current=menuRef.current)==null?void 0:_menuRef$current.contains(target);var fromToggle=(_toggleRef$current=toggleRef.current)==null?void 0:_toggleRef$current.contains(target);// Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400\n// in inscrutability\nvar isInput=/input|textarea/i.test(target.tagName);if(isInput&&(key===' '||key!=='Escape'&&fromMenu||key==='Escape'&&target.type==='search')){return;}if(!fromMenu&&!fromToggle){return;}if(key==='Tab'&&(!menuRef.current||!show)){return;}lastSourceEvent.current=event.type;var meta={originalEvent:event,source:event.type};switch(key){case'ArrowUp':{var next=getNextFocusedChild(target,-1);if(next&&next.focus)next.focus();event.preventDefault();return;}case'ArrowDown':event.preventDefault();if(!show){onToggle(true,meta);}else{var _next=getNextFocusedChild(target,1);if(_next&&_next.focus)_next.focus();}return;case'Tab':// on keydown the target is the element being tabbed FROM, we need that\n// to know if this event is relevant to this dropdown (e.g. in this menu).\n// On `keyup` the target is the element being tagged TO which we use to check\n// if focus has left the menu\naddEventListener(target.ownerDocument,'keyup',function(e){var _menuRef$current2;if(e.key==='Tab'&&!e.target||!((_menuRef$current2=menuRef.current)!=null&&_menuRef$current2.contains(e.target))){onToggle(false,meta);}},{once:true});break;case'Escape':if(key==='Escape'){event.preventDefault();event.stopPropagation();}onToggle(false,meta);break;default:}});return/*#__PURE__*/_jsx(SelectableContext.Provider,{value:handleSelect,children:/*#__PURE__*/_jsx(DropdownContext.Provider,{value:context,children:children})});}Dropdown.displayName='Dropdown';Dropdown.Menu=DropdownMenu;Dropdown.Toggle=DropdownToggle;Dropdown.Item=DropdownItem;export default Dropdown;","map":null,"metadata":{},"sourceType":"module"}