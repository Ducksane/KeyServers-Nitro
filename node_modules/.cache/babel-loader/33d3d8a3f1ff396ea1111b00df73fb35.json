{"ast":null,"code":"import{useMemo,useRef}from'react';import useMounted from'./useMounted';import useWillUnmount from'./useWillUnmount';/*\n * Browsers including Internet Explorer, Chrome, Safari, and Firefox store the\n * delay as a 32-bit signed integer internally. This causes an integer overflow\n * when using delays larger than 2,147,483,647 ms (about 24.8 days),\n * resulting in the timeout being executed immediately.\n *\n * via: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\n */var MAX_DELAY_MS=Math.pow(2,31)-1;function setChainedTimeout(handleRef,fn,timeoutAtMs){var delayMs=timeoutAtMs-Date.now();handleRef.current=delayMs<=MAX_DELAY_MS?setTimeout(fn,delayMs):setTimeout(function(){return setChainedTimeout(handleRef,fn,timeoutAtMs);},MAX_DELAY_MS);}/**\n * Returns a controller object for setting a timeout that is properly cleaned up\n * once the component unmounts. New timeouts cancel and replace existing ones.\n *\n *\n *\n * ```tsx\n * const { set, clear } = useTimeout();\n * const [hello, showHello] = useState(false);\n * //Display hello after 5 seconds\n * set(() => showHello(true), 5000);\n * return (\n *   <div className=\"App\">\n *     {hello ? <h3>Hello</h3> : null}\n *   </div>\n * );\n * ```\n */export default function useTimeout(){var isMounted=useMounted();// types are confused between node and web here IDK\nvar handleRef=useRef();useWillUnmount(function(){return clearTimeout(handleRef.current);});return useMemo(function(){var clear=function clear(){return clearTimeout(handleRef.current);};function set(fn,delayMs){if(delayMs===void 0){delayMs=0;}if(!isMounted())return;clear();if(delayMs<=MAX_DELAY_MS){// For simplicity, if the timeout is short, just set a normal timeout.\nhandleRef.current=setTimeout(fn,delayMs);}else{setChainedTimeout(handleRef,fn,Date.now()+delayMs);}}return{set:set,clear:clear};},[]);}","map":null,"metadata":{},"sourceType":"module"}