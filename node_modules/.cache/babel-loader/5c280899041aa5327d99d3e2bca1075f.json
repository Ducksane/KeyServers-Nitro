{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";import _extends from\"@babel/runtime/helpers/esm/extends\";import _assertThisInitialized from\"@babel/runtime/helpers/esm/assertThisInitialized\";import _inheritsLoose from\"@babel/runtime/helpers/esm/inheritsLoose\";import React from'react';import TransitionGroupContext from'./TransitionGroupContext';import{getChildMapping,getInitialChildMapping,getNextChildMapping}from'./utils/ChildMapping';var values=Object.values||function(obj){return Object.keys(obj).map(function(k){return obj[k];});};var defaultProps={component:'div',childFactory:function childFactory(child){return child;}};/**\n * The `<TransitionGroup>` component manages a set of transition components\n * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition\n * components, `<TransitionGroup>` is a state machine for managing the mounting\n * and unmounting of components over time.\n *\n * Consider the example below. As items are removed or added to the TodoList the\n * `in` prop is toggled automatically by the `<TransitionGroup>`.\n *\n * Note that `<TransitionGroup>`  does not define any animation behavior!\n * Exactly _how_ a list item animates is up to the individual transition\n * component. This means you can mix and match animations across different list\n * items.\n */var TransitionGroup=/*#__PURE__*/function(_React$Component){_inheritsLoose(TransitionGroup,_React$Component);function TransitionGroup(props,context){var _this;_this=_React$Component.call(this,props,context)||this;var handleExited=_this.handleExited.bind(_assertThisInitialized(_this));// Initial children should all be entering, dependent on appear\n_this.state={contextValue:{isMounting:true},handleExited:handleExited,firstRender:true};return _this;}var _proto=TransitionGroup.prototype;_proto.componentDidMount=function componentDidMount(){this.mounted=true;this.setState({contextValue:{isMounting:false}});};_proto.componentWillUnmount=function componentWillUnmount(){this.mounted=false;};TransitionGroup.getDerivedStateFromProps=function getDerivedStateFromProps(nextProps,_ref){var prevChildMapping=_ref.children,handleExited=_ref.handleExited,firstRender=_ref.firstRender;return{children:firstRender?getInitialChildMapping(nextProps,handleExited):getNextChildMapping(nextProps,prevChildMapping,handleExited),firstRender:false};}// node is `undefined` when user provided `nodeRef` prop\n;_proto.handleExited=function handleExited(child,node){var currentChildMapping=getChildMapping(this.props.children);if(child.key in currentChildMapping)return;if(child.props.onExited){child.props.onExited(node);}if(this.mounted){this.setState(function(state){var children=_extends({},state.children);delete children[child.key];return{children:children};});}};_proto.render=function render(){var _this$props=this.props,Component=_this$props.component,childFactory=_this$props.childFactory,props=_objectWithoutPropertiesLoose(_this$props,[\"component\",\"childFactory\"]);var contextValue=this.state.contextValue;var children=values(this.state.children).map(childFactory);delete props.appear;delete props.enter;delete props.exit;if(Component===null){return/*#__PURE__*/React.createElement(TransitionGroupContext.Provider,{value:contextValue},children);}return/*#__PURE__*/React.createElement(TransitionGroupContext.Provider,{value:contextValue},/*#__PURE__*/React.createElement(Component,props,children));};return TransitionGroup;}(React.Component);TransitionGroup.defaultProps=defaultProps;export default TransitionGroup;","map":null,"metadata":{},"sourceType":"module"}