{"ast":null,"code":"import{useState}from'react';import useEffect from'./useIsomorphicEffect';var targetMap=new WeakMap();var resizeObserver;function getResizeObserver(){// eslint-disable-next-line no-return-assign\nreturn resizeObserver=resizeObserver||new window.ResizeObserver(function(entries){entries.forEach(function(entry){var handler=targetMap.get(entry.target);if(handler)handler(entry.contentRect);});});}/**\n * Efficiently observe size changes on an element. Depends on the `ResizeObserver` api,\n * and polyfills are needed in older browsers.\n *\n * ```ts\n * const [ref, attachRef] = useCallbackRef(null);\n *\n * const rect = useResizeObserver(ref);\n *\n * return (\n *  <div ref={attachRef}>\n *    {JSON.stringify(rect)}\n *  </div>\n * )\n * ```\n *\n * @param element The DOM element to observe\n */export default function useResizeObserver(element){var _useState=useState(null),rect=_useState[0],setRect=_useState[1];useEffect(function(){if(!element)return;getResizeObserver().observe(element);setRect(element.getBoundingClientRect());targetMap.set(element,function(rect){setRect(rect);});return function(){targetMap.delete(element);};},[element]);return rect;}","map":null,"metadata":{},"sourceType":"module"}