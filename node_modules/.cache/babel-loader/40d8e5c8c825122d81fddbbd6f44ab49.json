{"ast":null,"code":"import{useRef,useEffect}from'react';/**\n * Track whether a component is current mounted. Generally less preferable than\n * properlly canceling effects so they don't run after a component is unmounted,\n * but helpful in cases where that isn't feasible, such as a `Promise` resolution.\n *\n * @returns a function that returns the current isMounted state of the component\n *\n * ```ts\n * const [data, setData] = useState(null)\n * const isMounted = useMounted()\n *\n * useEffect(() => {\n *   fetchdata().then((newData) => {\n *      if (isMounted()) {\n *        setData(newData);\n *      }\n *   })\n * })\n * ```\n */export default function useMounted(){var mounted=useRef(true);var isMounted=useRef(function(){return mounted.current;});useEffect(function(){mounted.current=true;return function(){mounted.current=false;};},[]);return isMounted.current;}","map":null,"metadata":{},"sourceType":"module"}