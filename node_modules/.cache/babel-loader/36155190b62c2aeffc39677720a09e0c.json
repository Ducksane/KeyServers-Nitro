{"ast":null,"code":"/*!\n * @pixi/constants - v6.3.0\n * Compiled Wed, 23 Mar 2022 18:58:56 UTC\n *\n * @pixi/constants is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */ /**\n * Different types of environments for WebGL.\n *\n * @static\n * @memberof PIXI\n * @name ENV\n * @enum {number}\n * @property {number} WEBGL_LEGACY - Used for older v1 WebGL devices. PixiJS will aim to ensure compatibility\n *  with older / less advanced devices. If you experience unexplained flickering prefer this environment.\n * @property {number} WEBGL - Version 1 of WebGL\n * @property {number} WEBGL2 - Version 2 of WebGL\n */var ENV;(function(ENV){ENV[ENV[\"WEBGL_LEGACY\"]=0]=\"WEBGL_LEGACY\";ENV[ENV[\"WEBGL\"]=1]=\"WEBGL\";ENV[ENV[\"WEBGL2\"]=2]=\"WEBGL2\";})(ENV||(ENV={}));/**\n * Constant to identify the Renderer Type.\n *\n * @static\n * @memberof PIXI\n * @name RENDERER_TYPE\n * @enum {number}\n * @property {number} UNKNOWN - Unknown render type.\n * @property {number} WEBGL - WebGL render type.\n * @property {number} CANVAS - Canvas render type.\n */var RENDERER_TYPE;(function(RENDERER_TYPE){RENDERER_TYPE[RENDERER_TYPE[\"UNKNOWN\"]=0]=\"UNKNOWN\";RENDERER_TYPE[RENDERER_TYPE[\"WEBGL\"]=1]=\"WEBGL\";RENDERER_TYPE[RENDERER_TYPE[\"CANVAS\"]=2]=\"CANVAS\";})(RENDERER_TYPE||(RENDERER_TYPE={}));/**\n * Bitwise OR of masks that indicate the buffers to be cleared.\n *\n * @static\n * @memberof PIXI\n * @name BUFFER_BITS\n * @enum {number}\n * @property {number} COLOR - Indicates the buffers currently enabled for color writing.\n * @property {number} DEPTH - Indicates the depth buffer.\n * @property {number} STENCIL - Indicates the stencil buffer.\n */var BUFFER_BITS;(function(BUFFER_BITS){BUFFER_BITS[BUFFER_BITS[\"COLOR\"]=16384]=\"COLOR\";BUFFER_BITS[BUFFER_BITS[\"DEPTH\"]=256]=\"DEPTH\";BUFFER_BITS[BUFFER_BITS[\"STENCIL\"]=1024]=\"STENCIL\";})(BUFFER_BITS||(BUFFER_BITS={}));/**\n * Various blend modes supported by PIXI.\n *\n * IMPORTANT - The WebGL renderer only supports the NORMAL, ADD, MULTIPLY and SCREEN blend modes.\n * Anything else will silently act like NORMAL.\n *\n * @memberof PIXI\n * @name BLEND_MODES\n * @enum {number}\n * @property {number} NORMAL\n * @property {number} ADD\n * @property {number} MULTIPLY\n * @property {number} SCREEN\n * @property {number} OVERLAY\n * @property {number} DARKEN\n * @property {number} LIGHTEN\n * @property {number} COLOR_DODGE\n * @property {number} COLOR_BURN\n * @property {number} HARD_LIGHT\n * @property {number} SOFT_LIGHT\n * @property {number} DIFFERENCE\n * @property {number} EXCLUSION\n * @property {number} HUE\n * @property {number} SATURATION\n * @property {number} COLOR\n * @property {number} LUMINOSITY\n * @property {number} NORMAL_NPM\n * @property {number} ADD_NPM\n * @property {number} SCREEN_NPM\n * @property {number} NONE\n * @property {number} SRC_IN\n * @property {number} SRC_OUT\n * @property {number} SRC_ATOP\n * @property {number} DST_OVER\n * @property {number} DST_IN\n * @property {number} DST_OUT\n * @property {number} DST_ATOP\n * @property {number} SUBTRACT\n * @property {number} SRC_OVER\n * @property {number} ERASE\n * @property {number} XOR\n */var BLEND_MODES;(function(BLEND_MODES){BLEND_MODES[BLEND_MODES[\"NORMAL\"]=0]=\"NORMAL\";BLEND_MODES[BLEND_MODES[\"ADD\"]=1]=\"ADD\";BLEND_MODES[BLEND_MODES[\"MULTIPLY\"]=2]=\"MULTIPLY\";BLEND_MODES[BLEND_MODES[\"SCREEN\"]=3]=\"SCREEN\";BLEND_MODES[BLEND_MODES[\"OVERLAY\"]=4]=\"OVERLAY\";BLEND_MODES[BLEND_MODES[\"DARKEN\"]=5]=\"DARKEN\";BLEND_MODES[BLEND_MODES[\"LIGHTEN\"]=6]=\"LIGHTEN\";BLEND_MODES[BLEND_MODES[\"COLOR_DODGE\"]=7]=\"COLOR_DODGE\";BLEND_MODES[BLEND_MODES[\"COLOR_BURN\"]=8]=\"COLOR_BURN\";BLEND_MODES[BLEND_MODES[\"HARD_LIGHT\"]=9]=\"HARD_LIGHT\";BLEND_MODES[BLEND_MODES[\"SOFT_LIGHT\"]=10]=\"SOFT_LIGHT\";BLEND_MODES[BLEND_MODES[\"DIFFERENCE\"]=11]=\"DIFFERENCE\";BLEND_MODES[BLEND_MODES[\"EXCLUSION\"]=12]=\"EXCLUSION\";BLEND_MODES[BLEND_MODES[\"HUE\"]=13]=\"HUE\";BLEND_MODES[BLEND_MODES[\"SATURATION\"]=14]=\"SATURATION\";BLEND_MODES[BLEND_MODES[\"COLOR\"]=15]=\"COLOR\";BLEND_MODES[BLEND_MODES[\"LUMINOSITY\"]=16]=\"LUMINOSITY\";BLEND_MODES[BLEND_MODES[\"NORMAL_NPM\"]=17]=\"NORMAL_NPM\";BLEND_MODES[BLEND_MODES[\"ADD_NPM\"]=18]=\"ADD_NPM\";BLEND_MODES[BLEND_MODES[\"SCREEN_NPM\"]=19]=\"SCREEN_NPM\";BLEND_MODES[BLEND_MODES[\"NONE\"]=20]=\"NONE\";BLEND_MODES[BLEND_MODES[\"SRC_OVER\"]=0]=\"SRC_OVER\";BLEND_MODES[BLEND_MODES[\"SRC_IN\"]=21]=\"SRC_IN\";BLEND_MODES[BLEND_MODES[\"SRC_OUT\"]=22]=\"SRC_OUT\";BLEND_MODES[BLEND_MODES[\"SRC_ATOP\"]=23]=\"SRC_ATOP\";BLEND_MODES[BLEND_MODES[\"DST_OVER\"]=24]=\"DST_OVER\";BLEND_MODES[BLEND_MODES[\"DST_IN\"]=25]=\"DST_IN\";BLEND_MODES[BLEND_MODES[\"DST_OUT\"]=26]=\"DST_OUT\";BLEND_MODES[BLEND_MODES[\"DST_ATOP\"]=27]=\"DST_ATOP\";BLEND_MODES[BLEND_MODES[\"ERASE\"]=26]=\"ERASE\";BLEND_MODES[BLEND_MODES[\"SUBTRACT\"]=28]=\"SUBTRACT\";BLEND_MODES[BLEND_MODES[\"XOR\"]=29]=\"XOR\";})(BLEND_MODES||(BLEND_MODES={}));/**\n * Various webgl draw modes. These can be used to specify which GL drawMode to use\n * under certain situations and renderers.\n *\n * @memberof PIXI\n * @static\n * @name DRAW_MODES\n * @enum {number}\n * @property {number} POINTS\n * @property {number} LINES\n * @property {number} LINE_LOOP\n * @property {number} LINE_STRIP\n * @property {number} TRIANGLES\n * @property {number} TRIANGLE_STRIP\n * @property {number} TRIANGLE_FAN\n */var DRAW_MODES;(function(DRAW_MODES){DRAW_MODES[DRAW_MODES[\"POINTS\"]=0]=\"POINTS\";DRAW_MODES[DRAW_MODES[\"LINES\"]=1]=\"LINES\";DRAW_MODES[DRAW_MODES[\"LINE_LOOP\"]=2]=\"LINE_LOOP\";DRAW_MODES[DRAW_MODES[\"LINE_STRIP\"]=3]=\"LINE_STRIP\";DRAW_MODES[DRAW_MODES[\"TRIANGLES\"]=4]=\"TRIANGLES\";DRAW_MODES[DRAW_MODES[\"TRIANGLE_STRIP\"]=5]=\"TRIANGLE_STRIP\";DRAW_MODES[DRAW_MODES[\"TRIANGLE_FAN\"]=6]=\"TRIANGLE_FAN\";})(DRAW_MODES||(DRAW_MODES={}));/**\n * Various GL texture/resources formats.\n *\n * @memberof PIXI\n * @static\n * @name FORMATS\n * @enum {number}\n * @property {number} RGBA=6408\n * @property {number} RGB=6407\n * @property {number} RG=33319\n * @property {number} RED=6403\n * @property {number} RGBA_INTEGER=36249\n * @property {number} RGB_INTEGER=36248\n * @property {number} RG_INTEGER=33320\n * @property {number} RED_INTEGER=36244\n * @property {number} ALPHA=6406\n * @property {number} LUMINANCE=6409\n * @property {number} LUMINANCE_ALPHA=6410\n * @property {number} DEPTH_COMPONENT=6402\n * @property {number} DEPTH_STENCIL=34041\n */var FORMATS;(function(FORMATS){FORMATS[FORMATS[\"RGBA\"]=6408]=\"RGBA\";FORMATS[FORMATS[\"RGB\"]=6407]=\"RGB\";FORMATS[FORMATS[\"RG\"]=33319]=\"RG\";FORMATS[FORMATS[\"RED\"]=6403]=\"RED\";FORMATS[FORMATS[\"RGBA_INTEGER\"]=36249]=\"RGBA_INTEGER\";FORMATS[FORMATS[\"RGB_INTEGER\"]=36248]=\"RGB_INTEGER\";FORMATS[FORMATS[\"RG_INTEGER\"]=33320]=\"RG_INTEGER\";FORMATS[FORMATS[\"RED_INTEGER\"]=36244]=\"RED_INTEGER\";FORMATS[FORMATS[\"ALPHA\"]=6406]=\"ALPHA\";FORMATS[FORMATS[\"LUMINANCE\"]=6409]=\"LUMINANCE\";FORMATS[FORMATS[\"LUMINANCE_ALPHA\"]=6410]=\"LUMINANCE_ALPHA\";FORMATS[FORMATS[\"DEPTH_COMPONENT\"]=6402]=\"DEPTH_COMPONENT\";FORMATS[FORMATS[\"DEPTH_STENCIL\"]=34041]=\"DEPTH_STENCIL\";})(FORMATS||(FORMATS={}));/**\n * Various GL target types.\n *\n * @memberof PIXI\n * @static\n * @name TARGETS\n * @enum {number}\n * @property {number} TEXTURE_2D=3553\n * @property {number} TEXTURE_CUBE_MAP=34067\n * @property {number} TEXTURE_2D_ARRAY=35866\n * @property {number} TEXTURE_CUBE_MAP_POSITIVE_X=34069\n * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_X=34070\n * @property {number} TEXTURE_CUBE_MAP_POSITIVE_Y=34071\n * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_Y=34072\n * @property {number} TEXTURE_CUBE_MAP_POSITIVE_Z=34073\n * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_Z=34074\n */var TARGETS;(function(TARGETS){TARGETS[TARGETS[\"TEXTURE_2D\"]=3553]=\"TEXTURE_2D\";TARGETS[TARGETS[\"TEXTURE_CUBE_MAP\"]=34067]=\"TEXTURE_CUBE_MAP\";TARGETS[TARGETS[\"TEXTURE_2D_ARRAY\"]=35866]=\"TEXTURE_2D_ARRAY\";TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_POSITIVE_X\"]=34069]=\"TEXTURE_CUBE_MAP_POSITIVE_X\";TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_NEGATIVE_X\"]=34070]=\"TEXTURE_CUBE_MAP_NEGATIVE_X\";TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_POSITIVE_Y\"]=34071]=\"TEXTURE_CUBE_MAP_POSITIVE_Y\";TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_NEGATIVE_Y\"]=34072]=\"TEXTURE_CUBE_MAP_NEGATIVE_Y\";TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_POSITIVE_Z\"]=34073]=\"TEXTURE_CUBE_MAP_POSITIVE_Z\";TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_NEGATIVE_Z\"]=34074]=\"TEXTURE_CUBE_MAP_NEGATIVE_Z\";})(TARGETS||(TARGETS={}));/**\n * Various GL data format types.\n *\n * @memberof PIXI\n * @static\n * @name TYPES\n * @enum {number}\n * @property {number} UNSIGNED_BYTE=5121\n * @property {number} UNSIGNED_SHORT=5123\n * @property {number} UNSIGNED_SHORT_5_6_5=33635\n * @property {number} UNSIGNED_SHORT_4_4_4_4=32819\n * @property {number} UNSIGNED_SHORT_5_5_5_1=32820\n * @property {number} UNSIGNED_INT=5125\n * @property {number} UNSIGNED_INT_10F_11F_11F_REV=35899\n * @property {number} UNSIGNED_INT_2_10_10_10_REV=33640\n * @property {number} UNSIGNED_INT_24_8=34042\n * @property {number} UNSIGNED_INT_5_9_9_9_REV=35902\n * @property {number} BYTE=5120\n * @property {number} SHORT=5122\n * @property {number} INT=5124\n * @property {number} FLOAT=5126\n * @property {number} FLOAT_32_UNSIGNED_INT_24_8_REV=36269\n * @property {number} HALF_FLOAT=36193\n */var TYPES;(function(TYPES){TYPES[TYPES[\"UNSIGNED_BYTE\"]=5121]=\"UNSIGNED_BYTE\";TYPES[TYPES[\"UNSIGNED_SHORT\"]=5123]=\"UNSIGNED_SHORT\";TYPES[TYPES[\"UNSIGNED_SHORT_5_6_5\"]=33635]=\"UNSIGNED_SHORT_5_6_5\";TYPES[TYPES[\"UNSIGNED_SHORT_4_4_4_4\"]=32819]=\"UNSIGNED_SHORT_4_4_4_4\";TYPES[TYPES[\"UNSIGNED_SHORT_5_5_5_1\"]=32820]=\"UNSIGNED_SHORT_5_5_5_1\";TYPES[TYPES[\"UNSIGNED_INT\"]=5125]=\"UNSIGNED_INT\";TYPES[TYPES[\"UNSIGNED_INT_10F_11F_11F_REV\"]=35899]=\"UNSIGNED_INT_10F_11F_11F_REV\";TYPES[TYPES[\"UNSIGNED_INT_2_10_10_10_REV\"]=33640]=\"UNSIGNED_INT_2_10_10_10_REV\";TYPES[TYPES[\"UNSIGNED_INT_24_8\"]=34042]=\"UNSIGNED_INT_24_8\";TYPES[TYPES[\"UNSIGNED_INT_5_9_9_9_REV\"]=35902]=\"UNSIGNED_INT_5_9_9_9_REV\";TYPES[TYPES[\"BYTE\"]=5120]=\"BYTE\";TYPES[TYPES[\"SHORT\"]=5122]=\"SHORT\";TYPES[TYPES[\"INT\"]=5124]=\"INT\";TYPES[TYPES[\"FLOAT\"]=5126]=\"FLOAT\";TYPES[TYPES[\"FLOAT_32_UNSIGNED_INT_24_8_REV\"]=36269]=\"FLOAT_32_UNSIGNED_INT_24_8_REV\";TYPES[TYPES[\"HALF_FLOAT\"]=36193]=\"HALF_FLOAT\";})(TYPES||(TYPES={}));/**\n * Various sampler types. Correspond to `sampler`, `isampler`, `usampler` GLSL types respectively.\n * WebGL1 works only with FLOAT.\n *\n * @memberof PIXI\n * @static\n * @name SAMPLER_TYPES\n * @enum {number}\n * @property {number} FLOAT=0\n * @property {number} INT=1\n * @property {number} UINT=2\n */var SAMPLER_TYPES;(function(SAMPLER_TYPES){SAMPLER_TYPES[SAMPLER_TYPES[\"FLOAT\"]=0]=\"FLOAT\";SAMPLER_TYPES[SAMPLER_TYPES[\"INT\"]=1]=\"INT\";SAMPLER_TYPES[SAMPLER_TYPES[\"UINT\"]=2]=\"UINT\";})(SAMPLER_TYPES||(SAMPLER_TYPES={}));/**\n * The scale modes that are supported by pixi.\n *\n * The {@link PIXI.settings.SCALE_MODE} scale mode affects the default scaling mode of future operations.\n * It can be re-assigned to either LINEAR or NEAREST, depending upon suitability.\n *\n * @memberof PIXI\n * @static\n * @name SCALE_MODES\n * @enum {number}\n * @property {number} LINEAR Smooth scaling\n * @property {number} NEAREST Pixelating scaling\n */var SCALE_MODES;(function(SCALE_MODES){SCALE_MODES[SCALE_MODES[\"NEAREST\"]=0]=\"NEAREST\";SCALE_MODES[SCALE_MODES[\"LINEAR\"]=1]=\"LINEAR\";})(SCALE_MODES||(SCALE_MODES={}));/**\n * The wrap modes that are supported by pixi.\n *\n * The {@link PIXI.settings.WRAP_MODE} wrap mode affects the default wrapping mode of future operations.\n * It can be re-assigned to either CLAMP or REPEAT, depending upon suitability.\n * If the texture is non power of two then clamp will be used regardless as WebGL can\n * only use REPEAT if the texture is po2.\n *\n * This property only affects WebGL.\n *\n * @name WRAP_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} CLAMP - The textures uvs are clamped\n * @property {number} REPEAT - The texture uvs tile and repeat\n * @property {number} MIRRORED_REPEAT - The texture uvs tile and repeat with mirroring\n */var WRAP_MODES;(function(WRAP_MODES){WRAP_MODES[WRAP_MODES[\"CLAMP\"]=33071]=\"CLAMP\";WRAP_MODES[WRAP_MODES[\"REPEAT\"]=10497]=\"REPEAT\";WRAP_MODES[WRAP_MODES[\"MIRRORED_REPEAT\"]=33648]=\"MIRRORED_REPEAT\";})(WRAP_MODES||(WRAP_MODES={}));/**\n * Mipmap filtering modes that are supported by pixi.\n *\n * The {@link PIXI.settings.MIPMAP_TEXTURES} affects default texture filtering.\n * Mipmaps are generated for a baseTexture if its `mipmap` field is `ON`,\n * or its `POW2` and texture dimensions are powers of 2.\n * Due to platform restriction, `ON` option will work like `POW2` for webgl-1.\n *\n * This property only affects WebGL.\n *\n * @name MIPMAP_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} OFF - No mipmaps\n * @property {number} POW2 - Generate mipmaps if texture dimensions are pow2\n * @property {number} ON - Always generate mipmaps\n * @property {number} ON_MANUAL - Use mipmaps, but do not auto-generate them; this is used with a resource\n *   that supports buffering each level-of-detail.\n */var MIPMAP_MODES;(function(MIPMAP_MODES){MIPMAP_MODES[MIPMAP_MODES[\"OFF\"]=0]=\"OFF\";MIPMAP_MODES[MIPMAP_MODES[\"POW2\"]=1]=\"POW2\";MIPMAP_MODES[MIPMAP_MODES[\"ON\"]=2]=\"ON\";MIPMAP_MODES[MIPMAP_MODES[\"ON_MANUAL\"]=3]=\"ON_MANUAL\";})(MIPMAP_MODES||(MIPMAP_MODES={}));/**\n * How to treat textures with premultiplied alpha\n *\n * @name ALPHA_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} NO_PREMULTIPLIED_ALPHA - Source is not premultiplied, leave it like that.\n *  Option for compressed and data textures that are created from typed arrays.\n * @property {number} PREMULTIPLY_ON_UPLOAD - Source is not premultiplied, premultiply on upload.\n *  Default option, used for all loaded images.\n * @property {number} PREMULTIPLIED_ALPHA - Source is already premultiplied\n *  Example: spine atlases with `_pma` suffix.\n * @property {number} NPM - Alias for NO_PREMULTIPLIED_ALPHA.\n * @property {number} UNPACK - Default option, alias for PREMULTIPLY_ON_UPLOAD.\n * @property {number} PMA - Alias for PREMULTIPLIED_ALPHA.\n */var ALPHA_MODES;(function(ALPHA_MODES){ALPHA_MODES[ALPHA_MODES[\"NPM\"]=0]=\"NPM\";ALPHA_MODES[ALPHA_MODES[\"UNPACK\"]=1]=\"UNPACK\";ALPHA_MODES[ALPHA_MODES[\"PMA\"]=2]=\"PMA\";ALPHA_MODES[ALPHA_MODES[\"NO_PREMULTIPLIED_ALPHA\"]=0]=\"NO_PREMULTIPLIED_ALPHA\";ALPHA_MODES[ALPHA_MODES[\"PREMULTIPLY_ON_UPLOAD\"]=1]=\"PREMULTIPLY_ON_UPLOAD\";ALPHA_MODES[ALPHA_MODES[\"PREMULTIPLY_ALPHA\"]=2]=\"PREMULTIPLY_ALPHA\";ALPHA_MODES[ALPHA_MODES[\"PREMULTIPLIED_ALPHA\"]=2]=\"PREMULTIPLIED_ALPHA\";})(ALPHA_MODES||(ALPHA_MODES={}));/**\n * Configure whether filter textures are cleared after binding.\n *\n * Filter textures need not be cleared if the filter does not use pixel blending. {@link CLEAR_MODES.BLIT} will detect\n * this and skip clearing as an optimization.\n *\n * @name CLEAR_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} BLEND - Do not clear the filter texture. The filter's output will blend on top of the output texture.\n * @property {number} CLEAR - Always clear the filter texture.\n * @property {number} BLIT - Clear only if {@link FilterSystem.forceClear} is set or if the filter uses pixel blending.\n * @property {number} NO - Alias for BLEND, same as `false` in earlier versions\n * @property {number} YES - Alias for CLEAR, same as `true` in earlier versions\n * @property {number} AUTO - Alias for BLIT\n */var CLEAR_MODES;(function(CLEAR_MODES){CLEAR_MODES[CLEAR_MODES[\"NO\"]=0]=\"NO\";CLEAR_MODES[CLEAR_MODES[\"YES\"]=1]=\"YES\";CLEAR_MODES[CLEAR_MODES[\"AUTO\"]=2]=\"AUTO\";CLEAR_MODES[CLEAR_MODES[\"BLEND\"]=0]=\"BLEND\";CLEAR_MODES[CLEAR_MODES[\"CLEAR\"]=1]=\"CLEAR\";CLEAR_MODES[CLEAR_MODES[\"BLIT\"]=2]=\"BLIT\";})(CLEAR_MODES||(CLEAR_MODES={}));/**\n * The gc modes that are supported by pixi.\n *\n * The {@link PIXI.settings.GC_MODE} Garbage Collection mode for PixiJS textures is AUTO\n * If set to GC_MODE, the renderer will occasionally check textures usage. If they are not\n * used for a specified period of time they will be removed from the GPU. They will of course\n * be uploaded again when they are required. This is a silent behind the scenes process that\n * should ensure that the GPU does not  get filled up.\n *\n * Handy for mobile devices!\n * This property only affects WebGL.\n *\n * @name GC_MODES\n * @enum {number}\n * @static\n * @memberof PIXI\n * @property {number} AUTO - Garbage collection will happen periodically automatically\n * @property {number} MANUAL - Garbage collection will need to be called manually\n */var GC_MODES;(function(GC_MODES){GC_MODES[GC_MODES[\"AUTO\"]=0]=\"AUTO\";GC_MODES[GC_MODES[\"MANUAL\"]=1]=\"MANUAL\";})(GC_MODES||(GC_MODES={}));/**\n * Constants that specify float precision in shaders.\n *\n * @name PRECISION\n * @memberof PIXI\n * @constant\n * @static\n * @enum {string}\n * @property {string} LOW='lowp'\n * @property {string} MEDIUM='mediump'\n * @property {string} HIGH='highp'\n */var PRECISION;(function(PRECISION){PRECISION[\"LOW\"]=\"lowp\";PRECISION[\"MEDIUM\"]=\"mediump\";PRECISION[\"HIGH\"]=\"highp\";})(PRECISION||(PRECISION={}));/**\n * Constants for mask implementations.\n * We use `type` suffix because it leads to very different behaviours\n *\n * @name MASK_TYPES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} NONE - Mask is ignored\n * @property {number} SCISSOR - Scissor mask, rectangle on screen, cheap\n * @property {number} STENCIL - Stencil mask, 1-bit, medium, works only if renderer supports stencil\n * @property {number} SPRITE - Mask that uses SpriteMaskFilter, uses temporary RenderTexture\n */var MASK_TYPES;(function(MASK_TYPES){MASK_TYPES[MASK_TYPES[\"NONE\"]=0]=\"NONE\";MASK_TYPES[MASK_TYPES[\"SCISSOR\"]=1]=\"SCISSOR\";MASK_TYPES[MASK_TYPES[\"STENCIL\"]=2]=\"STENCIL\";MASK_TYPES[MASK_TYPES[\"SPRITE\"]=3]=\"SPRITE\";})(MASK_TYPES||(MASK_TYPES={}));/**\n * Constants for multi-sampling antialiasing.\n *\n * @see PIXI.Framebuffer#multisample\n *\n * @name MSAA_QUALITY\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} NONE - No multisampling for this renderTexture\n * @property {number} LOW - Try 2 samples\n * @property {number} MEDIUM - Try 4 samples\n * @property {number} HIGH - Try 8 samples\n */var MSAA_QUALITY;(function(MSAA_QUALITY){MSAA_QUALITY[MSAA_QUALITY[\"NONE\"]=0]=\"NONE\";MSAA_QUALITY[MSAA_QUALITY[\"LOW\"]=2]=\"LOW\";MSAA_QUALITY[MSAA_QUALITY[\"MEDIUM\"]=4]=\"MEDIUM\";MSAA_QUALITY[MSAA_QUALITY[\"HIGH\"]=8]=\"HIGH\";})(MSAA_QUALITY||(MSAA_QUALITY={}));/**\n * Constants for various buffer types in Pixi\n *\n * @see PIXI.BUFFER_TYPE\n *\n * @name BUFFER_TYPE\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} ELEMENT_ARRAY_BUFFER - buffer type for using as an index buffer\n * @property {number} ARRAY_BUFFER - buffer type for using attribute data\n * @property {number} UNIFORM_BUFFER - the buffer type is for uniform buffer objects\n */var BUFFER_TYPE;(function(BUFFER_TYPE){BUFFER_TYPE[BUFFER_TYPE[\"ELEMENT_ARRAY_BUFFER\"]=34963]=\"ELEMENT_ARRAY_BUFFER\";BUFFER_TYPE[BUFFER_TYPE[\"ARRAY_BUFFER\"]=34962]=\"ARRAY_BUFFER\";// NOT YET SUPPORTED\nBUFFER_TYPE[BUFFER_TYPE[\"UNIFORM_BUFFER\"]=35345]=\"UNIFORM_BUFFER\";})(BUFFER_TYPE||(BUFFER_TYPE={}));export{ALPHA_MODES,BLEND_MODES,BUFFER_BITS,BUFFER_TYPE,CLEAR_MODES,DRAW_MODES,ENV,FORMATS,GC_MODES,MASK_TYPES,MIPMAP_MODES,MSAA_QUALITY,PRECISION,RENDERER_TYPE,SAMPLER_TYPES,SCALE_MODES,TARGETS,TYPES,WRAP_MODES};","map":null,"metadata":{},"sourceType":"module"}