{"ast":null,"code":"import{useState,useEffect}from'react';/**\n * Fetch and load an image for programatic use such as in a `<canvas>` element.\n *\n * @param imageOrUrl The `HtmlImageElement` or image url to load\n * @param crossOrigin The `crossorigin` attribute to set\n *\n * ```ts\n * const { image, error } = useImage('/static/kittens.png')\n * const ref = useRef<HTMLCanvasElement>()\n *\n * useEffect(() => {\n *   const ctx = ref.current.getContext('2d')\n *\n *   if (image) {\n *     ctx.drawImage(image, 0, 0)\n *   }\n * }, [ref, image])\n *\n * return (\n *   <>\n *     {error && \"there was a problem loading the image\"}\n *     <canvas ref={ref} />\n *   </>\n * ```\n */export default function useImage(imageOrUrl,crossOrigin){var _useState=useState({image:null,error:null}),state=_useState[0],setState=_useState[1];useEffect(function(){if(!imageOrUrl)return undefined;var image;if(typeof imageOrUrl==='string'){image=new Image();if(crossOrigin)image.crossOrigin=crossOrigin;image.src=imageOrUrl;}else{image=imageOrUrl;if(image.complete&&image.naturalHeight>0){setState({image:image,error:null});return;}}function onLoad(){setState({image:image,error:null});}function onError(error){setState({image:image,error:error});}image.addEventListener('load',onLoad);image.addEventListener('error',onError);return function(){image.removeEventListener('load',onLoad);image.removeEventListener('error',onError);};},[imageOrUrl,crossOrigin]);return state;}","map":null,"metadata":{},"sourceType":"module"}