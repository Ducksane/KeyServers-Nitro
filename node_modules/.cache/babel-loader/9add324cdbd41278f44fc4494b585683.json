{"ast":null,"code":"import _slicedToArray from\"C:/Users/Luis/Downloads/Habboom/Nitro-Edit/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import $cgWTI$react,{useContext as $cgWTI$useContext,useMemo as $cgWTI$useMemo,useState as $cgWTI$useState,useLayoutEffect as $cgWTI$useLayoutEffect}from\"react\";function $parcel$export(e,n,v,s){Object.defineProperty(e,n,{get:v,set:s,enumerable:true,configurable:true});}var $9d939cbc98267846$exports={};$parcel$export($9d939cbc98267846$exports,\"SSRProvider\",function(){return $9d939cbc98267846$export$9f8ac96af4b1b2ae;});$parcel$export($9d939cbc98267846$exports,\"useSSRSafeId\",function(){return $9d939cbc98267846$export$619500959fc48b26;});$parcel$export($9d939cbc98267846$exports,\"useIsSSR\",function(){return $9d939cbc98267846$export$535bd6ca7f90a273;});// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\nvar $9d939cbc98267846$var$defaultContext={prefix:String(Math.round(Math.random()*10000000000)),current:0};var $9d939cbc98267846$var$SSRContext=/*#__PURE__*/$cgWTI$react.createContext($9d939cbc98267846$var$defaultContext);function $9d939cbc98267846$export$9f8ac96af4b1b2ae(props){var cur=$cgWTI$useContext($9d939cbc98267846$var$SSRContext);var value=$cgWTI$useMemo(function(){return{// If this is the first SSRProvider, start with an empty string prefix, otherwise\n// append and increment the counter.\nprefix:cur===$9d939cbc98267846$var$defaultContext?'':\"\".concat(cur.prefix,\"-\").concat(++cur.current),current:0};},[cur]);return/*#__PURE__*/$cgWTI$react.createElement($9d939cbc98267846$var$SSRContext.Provider,{value:value},props.children);}var $9d939cbc98267846$var$canUseDOM=Boolean(typeof window!=='undefined'&&window.document&&window.document.createElement);function $9d939cbc98267846$export$619500959fc48b26(defaultId){var ctx=$cgWTI$useContext($9d939cbc98267846$var$SSRContext);// If we are rendering in a non-DOM environment, and there's no SSRProvider,\n// provide a warning to hint to the developer to add one.\nif(ctx===$9d939cbc98267846$var$defaultContext&&!$9d939cbc98267846$var$canUseDOM)console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');return $cgWTI$useMemo(function(){return defaultId||\"react-aria\".concat(ctx.prefix,\"-\").concat(++ctx.current);},[defaultId]);}function $9d939cbc98267846$export$535bd6ca7f90a273(){var cur=$cgWTI$useContext($9d939cbc98267846$var$SSRContext);var isInSSRContext=cur!==$9d939cbc98267846$var$defaultContext;var _$cgWTI$useState=$cgWTI$useState(isInSSRContext),_$cgWTI$useState2=_slicedToArray(_$cgWTI$useState,2),isSSR=_$cgWTI$useState2[0],setIsSSR=_$cgWTI$useState2[1];// If on the client, and the component was initially server rendered,\n// then schedule a layout effect to update the component after hydration.\nif(typeof window!=='undefined'&&isInSSRContext)// This if statement technically breaks the rules of hooks, but is safe\n// because the condition never changes after mounting.\n// eslint-disable-next-line react-hooks/rules-of-hooks\n$cgWTI$useLayoutEffect(function(){setIsSSR(false);},[]);return isSSR;}export{$9d939cbc98267846$export$9f8ac96af4b1b2ae as SSRProvider,$9d939cbc98267846$export$619500959fc48b26 as useSSRSafeId,$9d939cbc98267846$export$535bd6ca7f90a273 as useIsSSR};","map":null,"metadata":{},"sourceType":"module"}