{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";import _inheritsLoose from\"@babel/runtime/helpers/esm/inheritsLoose\";import React from'react';import ReactDOM from'react-dom';import config from'./config';import{timeoutsShape}from'./utils/PropTypes';import TransitionGroupContext from'./TransitionGroupContext';export var UNMOUNTED='unmounted';export var EXITED='exited';export var ENTERING='entering';export var ENTERED='entered';export var EXITING='exiting';/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it's used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * ---\n *\n * **Note**: `Transition` is a platform-agnostic base component. If you're using\n * transitions in CSS, you'll probably want to use\n * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)\n * instead. It inherits all the features of `Transition`, but contains\n * additional features necessary to play nice with CSS transitions (hence the\n * name of the component).\n *\n * ---\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the\n * components. It's up to you to give meaning and effect to those states. For\n * example we can add styles to a component when it enters or exits:\n *\n * ```jsx\n * import { Transition } from 'react-transition-group';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 1 },\n *   entered:  { opacity: 1 },\n *   exiting:  { opacity: 0 },\n *   exited:  { opacity: 0 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {state => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * There are 4 main states a Transition can be in:\n *  - `'entering'`\n *  - `'entered'`\n *  - `'exiting'`\n *  - `'exited'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component\n * begins the \"Enter\" stage. During this stage, the component will shift from\n * its current transition state, to `'entering'` for the duration of the\n * transition and then to the `'entered'` stage once it's complete. Let's take\n * the following example (we'll use the\n * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <Transition in={inProp} timeout={500}>\n *         {state => (\n *           // ...\n *         )}\n *       </Transition>\n *       <button onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `'entering'` state\n * and stay there for 500ms (the value of `timeout`) before it finally switches\n * to `'entered'`.\n *\n * When `in` is `false` the same thing happens except the state moves from\n * `'exiting'` to `'exited'`.\n */var Transition=/*#__PURE__*/function(_React$Component){_inheritsLoose(Transition,_React$Component);function Transition(props,context){var _this;_this=_React$Component.call(this,props,context)||this;var parentGroup=context;// In the context of a TransitionGroup all enters are really appears\nvar appear=parentGroup&&!parentGroup.isMounting?props.enter:props.appear;var initialStatus;_this.appearStatus=null;if(props.in){if(appear){initialStatus=EXITED;_this.appearStatus=ENTERING;}else{initialStatus=ENTERED;}}else{if(props.unmountOnExit||props.mountOnEnter){initialStatus=UNMOUNTED;}else{initialStatus=EXITED;}}_this.state={status:initialStatus};_this.nextCallback=null;return _this;}Transition.getDerivedStateFromProps=function getDerivedStateFromProps(_ref,prevState){var nextIn=_ref.in;if(nextIn&&prevState.status===UNMOUNTED){return{status:EXITED};}return null;}// getSnapshotBeforeUpdate(prevProps) {\n//   let nextStatus = null\n//   if (prevProps !== this.props) {\n//     const { status } = this.state\n//     if (this.props.in) {\n//       if (status !== ENTERING && status !== ENTERED) {\n//         nextStatus = ENTERING\n//       }\n//     } else {\n//       if (status === ENTERING || status === ENTERED) {\n//         nextStatus = EXITING\n//       }\n//     }\n//   }\n//   return { nextStatus }\n// }\n;var _proto=Transition.prototype;_proto.componentDidMount=function componentDidMount(){this.updateStatus(true,this.appearStatus);};_proto.componentDidUpdate=function componentDidUpdate(prevProps){var nextStatus=null;if(prevProps!==this.props){var status=this.state.status;if(this.props.in){if(status!==ENTERING&&status!==ENTERED){nextStatus=ENTERING;}}else{if(status===ENTERING||status===ENTERED){nextStatus=EXITING;}}}this.updateStatus(false,nextStatus);};_proto.componentWillUnmount=function componentWillUnmount(){this.cancelNextCallback();};_proto.getTimeouts=function getTimeouts(){var timeout=this.props.timeout;var exit,enter,appear;exit=enter=appear=timeout;if(timeout!=null&&typeof timeout!=='number'){exit=timeout.exit;enter=timeout.enter;// TODO: remove fallback for next major\nappear=timeout.appear!==undefined?timeout.appear:enter;}return{exit:exit,enter:enter,appear:appear};};_proto.updateStatus=function updateStatus(mounting,nextStatus){if(mounting===void 0){mounting=false;}if(nextStatus!==null){// nextStatus will always be ENTERING or EXITING.\nthis.cancelNextCallback();if(nextStatus===ENTERING){this.performEnter(mounting);}else{this.performExit();}}else if(this.props.unmountOnExit&&this.state.status===EXITED){this.setState({status:UNMOUNTED});}};_proto.performEnter=function performEnter(mounting){var _this2=this;var enter=this.props.enter;var appearing=this.context?this.context.isMounting:mounting;var _ref2=this.props.nodeRef?[appearing]:[ReactDOM.findDOMNode(this),appearing],maybeNode=_ref2[0],maybeAppearing=_ref2[1];var timeouts=this.getTimeouts();var enterTimeout=appearing?timeouts.appear:timeouts.enter;// no enter animation skip right to ENTERED\n// if we are mounting and running this it means appear _must_ be set\nif(!mounting&&!enter||config.disabled){this.safeSetState({status:ENTERED},function(){_this2.props.onEntered(maybeNode);});return;}this.props.onEnter(maybeNode,maybeAppearing);this.safeSetState({status:ENTERING},function(){_this2.props.onEntering(maybeNode,maybeAppearing);_this2.onTransitionEnd(enterTimeout,function(){_this2.safeSetState({status:ENTERED},function(){_this2.props.onEntered(maybeNode,maybeAppearing);});});});};_proto.performExit=function performExit(){var _this3=this;var exit=this.props.exit;var timeouts=this.getTimeouts();var maybeNode=this.props.nodeRef?undefined:ReactDOM.findDOMNode(this);// no exit animation skip right to EXITED\nif(!exit||config.disabled){this.safeSetState({status:EXITED},function(){_this3.props.onExited(maybeNode);});return;}this.props.onExit(maybeNode);this.safeSetState({status:EXITING},function(){_this3.props.onExiting(maybeNode);_this3.onTransitionEnd(timeouts.exit,function(){_this3.safeSetState({status:EXITED},function(){_this3.props.onExited(maybeNode);});});});};_proto.cancelNextCallback=function cancelNextCallback(){if(this.nextCallback!==null){this.nextCallback.cancel();this.nextCallback=null;}};_proto.safeSetState=function safeSetState(nextState,callback){// This shouldn't be necessary, but there are weird race conditions with\n// setState callbacks and unmounting in testing, so always make sure that\n// we can cancel any pending setState callbacks after we unmount.\ncallback=this.setNextCallback(callback);this.setState(nextState,callback);};_proto.setNextCallback=function setNextCallback(callback){var _this4=this;var active=true;this.nextCallback=function(event){if(active){active=false;_this4.nextCallback=null;callback(event);}};this.nextCallback.cancel=function(){active=false;};return this.nextCallback;};_proto.onTransitionEnd=function onTransitionEnd(timeout,handler){this.setNextCallback(handler);var node=this.props.nodeRef?this.props.nodeRef.current:ReactDOM.findDOMNode(this);var doesNotHaveTimeoutOrListener=timeout==null&&!this.props.addEndListener;if(!node||doesNotHaveTimeoutOrListener){setTimeout(this.nextCallback,0);return;}if(this.props.addEndListener){var _ref3=this.props.nodeRef?[this.nextCallback]:[node,this.nextCallback],maybeNode=_ref3[0],maybeNextCallback=_ref3[1];this.props.addEndListener(maybeNode,maybeNextCallback);}if(timeout!=null){setTimeout(this.nextCallback,timeout);}};_proto.render=function render(){var status=this.state.status;if(status===UNMOUNTED){return null;}var _this$props=this.props,children=_this$props.children,_in=_this$props.in,_mountOnEnter=_this$props.mountOnEnter,_unmountOnExit=_this$props.unmountOnExit,_appear=_this$props.appear,_enter=_this$props.enter,_exit=_this$props.exit,_timeout=_this$props.timeout,_addEndListener=_this$props.addEndListener,_onEnter=_this$props.onEnter,_onEntering=_this$props.onEntering,_onEntered=_this$props.onEntered,_onExit=_this$props.onExit,_onExiting=_this$props.onExiting,_onExited=_this$props.onExited,_nodeRef=_this$props.nodeRef,childProps=_objectWithoutPropertiesLoose(_this$props,[\"children\",\"in\",\"mountOnEnter\",\"unmountOnExit\",\"appear\",\"enter\",\"exit\",\"timeout\",\"addEndListener\",\"onEnter\",\"onEntering\",\"onEntered\",\"onExit\",\"onExiting\",\"onExited\",\"nodeRef\"]);return/*#__PURE__*/ (// allows for nested Transitions\nReact.createElement(TransitionGroupContext.Provider,{value:null},typeof children==='function'?children(status,childProps):/*#__PURE__*/React.cloneElement(React.Children.only(children),childProps)));};return Transition;}(React.Component);Transition.contextType=TransitionGroupContext;// Name the function so it is clearer in the documentation\nfunction noop(){}Transition.defaultProps={in:false,mountOnEnter:false,unmountOnExit:false,appear:false,enter:true,exit:true,onEnter:noop,onEntering:noop,onEntered:noop,onExit:noop,onExiting:noop,onExited:noop};Transition.UNMOUNTED=UNMOUNTED;Transition.EXITED=EXITED;Transition.ENTERING=ENTERING;Transition.ENTERED=ENTERED;Transition.EXITING=EXITING;export default Transition;","map":null,"metadata":{},"sourceType":"module"}