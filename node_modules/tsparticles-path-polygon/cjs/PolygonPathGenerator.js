"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolygonPathGenerator = void 0;
const tsparticles_engine_1 = require("tsparticles-engine");
class PolygonPathGenerator {
    constructor() {
        this.dirsList = [];
        this.options = {
            sides: 6,
            turnSteps: 20,
            angle: 30,
        };
    }
    generate(p) {
        if (p.hexStep === undefined) {
            p.hexStep = 0;
        }
        if (p.hexDirection === undefined) {
            p.hexDirection =
                this.options.sides === 6 ? ((Math.random() * 3) | 0) * 2 : (Math.random() * this.options.sides) | 0;
        }
        if (p.hexSpeed === undefined) {
            p.hexSpeed = p.velocity.length;
        }
        if (p.hexStep % this.options.turnSteps === 0) {
            p.hexDirection =
                Math.random() > 0.5
                    ? (p.hexDirection + 1) % this.options.sides
                    : (p.hexDirection + this.options.sides - 1) % this.options.sides;
        }
        p.velocity.x = 0;
        p.velocity.y = 0;
        p.hexStep++;
        return tsparticles_engine_1.Vector.create(this.dirsList[p.hexDirection].x * p.hexSpeed, this.dirsList[p.hexDirection].y * p.hexSpeed);
    }
    init(container) {
        var _a;
        const options = container.actualOptions.particles.move.path.options;
        this.options.sides = options.sides > 0 ? options.sides : 6;
        this.options.angle = (_a = options.angle) !== null && _a !== void 0 ? _a : 30;
        this.options.turnSteps = options.turnSteps >= 0 ? options.turnSteps : 20;
        this.createDirs();
    }
    update() {
    }
    createDirs() {
        this.dirsList = [];
        for (let i = 0; i < 360; i += 360 / this.options.sides) {
            const angle = this.options.angle + i;
            this.dirsList.push(tsparticles_engine_1.Vector.create(Math.cos((angle * Math.PI) / 180), Math.sin((angle * Math.PI) / 180)));
        }
    }
}
exports.PolygonPathGenerator = PolygonPathGenerator;
